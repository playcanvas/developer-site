"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[22208],{7184:(e,t,n)=>{n.d(t,{C:()=>N,G:()=>S});var s=n(11470),a=n(19365),i=n(59849),o=n(96540),r=n(95293),l=n(9764),p=n(18676),m=n(58817),u=n(19748),c=n(83395),h=n(43025),d=n(10977),y=n(7306),b=n(68869),f=n(78692),g=n(8939),x=n(40050),v=n(93953),w=n(27351),k=n(74848);const j="// \u2191 imports hidden",S=({code:e,label:t,filename:n,language:r="jsx",showDemo:p=!1,showViewSourceButton:m=!0,showControls:u=!0,children:c})=>{const[h,d]=(0,o.useState)(0);if(!c||!e)return console.error("CodeExample: code and children are required"),null;return(0,k.jsxs)(s.A,{defaultValue:h>0?"Code":p?"Demo":"Code",children:[(0,k.jsx)(a.A,{value:"Demo",children:(0,k.jsxs)("div",{className:"code-example-demo",children:[c,m&&(0,k.jsxs)("div",{className:"code-example-demo-footer",children:[t," - ",(0,k.jsx)("a",{href:"#",onClick:e=>{e.preventDefault(),d(e=>e+1)},children:"View Code"})]}),(0,k.jsx)("div",{className:"code-example-controls",children:(0,k.jsx)(l.XA,{fill:!0,hidden:!1===u})})]})}),(0,k.jsx)(a.A,{value:"Code",children:(0,k.jsx)(i.A,{language:r,title:n,children:e.includes(j)?j+e.split(j)[1]:e})})]},h)},D=e=>{const{width:t=8,depth:n=8,intensity:s=.75}=e,a=(0,o.useMemo)(()=>new v.e(t,1,n),[t,n]);return(0,k.jsxs)(p.w,{children:[(0,k.jsx)(u.v,{type:"directional",castShadows:!0,normalOffsetBias:0,shadowBias:0,shadowDistance:16,shadowResolution:1024,shadowType:w.au1,shadowUpdateMode:w.M5l,vsmBlurSize:8,shadowIntensity:s,intensity:0}),(0,k.jsx)(c.e,{script:g.X,intensity:s,scale:a})]})},N=({children:e,useLight:t=!0,useControls:n=!1,useGrid:s=!1,useShadow:a=!1,camera:i=[0,0,10],sceneOffset:l=[0,-.501,0],exposure:u=1})=>{const{colorMode:g}=(0,r.G)(),v=(0,d.n)(),{asset:w}=(0,y.yj)("/assets/helipad.png"),j="dark"===g?"#2a2a2a":"#e4e0e0",[S,N]=(0,o.useState)(!1),[E,T]=(0,o.useState)(!1),C=(0,o.useCallback)(()=>N(!0),[]),A=(0,o.useCallback)(()=>N(!1),[]),I=(0,o.useCallback)(()=>T(!0),[]),R=(0,o.useCallback)(()=>T(!1),[]);return(0,o.useEffect)(()=>{const e=v.graphicsDevice.canvas;e.style.cursor=S?"grabbing":E?"grab":"default"},[S,E,v]),(0,o.useEffect)(()=>{const e=()=>N(!1);return v.graphicsDevice.canvas.addEventListener("pointerup",e),()=>v.graphicsDevice?.canvas.removeEventListener("pointerup",e)},[v]),(0,k.jsxs)(p.w,{children:[(0,k.jsxs)(p.w,{name:"camera",position:i,children:[(0,k.jsx)(m.i,{clearColor:j,renderSceneColorMap:!0}),n&&(0,k.jsx)(c.e,{script:b.a,enableFly:!1,pitchRange:new x.Z(-90,-5)})]}),t&&(0,k.jsx)(h.O,{envAtlas:w,showSkybox:!1,exposure:u}),s&&(0,k.jsx)(p.w,{name:"grid",scale:[1e3,1,1e3],position:[0,-.5,0],children:(0,k.jsx)(c.e,{script:f.x})}),a&&(0,k.jsx)(p.w,{position:l,children:(0,k.jsx)(D,{})}),(0,k.jsx)(p.w,{onPointerOver:I,onPointerOut:R,onPointerDown:C,onPointerUp:A,children:e})]})}},24421:(e,t,n)=>{n.d(t,{A:()=>u});var s=n(18676),a=n(19748),i=n(83395),o=n(93953),r=n(27351),l=n(8939),p=n(96540),m=n(74848);const u=e=>{const{width:t=2,depth:n=2,intensity:u=.75}=e,c=(0,p.useMemo)(()=>new o.e(t,1,n),[t,n]);return(0,m.jsxs)(s.w,{position:[0,.001,0],children:[(0,m.jsx)(a.v,{type:"directional",castShadows:!0,normalOffsetBias:0,shadowBias:0,shadowDistance:16,shadowResolution:1024,shadowType:r.au1,shadowUpdateMode:r.M5l,vsmBlurSize:8,shadowIntensity:u,intensity:0}),(0,m.jsx)(i.e,{script:l.X,intensity:u,scale:c})]})}},27222:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>f,default:()=>w,frontMatter:()=>b,metadata:()=>s,toc:()=>x});const s=JSON.parse('{"id":"user-manual/playcanvas-react/api/environment","title":"<Environment/>","description":"Documentation for the Environment component","source":"@site/docs/user-manual/playcanvas-react/api/environment.mdx","sourceDirName":"user-manual/playcanvas-react/api","slug":"/user-manual/playcanvas-react/api/environment","permalink":"/ja/user-manual/playcanvas-react/api/environment","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/playcanvas-react/api/environment.mdx","tags":[],"version":"current","frontMatter":{"description":"Documentation for the Environment component"},"sidebar":"userManualSidebar","previous":{"title":"<Collision/>","permalink":"/ja/user-manual/playcanvas-react/api/collision"},"next":{"title":"<GSplat/>","permalink":"/ja/user-manual/playcanvas-react/api/gsplat"}}');var a=n(74848),i=n(28453),o=n(7184),r=n(78264),l=n(18676),p=n(43025),m=n(16230),u=n(7306),c=n(9764);const h={exposure:{value:.75,min:0,max:1},environment:{options:{Street:"/assets/wide-street.hdr","Aviation Museum":"/assets/museum.hdr"},value:"/assets/wide-street.hdr"}},d=()=>{const{exposure:e,environment:t}=(0,c._5)(h),{asset:n}=(0,u.fn)("/assets/lambo.glb"),{asset:s}=(0,u.zo)(t);return n&&s?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(p.O,{type:"dome",skybox:s,exposure:e,scale:[15,15,15],center:[0,.09,0],rotation:[0,290,0],showSkybox:!0}),(0,a.jsx)(l.w,{name:"lambo",children:(0,a.jsx)(m.d,{asset:n})})]}):null},y="import { Entity } from '@playcanvas/react';\nimport { Environment, Render } from '@playcanvas/react/components';\nimport {  useTexture, useModel } from '@playcanvas/react/hooks';\nimport { useControls } from 'leva'\n\nconst vars = { \n    exposure: { value: 0.75, min: 0, max: 1 }, \n    environment: {\n        options: {\n        Street:'/assets/wide-street.hdr', \n        ['Aviation Museum']:'/assets/museum.hdr'\n        },\n        value: '/assets/wide-street.hdr'\n    } \n}\n// \u2191 imports hidden\n\nexport const EnvironmentExample = () => {\n    const { exposure, environment } = useControls(vars)\n    \n    // Load the assets\n    const { asset: lambo } = useModel('/assets/lambo.glb');\n    const { asset: skybox } = useTexture(environment);\n    \n    if (!lambo || !skybox) return null;\n\n    return (<>\n        {/* Environment with controllable settings */}\n        <Environment \n            type=\"dome\"\n            skybox={skybox}\n            exposure={exposure}\n            scale={[15, 15, 15]} \n            center={[0.0, 0.09, 0.0]} \n            rotation={[0, 290, 0]}\n            showSkybox={true}\n        />\n\n        {/* Render the model */}\n        <Entity name='lambo'>\n            <Render asset={lambo} />\n        </Entity>\n    </>);\n}\n",b={description:"Documentation for the Environment component"},f="<Environment/>",g={},x=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2}];function v(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{RenderApiDocs:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RenderApiDocs",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"environment",children:(0,a.jsx)(t.code,{children:"<Environment/>"})})}),"\n","\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"<Environment/>"})," component is used to configure the environment lighting and skybox for a scene. It provides a simple way to set up global lighting, and other effects that affect the entire scene."]}),"\n",(0,a.jsxs)(t.p,{children:["With an ",(0,a.jsx)(t.code,{children:"<Environment/>"})," component in your scene, you can:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Set the background texture for the scene"}),"\n",(0,a.jsx)(t.li,{children:"Provides Image-Based Lighting (IBL) for realistic environmental reflections"}),"\n",(0,a.jsx)(t.li,{children:"Controls sky dome properties, rotation, scale, and positioning"}),"\n",(0,a.jsx)(t.li,{children:"Manages exposure, luminance, and other global lighting parameters"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsxs)(t.p,{children:["Place the ",(0,a.jsx)(t.code,{children:"<Environment/>"})," component within an ",(0,a.jsx)(t.a,{href:"../application",children:(0,a.jsx)(t.code,{children:"<Application/>"})})," and add it to the scene. You'll need to load a HDR or environment atlas and provide it to the component."]}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:[(0,a.jsxs)(t.strong,{children:["You only need one ",(0,a.jsx)(t.code,{children:"<Environment/>"})," component for the entire scene"]}),". Using multiple ",(0,a.jsx)(t.code,{children:"<Environment/>"})," components within the same ",(0,a.jsx)(t.code,{children:"<Application/>"})," will trigger a warning."]})}),"\n",(0,a.jsxs)(t.p,{children:["Simply load a HDR and set it as the skybox. You can find great HDR images on ",(0,a.jsx)(t.a,{href:"https://hdrihaven.com/",children:"HDRI Haven"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:"copy",children:"const EnvironmentExample = () => {\n  const { asset: skybox } = useTexture('/env.hdr')\n\n  return (\n      <Environment skybox={skybox} />\n      {/* The rest of your scene... */}\n  )\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The component will affect the entire scene, so you should only use it once. You can specify global lighting parameters like exposure, luminance, and other global lighting parameters. See the ",(0,a.jsx)(t.a,{href:"#properties",children:"Properties"})," section for more details."]}),"\n",(0,a.jsxs)(t.p,{children:["You can also use the ",(0,a.jsx)(t.code,{children:"<Environment/>"})," component to create a dome effect. This is useful for creating a more realistic environment with a ground plane. You can specify the scale, position, rotation, and other properties of the dome."]}),"\n",(0,a.jsx)(o.G,{label:"Switch between different environment atlases and exposure settings",filename:"environment-example.jsx",code:y,showDemo:!0,children:(0,a.jsx)(r.l,{children:(0,a.jsx)(o.C,{useLight:!1,useShadow:!0,camera:[3,.2,3],useControls:!0,sceneOffset:[0,0,0],children:(0,a.jsx)(d,{})})})}),"\n",(0,a.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(n,{data:'[{"name":"default","description":"","entries":[{"name":"device","description":"","optional":true,"type":{"displayName":"GraphicsDevice","types":[{"name":"GraphicsDevice","url":"https://api.playcanvas.com/engine/classes/GraphicsDevice.html"}]}},{"name":"scene","description":"","optional":true,"type":{"displayName":"Scene","types":[{"name":"Scene","url":"https://api.playcanvas.com/engine/classes/Scene.html"}]}},{"name":"centerArray","description":"","optional":true,"type":{"displayName":"Float32Array<ArrayBuffer>","types":[{"name":"Float32Array","url":null}]}},{"name":"projectedSkydomeCenterId","description":"","optional":true,"type":{"displayName":"ScopeId","types":[{"name":"ScopeId","url":"https://api.playcanvas.com/engine/classes/ScopeId.html"}]}},{"name":"type","description":"The type of the sky. One of the SKYMESH_* constants. Defaults to SKYTYPE_INFINITE.\\nCan be:\\n\\n- SKYTYPE_INFINITE\\n- SKYTYPE_BOX\\n- SKYTYPE_DOME","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"depthWrite","description":"Whether depth writing is enabled for the sky. Defaults to false.\\n\\nWriting a depth value for the skydome is supported when its type is not\\nSKYTYPE_INFINITE. When enabled, the depth is written during a prepass render pass and\\ncan be utilized by subsequent passes to apply depth-based effects, such as Depth of Field.\\n\\nNote: For the skydome to be rendered during the prepass, the Sky Layer must be ordered before\\nthe Depth layer, which is the final layer used in the prepass.\\nReturns whether depth writing is enabled for the sky.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"scale","description":"The scale of the sky.","optional":true,"type":{"displayName":"[number, number, number]","types":[{"name":"[number, number, number]","url":null}]}},{"name":"position","description":"The position of the sky.","optional":true,"type":{"displayName":"[number, number, number]","types":[{"name":"[number, number, number]","url":null}]}},{"name":"center","description":"The center of the sky.","optional":true,"type":{"displayName":"[number, number, number]","types":[{"name":"[number, number, number]","url":null}]}},{"name":"rotation","description":"The rotation of the sky.","optional":true,"type":{"displayName":"[number, number, number]","types":[{"name":"[number, number, number]","url":null}]}},{"name":"showSkybox","description":"Whether to show the skybox.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"ambientBake","description":"If enabled, the ambient lighting will be baked into lightmaps. This will be either the\\nScene#skybox  if set up, otherwise Scene#ambientLight . Defaults to false.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"ambientBakeOcclusionBrightness","description":"If Scene#ambientBake  is true, this specifies the brightness of ambient occlusion.\\nTypical range is -1 to 1. Defaults to 0, representing no change to brightness.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"ambientBakeOcclusionContrast","description":"If Scene#ambientBake  is true, this specifies the contrast of ambient occlusion.\\nTypical range is -1 to 1. Defaults to 0, representing no change to contrast.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"ambientLight","description":"The color of the scene\'s ambient light, specified in sRGB color space. Defaults to black\\n(0, 0, 0).","optional":true,"type":{"displayName":"Color","types":[{"name":"Color","url":"https://api.playcanvas.com/engine/classes/Color.html"}]}},{"name":"ambientLuminance","description":"The luminosity of the scene\'s ambient light in lux (lm/m^2). Used if physicalUnits is true. Defaults to 0.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"exposure","description":"The exposure value tweaks the overall brightness of the scene. Ignored if physicalUnits is true. Defaults to 1.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"lightmapSizeMultiplier","description":"The lightmap resolution multiplier. Defaults to 1.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"lightmapMaxResolution","description":"The maximum lightmap resolution. Defaults to 2048.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"lightmapMode","description":"The lightmap baking mode. Can be:\\n\\n- BAKE_COLOR: single color lightmap\\n- BAKE_COLORDIR: single color lightmap + dominant light direction (used for bump or\\nspecular). Only lights with bakeDir=true will be used for generating the dominant light\\ndirection.\\n\\nDefaults to BAKE_COLORDIR.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"lightmapFilterEnabled","description":"Enables bilateral filter on runtime baked color lightmaps, which removes the noise and\\nbanding while preserving the edges. Defaults to false. Note that the filtering takes place\\nin the image space of the lightmap, and it does not filter across lightmap UV space seams,\\noften making the seams more visible. It\'s important to balance the strength of the filter\\nwith number of samples used for lightmap baking to limit the visible artifacts.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"lightmapHDR","description":"Enables HDR lightmaps. This can result in smoother lightmaps especially when many samples\\nare used. Defaults to false.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"root","description":"The root entity of the scene, which is usually the only child to the Application\\nroot entity.","optional":true,"type":{"displayName":"Entity","types":[{"name":"Entity","url":"https://api.playcanvas.com/engine/classes/Entity.html"}]}},{"name":"physicalUnits","description":"Use physically based units for cameras and lights. When used, the exposure value is ignored.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"updateShaders","description":"","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"immediate","description":"","optional":true,"type":{"displayName":"Immediate","types":[{"name":"Immediate","url":"https://api.playcanvas.com/engine/classes/Immediate.html"}]}},{"name":"ambientBakeNumSamples","description":"Sets the number of samples used to bake the ambient light into the lightmap. Note that\\nScene#ambientBake  must be true for this to have an effect. Defaults to 1. Maximum\\nvalue is 255.\\nGets the number of samples used to bake the ambient light into the lightmap.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"ambientBakeSpherePart","description":"Sets the part of the sphere which represents the source of ambient light. Note that\\nScene#ambientBake  must be true for this to have an effect. The valid range is 0..1,\\nrepresenting a part of the sphere from top to the bottom. A value of 0.5 represents the\\nupper hemisphere. A value of 1 represents a full sphere. Defaults to 0.4, which is a smaller\\nupper hemisphere as this requires fewer samples to bake.\\nGets the part of the sphere which represents the source of ambient light.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clusteredLightingEnabled","description":"Sets whether clustered lighting is enabled. Set to false before the first frame is rendered\\nto use non-clustered lighting. Defaults to true.\\nGets whether clustered lighting is enabled.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"layers","description":"Sets the LayerComposition that defines rendering order of this scene.\\nGets the LayerComposition that defines rendering order of this scene.","optional":true,"type":{"displayName":"LayerComposition","types":[{"name":"LayerComposition","url":"https://api.playcanvas.com/engine/classes/LayerComposition.html"}]}},{"name":"lightmapFilterRange","description":"Sets the range parameter of the bilateral filter. It\'s used when Scene#lightmapFilterEnabled \\nis enabled. Larger value applies more widespread blur. This needs to be a positive non-zero\\nvalue. Defaults to 10.\\nGets the range parameter of the bilateral filter.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"lightmapFilterSmoothness","description":"Sets the spatial parameter of the bilateral filter. It\'s used when Scene#lightmapFilterEnabled \\nis enabled. Larger value blurs less similar colors. This needs to be a positive non-zero\\nvalue. Defaults to 0.2.\\nGets the spatial parameter of the bilateral filter.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"prefilteredCubemaps","description":"Sets the 6 prefiltered cubemaps acting as the source of image-based lighting.\\nGets the 6 prefiltered cubemaps acting as the source of image-based lighting.","optional":true,"type":{"displayName":"Texture[]","types":[{"name":"Array","url":null}]}},{"name":"skyboxIntensity","description":"Sets the multiplier for skybox intensity. Defaults to 1. Unused if physical units are used.\\nGets the multiplier for skybox intensity.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"skyboxLuminance","description":"Sets the luminance (in lm/m^2) of the skybox. Defaults to 0. Only used if physical units are used.\\nGets the luminance (in lm/m^2) of the skybox.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"skyboxMip","description":"Sets the mip level of the skybox to be displayed. Only valid for prefiltered cubemap skyboxes.\\nDefaults to 0 (base level).\\nGets the mip level of the skybox to be displayed.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"skyboxHighlightMultiplier","description":"Sets the highlight multiplier for the skybox. The HDR skybox can represent brightness levels\\nup to a maximum of 64, with any values beyond this being clipped. This limitation prevents\\nthe accurate representation of extremely bright sources, such as the Sun, which can affect\\nHDR bloom rendering by not producing enough bloom. The multiplier adjusts the brightness\\nafter clipping, enhancing the bloom effect for bright sources. Defaults to 1.\\nGets the highlight multiplied for the skybox.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"skyboxRotation","description":"Sets the rotation of the skybox to be displayed. Defaults to Quat.IDENTITY.\\nGets the rotation of the skybox to be displayed.","optional":true,"type":{"displayName":"Quat","types":[{"name":"Quat","url":"https://api.playcanvas.com/engine/classes/Quat.html"}]}},{"name":"skybox","description":"The skybox asset.\\nUsed to set the skybox of the environment.","optional":true,"type":{"displayName":"Asset | null","types":[{"name":"Asset","url":"https://api.playcanvas.com/engine/classes/Asset.html"}]}},{"name":"envAtlas","description":"The environment lighting.\\nUsed to set the lighting of the environment.","optional":true,"type":{"displayName":"Asset | null","types":[{"name":"Asset","url":"https://api.playcanvas.com/engine/classes/Asset.html"}]}}]}]'})]})}function w(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(v,{...e})}):v(e)}},49801:(e,t,n)=>{n.d(t,{A:()=>r});var s=n(18676),a=n(83395),i=n(78692),o=n(74848);const r=({...e})=>(0,o.jsx)(s.w,{scale:[1e3,1,1e3],children:(0,o.jsx)(a.e,{script:i.x,...e})})},53558:(e,t,n)=>{n.d(t,{A:()=>g});var s=n(96540),a=n(68869),i=n(8939),o=n(78692),r=n(14007),l=n(25303),p=n(34363),m=n(53512),u=n(49801),c=n(24421),h=n(85593),d=n(83395),y=n(83171),b=n(74848);const f=e=>(0,b.jsx)(d.e,{script:y.d,...e}),g={React:s,...s,...r,...l,...p,...m,Grid:u.A,ShadowCatcher:c.A,GridScript:o.x,ShadowCatcherScript:i.X,StaticPostEffects:h.A,AutoRotate:f,CameraControls:a.a}},85593:(e,t,n)=>{n.d(t,{A:()=>o});var s=n(83395),a=n(15817),i=n(74848);const o=e=>{const t={lighting:{exposure:1.21,skyBoxIntensity:1.02},rendering:{renderFormat:18,renderTargetScale:1,sharpness:0,samples:4,toneMapping:4,fog:"none",fogColor:{r:0,g:0,b:0,a:1},fogRange:[0,100],fogDensity:.01,renderFormatFallback0:12,renderFormatFallback1:14,sceneColorMap:!1,sceneDepthMap:!1,fogStart:0,fogEnd:100},bloom:{enabled:!0,intensity:.1,lastMipLevel:1},grading:{enabled:!0,brightness:.83,contrast:1.1,saturation:1.2,tint:{r:1,g:.9333333333333333,b:.8666666666666667,a:1}},vignette:{enabled:!0,intensity:1,inner:.25,outer:1.52,curvature:.78},fringing:{enabled:!0,intensity:10},...e};return(0,i.jsx)(s.e,{script:a.P,...t})}}}]);