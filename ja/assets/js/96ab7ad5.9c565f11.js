"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[13302],{28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var a=n(96540);const r={},t=a.createContext(r);function o(e){const s=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(t.Provider,{value:s},e.children)}},84886:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"user-manual/playcanvas-react/api/hooks/use-asset","title":"Asset Hooks","description":"Documentation for the Assets hook","source":"@site/docs/user-manual/playcanvas-react/api/hooks/use-asset.mdx","sourceDirName":"user-manual/playcanvas-react/api/hooks","slug":"/user-manual/playcanvas-react/api/hooks/use-asset","permalink":"/ja/user-manual/playcanvas-react/api/hooks/use-asset","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/playcanvas-react/api/hooks/use-asset.mdx","tags":[],"version":"current","frontMatter":{"description":"Documentation for the Assets hook"},"sidebar":"userManualSidebar","previous":{"title":"useAppEvent","permalink":"/ja/user-manual/playcanvas-react/api/hooks/use-app-event"},"next":{"title":"useMaterial","permalink":"/ja/user-manual/playcanvas-react/api/hooks/use-material"}}');var r=n(74848),t=n(28453);const o={description:"Documentation for the Assets hook"},l="Asset Hooks",i={},d=[{value:"Loading Progress",id:"loading-progress",level:2},{value:"All Hooks",id:"all-hooks",level:3},{value:"API",id:"api",level:2},{value:"useModel",id:"usemodel",level:2},{value:"Draco Decoding",id:"draco-decoding",level:3},{value:"useSplat",id:"usesplat",level:2},{value:"useTexture",id:"usetexture",level:2},{value:"useEnvAtlas",id:"useenvatlas",level:2},{value:"useFont",id:"usefont",level:2},{value:"useAsset",id:"useasset",level:2}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components},{RenderApiDocs:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RenderApiDocs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"asset-hooks",children:"Asset Hooks"})}),"\n",(0,r.jsx)(s.p,{children:"PlayCanvas React provides hooks for loading and managing different assets. These hooks simplify the process of loading assets and allow you to handle loading and error states."}),"\n",(0,r.jsx)(s.p,{children:"The general signature of every hook looks something like the following."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:"const { asset, loading, error } = useModel(src, props);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Where ",(0,r.jsx)(s.code,{children:"src"})," is the URL of the asset and ",(0,r.jsx)(s.code,{children:"props"})," are additional properties to pass to the asset loader."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",metastring:'copy filename="render-glb.tsx"',children:"import { useModel } from '@playcanvas/react/hooks';\n\nexport function RenderAsset() {\n    const { asset, loading, error } = useModel('model.glb');\n\n    if (loading) return <LoadingSpinner />;\n    if (error) return <ErrorMessage message={error} />;\n    if (!asset) return null;\n\n    return <Render asset={asset} />;\n}\n"})}),"\n",(0,r.jsx)(s.h2,{id:"loading-progress",children:"Loading Progress"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"useAsset"})," hook supports loading progress via the ",(0,r.jsx)(s.code,{children:"subscribe"})," callback. This is useful if you want to show a loading indicator or update a progress bar. Not all asset types return a progress value during load, so this is not guaranteed to be available for all asset types."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",metastring:'copy filename="render-splat.tsx"',children:"import { useSplat } from '@playcanvas/react/hooks';\n\nexport function RenderSplat() {\n  const [progress, setProgress] = useState(0);\n  const { asset, loading, error, subscribe } = useSplat('splat.ply');\n\n  // Subscribe to loading progress\n  useEffect(() => {\n    const unsubscribe = subscribe(({ progress }) => setProgress(progress));\n    return () => unsubscribe();\n  }, [subscribe]);\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage message={error} />;\n  if (!asset) return null;\n\n  return (<Entity>\n    <GSplat asset={asset} />\n  </Entity>);\n}\n"})}),"\n",(0,r.jsx)(s.h3,{id:"all-hooks",children:"All Hooks"}),"\n",(0,r.jsx)(s.p,{children:"The following hooks are available:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#usemodel",children:(0,r.jsx)(s.code,{children:"useModel"})})," - Load a 3D model asset"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#usesplat",children:(0,r.jsx)(s.code,{children:"useSplat"})})," - Load a Gaussian Splat asset"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#usetexture",children:(0,r.jsx)(s.code,{children:"useTexture"})})," - Load a texture asset"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#useenvatlas",children:(0,r.jsx)(s.code,{children:"useEnvAtlas"})})," - Load an environment atlas texture"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"#useasset",children:(0,r.jsx)(s.code,{children:"useAsset"})})," - Generic hook for loading any type of asset"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(s.p,{children:"This is the full response of an asset hook."}),"\n",(0,r.jsx)(n,{data:'[{"name":"default","description":"Result of an asset loading operation","entries":[{"name":"asset","description":"The loaded asset, or null if not loaded or failed","optional":false,"defaultValue":"null","type":{"displayName":"Asset | null","types":[{"name":"Asset","url":"https://api.playcanvas.com/engine/classes/Asset.html"}]}},{"name":"loading","description":"Whether the asset is currently loading, or false if it has loaded or failed","optional":false,"defaultValue":"true","type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"error","description":"Error message if loading failed, or null if successful","optional":false,"defaultValue":"null","type":{"displayName":"string | null","types":[{"name":"string","url":null}]}},{"name":"subscribe","description":"Use this to subscribe to loading progress events","optional":false,"type":{"displayName":"(cb: AssetResultCallback) => () => void","types":[{"name":"__type","url":null}]}}]}]'}),"\n",(0,r.jsx)(s.h2,{id:"usemodel",children:"useModel"}),"\n",(0,r.jsxs)(s.p,{children:["A specialized hook for loading 3D model assets (GLB/GLTF). Pass the source URL of the model file and any additional properties to pass to the asset loader and use the resulting asset in the ",(0,r.jsx)(s.code,{children:"<Render/>"})," component."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",metastring:'copy filename="render-model.tsx"',children:"import { useModel } from '@playcanvas/react/hooks';\n\nexport function RenderModel() {\n  const { asset, loading, error } = useModel('model.glb');\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage message={error} />;\n  if (!asset) return null;\n\n  return <Render asset={asset} />;\n}\n"})}),"\n",(0,r.jsx)(s.h3,{id:"draco-decoding",children:"Draco Decoding"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"useModel"})," hook also supports Draco decoding out of the box with zero configuration. @playcanvas/react will use the latest version of the Draco decoder (",(0,r.jsx)(s.a,{href:"https://github.com/google/draco?tab=readme-ov-file#version-157-release",children:"1.5.7"}),") and lazy load it from the Google CDN."]}),"\n",(0,r.jsxs)(s.p,{children:["Alternatively if you want to self-host the library you can manually configure the decoder using ",(0,r.jsx)(s.code,{children:"dracoInitialize"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",metastring:'copy filename="render-draco.tsx"',children:"import { dracoInitialize } from 'playcanvas';\n\ndracoInitialize({\n  jsUrl: '/draco_decoder.js',\n  wasmUrl: '/draco_decoder.wasm',\n  lazyInit: true\n});\n"})}),"\n",(0,r.jsx)(s.h2,{id:"usesplat",children:"useSplat"}),"\n",(0,r.jsxs)(s.p,{children:["A specialized hook for loading Gaussian Splat assets. Pass the source URL of the splat file and any additional properties to pass to the asset loader and use the resulting asset in the ",(0,r.jsx)(s.a,{href:"../../gsplat",children:(0,r.jsx)(s.code,{children:"<GSplat/>"})})," component."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",metastring:'copy filename="render-splat.tsx"',children:"import { useSplat } from '@playcanvas/react/hooks';\n\nexport function RenderSplat() {\n  const { asset, loading, error } = useSplat('splat.ply');\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage message={error} />;\n  if (!asset) return null;\n\n  return (<Entity>\n    <GSplat asset={asset} />\n  </Entity>);\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["See the ",(0,r.jsx)(s.a,{href:"../../gsplat",children:(0,r.jsx)(s.code,{children:"<GSplat/>"})})," component for more information."]}),"\n",(0,r.jsx)(s.h2,{id:"usetexture",children:"useTexture"}),"\n",(0,r.jsx)(s.p,{children:"A specialized hook for loading texture assets. Pass the source URL of the texture file and any additional properties to pass to the asset loader and use the resulting asset in any component that accepts a texture."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",metastring:'copy filename="render-texture.tsx"',children:"import { useTexture } from '@playcanvas/react/hooks';\nimport { useMaterial } from '@playcanvas/react/hooks';\n\nexport function RenderTexture() {\n  const { asset, loading, error } = useTexture('texture.jpg');\n  const material = useMaterial({ map: asset.resource });\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage message={error} />;\n  if (!asset) return null;\n\n  return <Render type=\"box\" material={material} />;\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["See the ",(0,r.jsx)(s.a,{href:"../use-material",children:"useMaterial"})," hook and ",(0,r.jsx)(s.a,{href:"../../render",children:"Render"})," component for more information."]}),"\n",(0,r.jsx)(s.h2,{id:"useenvatlas",children:"useEnvAtlas"}),"\n",(0,r.jsxs)(s.p,{children:["A specialized hook for loading environment atlas textures. Pass the source URL of the texture file and any additional properties to pass to the asset loader and use the resulting asset in the ",(0,r.jsx)(s.a,{href:"../../environment",children:(0,r.jsx)(s.code,{children:"<Environment/>"})})," component."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",metastring:'copy filename="render-env-atlas.tsx"',children:"import { useEnvAtlas } from '@playcanvas/react/hooks';\nimport { Environment } from '@playcanvas/react/components';\n\nexport function RenderEnvAtlas() {\n  const { asset, loading, error } = useEnvAtlas('env.jpg');\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage message={error} />;\n  if (!asset) return null;\n\n  return <Environment envAtlas={asset} />;\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["See the ",(0,r.jsx)(s.a,{href:"../../environment",children:"Environment"})," component for more information."]}),"\n",(0,r.jsx)(s.h2,{id:"usefont",children:"useFont"}),"\n",(0,r.jsx)(s.p,{children:"Text in PlayCanvas is rendered using Signed-Distance-Fields (SDFs), so you'll need to convert your ttf fonts into the appropriate format before loading them."}),"\n",(0,r.jsxs)(s.p,{children:["If you're using Vite or Rollup there's an official plugin to convert ttf files for you at build time. Check out the ",(0,r.jsx)(s.a,{href:"https://www.npmjs.com/package/@playcanvas/plugin",children:"@playcanvas/rollup"})," for more information."]}),"\n",(0,r.jsxs)(s.p,{children:["You can import a ttf using the ",(0,r.jsx)(s.code,{children:"?sdf"})," query parameter which will automatically convert it into an SDF texture at build time."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",metastring:'copy filename="render-font.tsx"',children:"\n// Use the @playcanvas/rollup plugin to convert the ttf file into an SDF texture at build time.\nimport inconsolata from \"@assets/fonts/inconsolata.ttf?sdf\";\nimport { useFont } from '@playcanvas/react/hooks';\n\nexport function InconsolataFont() {\n  const { asset, loading, error } = useFont(inconsolata);\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage message={error} />;\n  if (!asset) return null;\n\n  return asset;\n}\n"})}),"\n",(0,r.jsx)(s.h2,{id:"useasset",children:"useAsset"}),"\n",(0,r.jsx)(s.p,{children:"This is a generic hook for loading any type of asset. You can use it to load any asset type that PlayCanvas supports which is sometimes useful if you need to load an asset dynamically."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",metastring:'copy filename="use-dynamic-asset.tsx"',children:"import { useAsset } from '@playcanvas/react/hooks';\n\nconst assetTypeToLoadType = {\n    'ply': useSplat,\n    'jpg': useTexture,\n    'png': useTexture,\n    'glb': useModel,\n    'gltf': useModel,\n}\n\nexport function useDynamicAsset(src: string, props: Record<string, unknown> = {}) {\n\n  const mimeType = src.split('.').pop();\n  const loadType = assetTypeToLoadType[mimeType];\n\n  if (!loadType) {\n    throw new Error(`Unsupported asset type: ${mimeType}`);\n  }\n\n  return useAsset(src, loadType, props);\n}\n"})})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);