"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[53486],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(96540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},56555:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"user-manual/pcui/examples/todo-list","title":"Todo List","description":"\u4ee5\u4e0b\u306eTodo\u30ea\u30b9\u30c8\u3067\u306f\u3001\u30ea\u30b9\u30c8\u306b\u9805\u76ee\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3001\u300c\u5b8c\u4e86\u300d\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u5207\u308a\u66ff\u3048\u305f\u308a\u3001\u305d\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3067\u9805\u76ee\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002","source":"@site/i18n/ja/docusaurus-plugin-content-docs/current/user-manual/pcui/examples/todo-list.md","sourceDirName":"user-manual/pcui/examples","slug":"/user-manual/pcui/examples/todo-list","permalink":"/ja/user-manual/pcui/examples/todo-list","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/pcui/examples/todo-list.md","tags":[],"version":"current","frontMatter":{"title":"Todo List"},"sidebar":"userManualSidebar","previous":{"title":"\u5c65\u6b74","permalink":"/ja/user-manual/pcui/examples/history"},"next":{"title":"PCUI Graph","permalink":"/ja/user-manual/pcui/pcui-graph/"}}');var o=n(74848),i=n(28453);const r={title:"Todo List"},a=void 0,l={},c=[{value:"\u30b3\u30fc\u30c9",id:"\u30b3\u30fc\u30c9",level:3}];function m(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"\u4ee5\u4e0b\u306eTodo\u30ea\u30b9\u30c8\u3067\u306f\u3001\u30ea\u30b9\u30c8\u306b\u9805\u76ee\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3001\u300c\u5b8c\u4e86\u300d\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u5207\u308a\u66ff\u3048\u305f\u308a\u3001\u305d\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3067\u9805\u76ee\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,o.jsx)("div",{className:"iframe-container",children:(0,o.jsx)("iframe",{src:"https://playcanvas.github.io/pcui/storybook/iframe?id=examples-todolist--main&viewMode=story"})}),"\n",(0,o.jsx)(t.h3,{id:"\u30b3\u30fc\u30c9",children:"\u30b3\u30fc\u30c9"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Observer } from '@playcanvas/observer';\n\nimport { Container, TextInput, BooleanInput, Label, SelectInput, Button, BindingTwoWay } from '@playcanvas/pcui/react';\n\nconst observer = new Observer({ input: '', items: {} });\n\nexport const TodoList = (props) => {\n    const [ items, setItems ] = useState({});\n    const [ listFilter, setListFilter ] = useState(0);\n    observer.on('items:set', setItems);\n    const addItem = (value) => {\n        const items = observer.get('items');\n        if (value === '') return;\n        items[Date.now()] = { done: false, text: value };\n        observer.set('input', '');\n        observer.set('items', items);\n    };\n    const removeItem = (key) => {\n        const items = observer.get('items');\n        delete items[key];\n        observer.set('items', items);\n    };\n    const toggleItem = (key) => {\n        const items = observer.get('items');\n        items[key].done = !items[key].done;\n        observer.set('items', items);\n    };\n    const textInputLink = { observer, path: 'input' };\n    return (\n        <Container class='todo'>\n            <TextInput blurOnEnter={false} placeholder='enter item' binding={new BindingTwoWay()} link={textInputLink} onChange={addItem}/>\n            <SelectInput type=\"number\" options={[{v: 0, t: 'Show all items'}, {v: 1, t: 'Show active items'}, {v: 2, t: 'Show done items'}]} onChange={setListFilter} />\n            <Container>\n                {Object.keys(items).map(key => {\n                    var item = items[key];\n                    if (listFilter !== 0) {\n                        if ((listFilter === 1 && item.done) || (listFilter === 2 && !item.done)) return null;\n                    }\n                    return [\n                        <Container key={key} class={'todo-item'}>\n                            <BooleanInput onChange={() => toggleItem(key)} value={item.done} />\n                            <Label text={item.text}/>\n                            <Button icon='E124' text='' size='small' onClick={() => removeItem(key)} />\n                        </Container>\n                    ];\n                })}\n            </Container>\n        </Container>\n    );\n};\n\nReactDOM.render(<TodoList />, document.body);\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);