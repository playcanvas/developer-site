"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[60445],{20539:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/project-settings-a0fc485a0a9d94b74700e50385f82ddf.png"},25073:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tutorials/real-time-multiplayer","title":"\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc","description":"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u30bc\u30ed\u304b\u3089\u81ea\u5206\u81ea\u8eab\u306e\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u30db\u30b9\u30c8\u3055\u308c\u305f\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc\u30b5\u30fc\u30d3\u30b9\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001Colyseus\u304a\u3088\u3073Photon\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304c\u3042\u308a\u307e\u3059\u3002","source":"@site/i18n/ja/docusaurus-plugin-content-docs/current/tutorials/real-time-multiplayer.md","sourceDirName":"tutorials","slug":"/tutorials/real-time-multiplayer","permalink":"/ja/tutorials/real-time-multiplayer","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/real-time-multiplayer.md","tags":[{"inline":true,"label":"multiplayer","permalink":"/ja/tags/multiplayer"},{"inline":true,"label":"networking","permalink":"/ja/tags/networking"}],"version":"current","frontMatter":{"title":"\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc","tags":["multiplayer","networking"],"thumb":"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/406048/507186-image-75.jpg"},"sidebar":"tutorialsSidebar","previous":{"title":"Photon\u3092\u4f7f\u7528\u3057\u305f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc","permalink":"/ja/tutorials/real-time-multiplayer-photon"},"next":{"title":"Render 3D World to UI","permalink":"/ja/tutorials/render-3d-world-to-ui"}}');var a=t(74848),s=t(28453);const r={title:"\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc",tags:["multiplayer","networking"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/406048/507186-image-75.jpg"},o=void 0,l={},c=[{value:"\u30b5\u30fc\u30d0\u30fc\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7",id:"\u30b5\u30fc\u30d0\u30fc\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7",level:2},{value:"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7",id:"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7",level:2},{value:"\u30b5\u30fc\u30d0\u30fc\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u901a\u4fe1",id:"\u30b5\u30fc\u30d0\u30fc\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u901a\u4fe1",level:2},{value:"\u6700\u5f8c\u306b",id:"\u6700\u5f8c\u306b",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u30bc\u30ed\u304b\u3089\u81ea\u5206\u81ea\u8eab\u306e\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u30db\u30b9\u30c8\u3055\u308c\u305f\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc\u30b5\u30fc\u30d3\u30b9\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001",(0,a.jsx)(n.a,{href:"/tutorials/real-time-multiplayer-colyseus",children:"Colyseus"}),"\u304a\u3088\u3073",(0,a.jsx)(n.a,{href:"/tutorials/real-time-multiplayer-photon",children:"Photon"}),"\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304c\u3042\u308a\u307e\u3059\u3002"]})}),"\n",(0,a.jsx)("div",{className:"iframe-container",children:(0,a.jsx)("iframe",{src:"https://playcanv.as/p/XFp1Ty3X/",title:"Real Time Multiplayer",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"WASD \u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u79fb\u52d5\u3057\u307e\u3059\u3002\u30ab\u30d7\u30bb\u30eb\u304c 1 \u3064\u3057\u304b\u8868\u793a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3001\u5225\u306e\u30bf\u30d6\u307e\u305f\u306f\u5225\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u3067\u3053\u306e\u30da\u30fc\u30b8\u3092\u958b\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002"})}),"\n",(0,a.jsxs)(n.p,{children:["In this tutorial we\u2019ll cover how to setup a basic multiplayer project using Node.js and Socket.io. We\u2019ll focus on implementing it in PlayCanvas. By the end you should have a project similar to the one above. You can find the ",(0,a.jsx)(n.a,{href:"https://playcanvas.com/project/406048/overview/tutorial-realtime-multiplayer",children:"tutorial project here"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"\u30b5\u30fc\u30d0\u30fc\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7",children:"\u30b5\u30fc\u30d0\u30fc\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7"}),"\n",(0,a.jsx)(n.p,{children:"\u30d4\u30a2\u30c4\u30fc\u30d4\u30a2\u3067\u306f\u306a\u304f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u30b5\u30fc\u30d0\u30fc\u306e\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u3059\u3079\u3066\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8(PlayCanvas\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9)\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u4fe1\u3057\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3057\u307e\u3059\u3002"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://glitch.com/",children:"Glitch"})," provides a really convenient way to write and deploy backend apps for free completely in your browser! You can use it without an account but creating one will let you easily find your work. ",(0,a.jsx)(n.a,{href:"https://glitch.com/edit/#!/new-project",children:"Create a new Node app"})," and replace the contents of ",(0,a.jsx)(n.code,{children:"server.js"})," with this:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const http = require(\'http\');\nconst { Server } = require(\'socket.io\');\n\nconst server = http.createServer();\n\n// Configure Socket.IO with CORS\nconst io = new Server(server, {\n    cors: {\n        // If you only want to allow PlayCanvas launch domain:\n        // origin: "https://launch.playcanvas.com",\n\n        // Or allow all origins (less secure, but quick for testing)\n        origin: "*",\n        methods: ["GET", "POST"]\n    }\n});\n\nio.on(\'connection\', (socket) => {\n    console.log(`New client connected: ${socket.id}`);\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server started on port ${PORT}`);\n});\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Glitch will automatically re-run the server every time you finish typing. Once you\u2019ve copied this, you should get an error. Click on the ",(0,a.jsx)(n.code,{children:"Logs"})," button at the bottom of the window to open up the server console. Here you can see any server output, as well as the errors. You should see ",(0,a.jsx)(n.code,{children:"Error: Cannot find module 'socket.io'"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Opening the log",src:t(69770).A+"",width:"1402",height:"1044"})}),"\n",(0,a.jsxs)(n.p,{children:["\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u542b\u3081\u308b\u306b\u306f\u3001",(0,a.jsx)(n.code,{children:"package.json"})," \u306b\u79fb\u52d5\u3057\u3001\u30c8\u30c3\u30d7\u306e ",(0,a.jsx)(n.code,{children:"Add Package"})," \u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002 ",(0,a.jsx)(n.code,{children:"socket.io"})," \u3092\u691c\u7d22\u3057\u307e\u3059\u3002"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Adding a package",src:t(29398).A+"",width:"1402",height:"599"})}),"\n",(0,a.jsxs)(n.p,{children:["Once ",(0,a.jsx)(n.code,{children:"socket.io"})," has finished installing, the server will automatically restart and you should see ",(0,a.jsx)(n.code,{children:"Server started on port 3000"})," in the log. Congratulations! You've successfully deployed a server!"]}),"\n",(0,a.jsxs)(n.p,{children:["You can find the domain your server is deployed at by clicking ",(0,a.jsx)(n.code,{children:"Settings"})," in the left sidebar. This is where you can also rename the project."]}),"\n",(0,a.jsx)(n.p,{children:"\u3053\u306e\u30b5\u30fc\u30d0\u30fc\u306f\u3001\u8ab0\u304b\u304c\u63a5\u7d9a\u3059\u308b\u305f\u3073\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30ed\u30b0\u306b\u8a18\u9332\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63a5\u7d9a\u3057\u3066\u3001\u30b5\u30fc\u30d0\u30fc\u306b\u63a5\u7d9a\u3057\u305f\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,a.jsx)(n.h2,{id:"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7",children:"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7"}),"\n",(0,a.jsx)(n.p,{children:"Create a new project on PlayCanvas. We first need to include the Socket.io client JS library, as an external script. To do this. go to your project settings:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Project settings",src:t(20539).A+"",width:"630",height:"199"})}),"\n",(0,a.jsx)(n.p,{children:"'External Scripts'\u3092\u898b\u3064\u3051\u3066\u958b\u304d\u307e\u3059\u3002"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"External scripts settings",src:t(55786).A+"",width:"386",height:"136"})}),"\n",(0,a.jsxs)(n.p,{children:["Change the value from 0 to 1 and add the CDN URL for the socket library from their ",(0,a.jsx)(n.a,{href:"https://cdnjs.com/libraries/socket.io",children:"framework server"}),". In this case, we will be using version ",(0,a.jsx)(n.code,{children:"4.8.1"})," as that is the latest at time of writing:"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Project settings",src:t(77067).A+"",width:"386",height:"136"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-none",children:"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.8.1/socket.io.min.js\n"})}),"\n",(0,a.jsxs)(n.p,{children:["\u6b21\u306b\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30ed\u30b8\u30c3\u30af\u3092\u51e6\u7406\u3059\u308b\u65b0\u3057\u3044\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 ",(0,a.jsx)(n.code,{children:"Network.js"}),"\u3068\u3044\u3046\u65b0\u3057\u3044\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u6700\u521d\u306b\u3001\u30b5\u30fc\u30d0\u30fc\u306b\u63a5\u7d9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001initialize\u30e1\u30bd\u30c3\u30c9\u306b\u6b21\u306e\u884c\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"this.socket = io.connect('https://playcanvas-multiplayer-server.glitch.me');\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Replace ",(0,a.jsx)(n.code,{children:"https://playcanvas-multiplayer-server.glitch.me"})," with the address of your own server."]}),"\n",(0,a.jsxs)(n.p,{children:["To confirm that this works, attach this network script to the ",(0,a.jsx)(n.code,{children:"Root"})," entity, and then launch the game. Keep your eye on the server log at Glitch. If everything worked, the server should log ",(0,a.jsx)(n.code,{children:"New client connected:"})," along with the client ID. The project is now setup to send and receive messages to and from the server."]}),"\n",(0,a.jsx)(n.h2,{id:"\u30b5\u30fc\u30d0\u30fc\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u901a\u4fe1",children:"\u30b5\u30fc\u30d0\u30fc\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u901a\u4fe1"}),"\n",(0,a.jsxs)(n.p,{children:["The way you can send data between the client and server is with the socket connection we made earlier. To send data from the client (in Network.js on PlayCanvas), we use the ",(0,a.jsx)(n.code,{children:"emit"})," function. Here\u2019s an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"this.socket.emit('playerJoined', 'John');\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This emits a message called ",(0,a.jsx)(n.code,{children:"playerJoined"}),", with the data ",(0,a.jsx)(n.code,{children:"John"}),". For the server to receive the message, we need to write in the server file (in ",(0,a.jsx)(n.code,{children:"server.js"})," on Glitch):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"socket.on('playerJoined', function (name) {\n    console.log (name);\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["\u3053\u308c\u306f\u3001",(0,a.jsx)(n.code,{children:"playerJoined"}),"\u304c\u9001\u4fe1\u3055\u308c\u305f\u3068\u304d\u306b\u30b5\u30fc\u30d0\u30fc\u306b\u9001\u4fe1\u3055\u308c\u308b\u30c7\u30fc\u30bf\u3092\u30ed\u30b0\u306b\u8a18\u9332\u3057\u307e\u3059\u3002"]}),"\n",(0,a.jsx)(n.p,{children:"\u3053\u306e\u30c7\u30e2\u3067\u306f\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc\u3067\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u79fb\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u305f\u3081\u3001\u74b0\u5883\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30b0\u30e9\u30a6\u30f3\u30c9\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4f5c\u6210\u3057\u3001Collision (\u30dc\u30c3\u30af\u30b9\u5f62\u72b6) \u3068Static\u30bf\u30a4\u30d7\u306eRigidBody\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u3001\u30b0\u30e9\u30a6\u30f3\u30c9\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u8a2d\u5b9a\u3067\u3059\uff1a"}),"\n",(0,a.jsx)("img",{loading:"lazy",src:"/img/tutorials/multiplayer/ground_entity.png",width:"360"}),"\n",(0,a.jsxs)(n.p,{children:["\u6b21\u306b\u3001\u64cd\u4f5c\u3059\u308b\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u65b0\u3057\u3044\u30ab\u30d7\u30bb\u30eb\u3092\u4f5c\u6210\u3057\u3001 ",(0,a.jsx)(n.code,{children:"Player"})," \u3068\u547c\u3073\u307e\u3059\u3002\u30c0\u30a4\u30ca\u30df\u30c3\u30af\u306a\u30ea\u30b8\u30c3\u30c9\u30dc\u30c7\u30a3\u3068\u885d\u7a81\u30dc\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3057\u3001\u30ea\u30b8\u30c3\u30c9\u30dc\u30c7\u30a3\u306e\u8a2d\u5b9a\u3092\u4ee5\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002"]}),"\n",(0,a.jsx)("img",{loading:"lazy",src:"/img/tutorials/multiplayer/player_entity.png",width:"360"}),"\n",(0,a.jsxs)(n.p,{children:["\u30d7\u30ec\u30a4\u30e4\u30fc\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u8907\u88fd\u3057\u3001 'Other' \u3068\u3044\u3046\u540d\u524d\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\u3053\u306e\u65b0\u3057\u3044\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e ",(0,a.jsx)(n.code,{children:"Enabled"})," \u30dc\u30c3\u30af\u30b9\u3092\u30aa\u30d5\u306b\u3057\u3066\u3001\u6700\u521d\u306f\u7121\u52b9\u306b\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30b2\u30fc\u30e0\u5185\u306e\u4ed6\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3067\u3059\u3002"]}),"\n",(0,a.jsxs)(n.p,{children:["\u30d7\u30ec\u30a4\u30e4\u30fc\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u3001 ",(0,a.jsx)(n.code,{children:"Movement.js"})," \u3068\u3044\u3046\u65b0\u3057\u3044\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u30a2\u30bf\u30c3\u30c1\u3057\u307e\u3059\u3002"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"var Movement = pc.createScript('movement');\n\nMovement.attributes.add('playerSpeed', {\n    type: 'number',\n    default: 30,\n    title: 'Player Speed'\n});\n\n// initialize code called once per entity\nMovement.prototype.initialize = function() {\n    this.force = new pc.Vec3();\n};\n\n// update code called every frame\nMovement.prototype.update = function(dt) {\n    var forward = this.entity.forward;\n    var right = this.entity.right;\n    var app = this.app;\n\n    x = 0;\n    z = 0;\n\n    if (app.keyboard.isPressed(pc.KEY_A)) {\n        x -= right.x;\n        z -= right.z;\n    }\n\n    if (app.keyboard.isPressed(pc.KEY_D)) {\n        x += right.x;\n        z += right.z;\n    }\n\n    if (app.keyboard.isPressed(pc.KEY_W)) {\n        x += forward.x;\n        z += forward.z;\n    }\n\n    if (app.keyboard.isPressed(pc.KEY_S)) {\n        x -= forward.x;\n        z -= forward.z;\n    }\n\n    if (x !== 0 || z !== 0) {\n        x *= dt;\n        z *= dt;\n\n        this.force.set (x, 0, z).normalize ().scale ((this.playerSpeed));\n        this.entity.rigidbody.applyForce (this.force);\n    }\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"When you launch the game you should be able to use WASD to move your player around. If not, you\u2019ve missed a step or did not set the correct settings for the entity. Try changing the speed attribute on the movement script."}),"\n",(0,a.jsx)(n.p,{children:"For the game to work in real time multiplayer, we need to keep track of all players in the game. Replace the current server code with this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const http = require('http');\nconst { Server } = require('socket.io');\n\n/** \n * Class to track each connected player (id + position)\n */\nclass Player {\n    constructor(id) {\n        this.id = id;\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n}\n\nconst server = http.createServer();\n\n// Configure Socket.IO with CORS\nconst io = new Server(server, {\n    cors: {\n        // If you only want to allow PlayCanvas launch domain:\n        // origin: \"https://launch.playcanvas.com\",\n\n        // Or allow all origins (less secure, but quick for testing)\n        origin: \"*\",\n        methods: [\"GET\", \"POST\"]\n    }\n});\n\nconst players = {};\n\n/**\n * Handle new socket connections\n */\nio.on('connection', (socket) => {\n    console.log(`New client connected: ${socket.id}`);\n\n    // Fired when the client is ready to initialize their Player object\n    socket.on('initialize', () => {\n        const newPlayer = new Player(socket.id);\n        players[socket.id] = newPlayer;\n\n        // Send to this client its own ID and the current list of players\n        socket.emit('playerData', { id: socket.id, players });\n\n        // Tell everyone else about this new player\n        socket.broadcast.emit('playerJoined', newPlayer);\n    });\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server started on port ${PORT}`);\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u30d7\u30ec\u30a4\u30e4\u30fc\u304c ",(0,a.jsx)(n.code,{children:"initialize"})," \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3059\u308b\u3068\u3001\u30e6\u30cb\u30fc\u30af\u306aID\u3068\u30b2\u30fc\u30e0\u5185\u306e\u4ed6\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u4ed6\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u63a5\u7d9a\u3057\u305f\u3053\u3068\u3092\u901a\u77e5\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30ed\u30b8\u30c3\u30af\u3092 Network \u30b9\u30af\u30ea\u30d7\u30c8\u306b\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"initialize"})," \u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Your io.connect function call should be up here\n\nthis.socket.emit('initialize');\nvar socket = this.socket;\n\nthis.player = this.app.root.findByName('Player');\nthis.other = this.app.root.findByName('Other');\n\nvar self = this;\nsocket.on('playerData', function (data) {\n    self.initializePlayers (data);\n});\n\nsocket.on('playerJoined', function (data) {\n    self.addPlayer(data);\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u305d\u3057\u3066\u3001Network.js \u5185\u306b\u4ee5\u4e0b\u306e\u65b0\u3057\u3044\u95a2\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"Network.prototype.initializePlayers = function (data) {\n    this.players = data.players;\n    Network.id = data.id;\n\n    for (var id in this.players) {\n        if (id != Network.id) {\n            this.players[id].entity = this.createPlayerEntity(this.players[id]);\n        }\n    }\n\n    this.initialized = true;\n    console.log('initialized');\n};\n\nNetwork.prototype.createPlayerEntity = function (data) {\n    // Create a new player entity\n    var newPlayer = this.other.clone();\n    newPlayer.enabled = true;\n\n    // Add the entity to the entity hierarchy\n    this.other.getParent().addChild(newPlayer);\n\n    // If a location was given, teleport the new entity to the position of the connected player\n    if (data)\n        newPlayer.rigidbody.teleport(data.x, data.y, data.z);\n\n    return newPlayer;\n};\n\nNetwork.prototype.addPlayer = function (data) {\n    this.players[data.id] = data;\n    this.players[data.id].entity = this.createPlayerEntity(data);\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u3053\u3053\u3067\u30b2\u30fc\u30e0\u306b\u53c2\u52a0\u3059\u308b\u3068\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30b5\u30fc\u30d0\u30fc\u306b\u63a5\u7d9a\u3057\u305f\u3053\u3068\u3092\u4f1d\u3048\u3001\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30ea\u30b9\u30c8\u3068\u305d\u306e\u4f4d\u7f6e\u3092\u53d7\u4fe1\u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u5404\u30d7\u30ec\u30a4\u30e4\u30fc\u306b\u5bfe\u3057\u3066\u65b0\u3057\u3044\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u4f5c\u6210\u3057\u3001\u73fe\u5728\u306e\u4f4d\u7f6e\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\u552f\u4e00\u306e\u554f\u984c\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u304c\u3059\u3079\u3066\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u4f4d\u7f6e\u3092\u628a\u63e1\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3067\u3059\u3002\u73fe\u5728\u4f4d\u7f6e\u30921\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306b\u30b5\u30fc\u30d0\u30fc\u306b\u9001\u4fe1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"}),"\n",(0,a.jsxs)(n.p,{children:["\u3053\u308c\u3089\u306e\u30b3\u30fc\u30c9\u3092 Network.js \u306e ",(0,a.jsx)(n.code,{children:"initialize"})," \u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"socket.on('playerMoved', function (data) {\n    self.movePlayer(data);\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"update"})," \u3092\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"Network.prototype.update = function (dt) {\n    this.updatePosition();\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u305d\u3057\u3066\u3001Network.js \u5185\u306b\u4ee5\u4e0b\u306e\u65b0\u3057\u3044\u95a2\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"Network.prototype.movePlayer = function (data) {\n    if (this.initialized && !this.players[data.id].deleted) {\n        this.players[data.id].entity.rigidbody.teleport(data.x, data.y, data.z);\n    }\n};\n\nNetwork.prototype.updatePosition = function () {\n    if (this.initialized) {    \n        var pos = this.player.getPosition();\n        Network.socket.emit('positionUpdate', {id: Network.id, x: pos.x, y: pos.y, z: pos.z});\n    }\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u30b5\u30fc\u30d0\u30fc\u306b\u623b\u308a\u3001\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u81ea\u5206\u306e\u4f4d\u7f6e\u3092\u9001\u4fe1\u3057\u305f\u5834\u5408\u306b\u3069\u3046\u306a\u308b\u304b\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30fc\u30d0\u30fc\u3067\u65b0\u3057\u3044\u30a4\u30d9\u30f3\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Update player position\nsocket.on('positionUpdate', (data) => {\n    if (!players[socket.id]) return;\n    players[socket.id].x = data.x;\n    players[socket.id].y = data.y;\n    players[socket.id].z = data.z;\n\n    // Broadcast updated position to all other players\n    socket.broadcast.emit('playerMoved', {\n        id: socket.id,\n        x: data.x,\n        y: data.y,\n        z: data.z\n    });\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Finally, we need to handle player disconnects. We can do this by listening for the ",(0,a.jsx)(n.code,{children:"disconnect"})," event on the socket."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Handle disconnections\nsocket.on('disconnect', () => {\n    console.log(`Client disconnected: ${socket.id}`);\n    if (!players[socket.id]) return;\n    delete players[socket.id];\n    // Notify other players to remove this player\n    socket.broadcast.emit('killPlayer', socket.id);\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"Let's review the full and final server code:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const http = require('http');\nconst { Server } = require('socket.io');\n\n/** \n * Class to track each connected player (id + position)\n */\nclass Player {\n    constructor(id) {\n        this.id = id;\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n}\n\nconst server = http.createServer();\n\n// Configure Socket.IO with CORS\nconst io = new Server(server, {\n    cors: {\n        // If you only want to allow PlayCanvas launch domain:\n        // origin: \"https://launch.playcanvas.com\",\n\n        // Or allow all origins (less secure, but quick for testing)\n        origin: \"*\",\n        methods: [\"GET\", \"POST\"]\n    }\n});\n\nconst players = {};\n\n/**\n * Handle new socket connections\n */\nio.on('connection', (socket) => {\n    console.log(`New client connected: ${socket.id}`);\n\n    // Fired when the client is ready to initialize their Player object\n    socket.on('initialize', () => {\n        const newPlayer = new Player(socket.id);\n        players[socket.id] = newPlayer;\n\n        // Send to this client its own ID and the current list of players\n        socket.emit('playerData', { id: socket.id, players });\n\n        // Tell everyone else about this new player\n        socket.broadcast.emit('playerJoined', newPlayer);\n    });\n\n    // Update player position\n    socket.on('positionUpdate', (data) => {\n        if (!players[socket.id]) return;\n        players[socket.id].x = data.x;\n        players[socket.id].y = data.y;\n        players[socket.id].z = data.z;\n\n        // Broadcast updated position to all other players\n        socket.broadcast.emit('playerMoved', {\n            id: socket.id,\n            x: data.x,\n            y: data.y,\n            z: data.z\n        });\n    });\n\n    // Handle disconnections\n    socket.on('disconnect', () => {\n        console.log(`Client disconnected: ${socket.id}`);\n        if (!players[socket.id]) return;\n        delete players[socket.id];\n        // Notify other players to remove this player\n        socket.broadcast.emit('killPlayer', socket.id);\n    });\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server started on port ${PORT}`);\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"\u6700\u5f8c\u306b",children:"\u6700\u5f8c\u306b"}),"\n",(0,a.jsx)(n.p,{children:"\u4ee5\u4e0a\u3067\u3059\uff01\u304a\u597d\u307f\u3067\u3001\u4ee5\u4e0b\u306e\u30a2\u30a4\u30c7\u30a2\u3092\u8ffd\u52a0\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u30b2\u30fc\u30e0\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u524a\u9664\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b"}),"\n",(0,a.jsx)(n.li,{children:"\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u7aef\u304b\u3089\u843d\u3061\u305f\u5834\u5408\u306e\u5fa9\u5e30\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Keep in mind this is only a very basic implementation of multiplayer. Realistically, when creating larger multiplayer games you'll want to consider using an authoritative server, instead of handling all the game logic on the client. You can read a more in depth tutorial about ",(0,a.jsx)(n.a,{href:"https://code.tutsplus.com/create-a-multiplayer-pirate-shooter-game-in-your-browser--cms-23311t",children:"how Socket.io works and how to develop multiplayer in JavaScript here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You can find the ",(0,a.jsx)(n.a,{href:"https://glitch.com/edit/#!/playcanvas-multiplayer-server",children:"full server code on Glitch here"}),", where you can also fork it and extend it."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},29398:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/glitch-add-package-f5bd42ee3498d4677f615d4c85f5e82e.png"},55786:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/external_scripts_settings-21a0a9f5a6e9f572226be885d599f155.png"},69770:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/glitch-error-3637521f9bb7518a40ab437f6f33febe.png"},77067:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/added_socket_io_library-a3cab8602b56a3a92d0154930c5e8e33.png"}}]);