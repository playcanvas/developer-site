"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[16430],{28453:(n,t,i)=>{i.d(t,{R:()=>a,x:()=>r});var e=i(96540);const o={},s=e.createContext(o);function a(n){const t=e.useContext(s);return e.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),e.createElement(s.Provider,{value:t},n.children)}},37743:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>e,toc:()=>c});const e=JSON.parse('{"id":"user-manual/physics/calling-ammo","title":"ammo.js\u306eAPI\u3092\u547c\u3073\u51fa\u3059\u65b9\u6cd5","description":"PlayCanvas \u306e ammo.js \u9023\u643a\u306b\u3088\u308a\u3001ammo.js API \u306e\u3059\u3079\u3066\u306e\u6a5f\u80fd\u304c\u516c\u958b\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305f\u3060\u3057\u3001PlayCanvas \u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u76f4\u63a5 ammo.js API \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","source":"@site/i18n/ja/docusaurus-plugin-content-docs/current/user-manual/physics/calling-ammo.md","sourceDirName":"user-manual/physics","slug":"/user-manual/physics/calling-ammo","permalink":"/ja/user-manual/physics/calling-ammo","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/physics/calling-ammo.md","tags":[],"version":"current","frontMatter":{"title":"ammo.js\u306eAPI\u3092\u547c\u3073\u51fa\u3059\u65b9\u6cd5"},"sidebar":"userManualSidebar","previous":{"title":"\u30ec\u30a4\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0","permalink":"/ja/user-manual/physics/ray-casting"},"next":{"title":"ammo.js\u306e\u66f4\u65b0","permalink":"/ja/user-manual/physics/physics-migration"}}');var o=i(74848),s=i(28453);const a={title:"ammo.js\u306eAPI\u3092\u547c\u3073\u51fa\u3059\u65b9\u6cd5"},r=void 0,d={},c=[{value:"\u30b8\u30e7\u30a4\u30f3\u30c8\u30fb\u30b3\u30f3\u30b9\u30c8\u30ec\u30a4\u30f3\u30c8 (Joint Constraints)",id:"\u30b8\u30e7\u30a4\u30f3\u30c8\u30b3\u30f3\u30b9\u30c8\u30ec\u30a4\u30f3\u30c8-joint-constraints",level:2},{value:"\u9023\u7d9a\u885d\u7a81\u691c\u51fa (Continuous Collision Detection)",id:"\u9023\u7d9a\u885d\u7a81\u691c\u51fa-continuous-collision-detection",level:2}];function l(n){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"PlayCanvas \u306e ammo.js \u9023\u643a\u306b\u3088\u308a\u3001ammo.js API \u306e\u3059\u3079\u3066\u306e\u6a5f\u80fd\u304c\u516c\u958b\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305f\u3060\u3057\u3001PlayCanvas \u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u76f4\u63a5 ammo.js API \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,o.jsxs)(t.p,{children:["\u73fe\u5728\u3001PlayCanvas \u306f ammo.js \u306e ",(0,o.jsx)(t.a,{href:"https://github.com/kripken/ammo.js/commit/dcab07bf0e7f2b4b64c01dc45da846344c8f50be",children:"\u3053\u306e\u30d3\u30eb\u30c9"})," \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d3\u30eb\u30c9\u304c\u516c\u958b\u3059\u308b API \u306f ",(0,o.jsx)(t.a,{href:"https://github.com/kripken/ammo.js/blob/dcab07bf0e7f2b4b64c01dc45da846344c8f50be/ammo.idl",children:"\u3053\u3061\u3089"})," \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002ammo.js \u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001",(0,o.jsx)(t.a,{href:"https://github.com/bulletphysics/bullet3/blob/master/docs/Bullet_User_Manual.pdf",children:"Bullet Physics User Guide"})," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"]}),"\n",(0,o.jsx)(t.h2,{id:"\u30b8\u30e7\u30a4\u30f3\u30c8\u30b3\u30f3\u30b9\u30c8\u30ec\u30a4\u30f3\u30c8-joint-constraints",children:"\u30b8\u30e7\u30a4\u30f3\u30c8\u30fb\u30b3\u30f3\u30b9\u30c8\u30ec\u30a4\u30f3\u30c8 (Joint Constraints)"}),"\n",(0,o.jsx)(t.p,{children:"\u73fe\u5728\u3001\u7269\u7406\u7684\u5236\u7d04\uff08\u7269\u7406\u30b8\u30e7\u30a4\u30f3\u30c8\u3068\u3082\u547c\u3070\u308c\u308b\uff09\u3092\u5b9f\u88c5\u3059\u308bPlayCanvas\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001ammo.js\u306eAPI\u3092\u5229\u7528\u3057\u3066\u5236\u7d04\u3092\u5b9f\u88c5\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u5bb9\u6613\u3067\u3059\u3002"}),"\n",(0,o.jsx)(t.p,{children:"\u4ee5\u4e0b\u306f\u3001\u30dd\u30a4\u30f3\u30c8\u30fb\u30c8\u30a5\u30fb\u30dd\u30a4\u30f3\u30c8\u5236\u7d04\uff08\u57fa\u672c\u7684\u306b\u306f\u30dc\u30fc\u30eb\u30a2\u30f3\u30c9\u30bd\u30b1\u30c3\u30c8\u30b8\u30e7\u30a4\u30f3\u30c8\uff09\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"var PointToPointConstraint = pc.createScript('pointToPointConstraint');\n\nPointToPointConstraint.attributes.add('pivotA', {\n    title: 'Pivot',\n    description: 'Position of the constraint in the local space of this entity.',\n    type: 'vec3',\n    default: [0, 0, 0]\n});\nPointToPointConstraint.attributes.add('entityB', {\n    title: 'Connected Entity',\n    description: 'Optional second entity',\n    type: 'entity'\n});\nPointToPointConstraint.attributes.add('pivotB', {\n    title: 'Connected Pivot',\n    description: 'Position of the constraint in the local space of entity B (if specified).',\n    type: 'vec3',\n    default: [0, 0, 0]\n});\nPointToPointConstraint.attributes.add('breakingThreshold', {\n    title: 'Break Threshold',\n    description: 'Maximum breaking impulse threshold required to break the constraint.',\n    type: 'number',\n    default: 3.4e+38\n});\nPointToPointConstraint.attributes.add('enableCollision', {\n    title: 'Enable Collision',\n    description: 'Enable collision between linked rigid bodies.',\n    type: 'boolean',\n    default: true\n});\nPointToPointConstraint.attributes.add('debugRender', {\n    title: 'Debug Render',\n    description: 'Enable to render a representation of the constraint.',\n    type: 'boolean',\n    default: false\n});\nPointToPointConstraint.attributes.add('debugColor', {\n    title: 'Debug Color',\n    description: 'The color of the debug rendering of the constraint.',\n    type: 'rgb',\n    default: [1, 0, 0]\n});\n\n// initialize code called once per entity\nPointToPointConstraint.prototype.initialize = function() {\n    this.createConstraint();\n\n    this.on('attr', function(name, value, prev) {\n        // If any constraint properties change, recreate the constraint\n        if (name === 'pivotA' || name === 'entityB' || name === 'pivotB') {\n            this.createConstraint();\n        } else if (name === 'breakingThreshold') {\n            this.constraint.setBreakingImpulseThreshold(this.breakingThreshold);\n            this.activate();\n        }\n    });\n    this.on('enable', function () {\n        this.createConstraint();\n    });\n    this.on('disable', function () {\n        this.destroyConstraint();\n    });\n    this.on('destroy', function () {\n        this.destroyConstraint();\n    });\n};\n\nPointToPointConstraint.prototype.createConstraint = function() {\n    if (this.constraint) {\n        this.destroyConstraint();\n    }\n\n    var bodyA = this.entity.rigidbody.body;\n    var pivotA = new Ammo.btVector3(this.pivotA.x, this.pivotA.y, this.pivotA.z);\n    if (this.entityB && this.entityB.rigidbody) {\n        var bodyB = this.entityB.rigidbody.body;\n        var pivotB = new Ammo.btVector3(this.pivotB.x, this.pivotB.y, this.pivotB.z);\n        this.constraint = new Ammo.btPoint2PointConstraint(bodyA, bodyB, pivotA, pivotB);\n    } else {\n        this.constraint = new Ammo.btPoint2PointConstraint(bodyA, pivotA);\n    }\n\n    var dynamicsWorld = this.app.systems.rigidbody.dynamicsWorld;\n    dynamicsWorld.addConstraint(this.constraint, !this.enableCollision);\n\n    this.activate();\n};\n\nPointToPointConstraint.prototype.destroyConstraint = function() {\n    if (this.constraint) {\n        var dynamicsWorld = this.app.systems.rigidbody.dynamicsWorld;\n        dynamicsWorld.removeConstraint(this.constraint);\n        Ammo.destroy(this.constraint);\n        this.constraint = null;\n    }\n};\n\nPointToPointConstraint.prototype.activate = function() {\n    this.entity.rigidbody.activate();\n    if (this.entityB) {\n        this.entityB.rigidbody.activate();\n    }\n};\n\n// update code called every frame\nPointToPointConstraint.prototype.update = function(dt) {\n    if (this.debugRender) {\n        // Note that it's generally bad to allocate new objects in an update function\n        // but this is just for debug rendering and will normally be disabled\n        var tempVecA = new pc.Vec3();\n        this.entity.getWorldTransform().transformPoint(this.pivotA, tempVecA);\n        this.app.renderLine(this.entity.getPosition(), tempVecA, this.debugColor);\n        if (this.entityB) {\n            this.app.renderLine(this.entityB.getPosition(), tempVecA, this.debugColor);\n        }\n    }\n};\n"})}),"\n",(0,o.jsxs)(t.p,{children:["ammo.js\u3092\u4f7f\u7528\u3057\u305f\u3059\u3079\u3066\u306e\u5236\u7d04\u30bf\u30a4\u30d7\u3092\u5b9f\u88c5\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001",(0,o.jsx)(t.a,{href:"https://playcanvas.com/project/618829/overview/physics-constraints",children:"\u3053\u3061\u3089"}),"\u3067\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,o.jsx)(t.h2,{id:"\u9023\u7d9a\u885d\u7a81\u691c\u51fa-continuous-collision-detection",children:"\u9023\u7d9a\u885d\u7a81\u691c\u51fa (Continuous Collision Detection)"}),"\n",(0,o.jsx)(t.p,{children:"\u6642\u306b\u306f\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5185\u306e\u9ad8\u901f\u79fb\u52d5\u3059\u308b\u525b\u4f53\u540c\u58eb\u304c\u4e92\u3044\u306b\u901a\u308a\u629c\u3051\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u514b\u670d\u3059\u308b\u305f\u3081\u306b\u3001ammo.js\u3067\u306f\u9023\u7d9a\u885d\u7a81\u691c\u51fa\uff08Continuous Collision Detection\u3001\u7565\u3057\u3066CCD\uff09\u3068\u3044\u3046\u6982\u5ff5\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001RigidBody\u306e\u524d\u56de\u3068\u73fe\u5728\u306e\u4f4d\u7f6e\u306e\u9593\u306b\u7403\u4f53\u306e\u30dc\u30ea\u30e5\u30fc\u30e0\u3092\u30b9\u30a4\u30fc\u30d7\u3057\u3001\u4ed6\u306e\u7269\u4f53\u306e\u30dc\u30ea\u30e5\u30fc\u30e0\u3068\u306e\u4ea4\u5dee\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u3067\u3001\u885d\u7a81\u306e\u8ffd\u52a0\u30c1\u30a7\u30c3\u30af\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002"}),"\n",(0,o.jsx)(t.p,{children:"\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001PlayCanvas\u306e\u4efb\u610f\u306eRigidBody\u306bCCD\u3092\u6709\u52b9\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"var Ccd = pc.createScript('ccd');\n\nCcd.attributes.add('motionThreshold', {\n    type: 'number',\n    default: 1,\n    title: 'Motion Threshold',\n    description: 'Number of meters moved in one frame before CCD is enabled'\n});\n\nCcd.attributes.add('sweptSphereRadius', {\n    type: 'number',\n    default: 0.2,\n    title: 'Swept Sphere Radius',\n    description: 'This should be below the half extent of the collision volume. E.g For an object of dimensions 1 meter, try 0.2'\n});\n\n// initialize code called once per entity\nCcd.prototype.initialize = function() {\n    var body; // Type btRigidBody\n\n    body = this.entity.rigidbody.body;\n    body.setCcdMotionThreshold(this.motionThreshold);\n    body.setCcdSweptSphereRadius(this.sweptSphereRadius);\n\n    this.on('attr:motionThreshold', function(value, prev) {\n        body = this.entity.rigidbody.body;\n        body.setCcdMotionThreshold(value);\n    });\n    this.on('attr:sweptSphereRadius', function(value, prev) {\n        body = this.entity.rigidbody.body;\n        body.setCcdSweptSphereRadius(value);\n    });\n};\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://playcanvas.com/project/447023/overview/physics-with-ccd",children:"\u3053\u3061\u3089"}),"\u3067CCD\u3092\u5b9f\u88c5\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"]}),"\n",(0,o.jsx)(t.p,{children:"\u3053\u308c\u3089\u306f\u3001ammo.js API\u3092\u76f4\u63a5\u4f7f\u7528\u3059\u308b\u4f8b\u306e\u307b\u3093\u306e\u4e00\u90e8\u3067\u3059\u3002\u3053\u308c\u3092\u5229\u7528\u3059\u308b\u3068\u3001\u4ed6\u306e\u6a5f\u80fd\u3082\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Compound collision shapes"}),"\n",(0,o.jsx)(t.li,{children:"Soft body simulation"}),"\n",(0,o.jsx)(t.li,{children:"Cloth simulation"}),"\n",(0,o.jsx)(t.li,{children:"Vehicles"}),"\n"]})]})}function h(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}}}]);