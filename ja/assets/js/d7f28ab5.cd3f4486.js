"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[610],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var a=s(96540);const t={},o=a.createContext(t);function r(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(o.Provider,{value:n},e.children)}},77540:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"user-manual/playcanvas-react/guide/loading-assets","title":"Loading Assets","description":"Assets are a core part of any 3D application, and they generally take the most time to load, which has a direct impact on your user\'s experience. Knowing how to load and manage assets efficiently is key to a smooth UX. Whether you want to load everything up front, or provide a fast first render, PlayCanvas React has you covered.","source":"@site/docs/user-manual/playcanvas-react/guide/loading-assets.mdx","sourceDirName":"user-manual/playcanvas-react/guide","slug":"/user-manual/playcanvas-react/guide/loading-assets","permalink":"/ja/user-manual/playcanvas-react/guide/loading-assets","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/playcanvas-react/guide/loading-assets.mdx","tags":[],"version":"current","frontMatter":{"title":"Loading Assets"},"sidebar":"userManualSidebar","previous":{"title":"Interactivity","permalink":"/ja/user-manual/playcanvas-react/guide/interactivity"},"next":{"title":"Physics","permalink":"/ja/user-manual/playcanvas-react/guide/physics"}}');var t=s(74848),o=s(28453);const r={title:"Loading Assets"},i=void 0,l={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Preloading",id:"preloading",level:2},{value:"Loading with Props",id:"loading-with-props",level:2},{value:"Asset hooks",id:"asset-hooks",level:2},{value:"Asset Caching",id:"asset-caching",level:3},{value:"Custom Loading States",id:"custom-loading-states",level:3},{value:"Progressive Loading",id:"progressive-loading",level:3},{value:"Data Fetching Libraries",id:"data-fetching-libraries",level:3},{value:"Suspense Integration",id:"suspense-integration",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Assets are a core part of any 3D application, and they generally take the most time to load, which has a direct impact on your user's experience. Knowing how to load and manage assets efficiently is key to a smooth UX. Whether you want to load everything up front, or provide a fast first render, PlayCanvas React has you covered."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"@playcanvas/react"})," provides a set of specialized hooks for loading different types of assets, as well as a utility function for loading assets. For detailed API documentation, see the API reference (coming soon)."]}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.p,{children:"The simplest way to load an asset is to use one of the specialized hooks. There are special hooks for models, gaussian splats, textures and environment map etc, but each have a similar shape."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="model-viewer.tsx"',children:"import { useModel } from '@playcanvas/react/hooks';\n\nexport function ModelViewer() {\n  const { asset } = useModel('model.glb');\n\n  // If the asset is not loaded, return null    \n  if (!asset) return null;\n\n  // If the asset is loaded, render it\n  return <Render type='asset' asset={asset} />;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"preloading",children:"Preloading"}),"\n",(0,t.jsx)(n.p,{children:"The asset hooks also return additional loading info and error states, so you can fallback to a preloader while loading or display an error message if the asset fails to load."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="model-viewer.tsx"',children:"import { useModel } from '@playcanvas/react/hooks';\n\nexport function ModelViewer() {\n  const { asset, loading, error } = useModel('model.glb');\n\n  // If the asset is still loading, show a loading spinner\n  if (loading) return <LoadingSpinner />;\n\n  // If there is an error, show an error message\n  if (error) return <ErrorMessage message={error} />;\n\n  // If the asset is loaded, show the container\n  return <Container asset={asset} />;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"loading-with-props",children:"Loading with Props"}),"\n",(0,t.jsx)(n.p,{children:"Some assets accept additional properties to customize how they are loaded. You can pass these properties to the hook as a second argument."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// Load a texture with specific settings\nconst { asset } = useTexture('texture.jpg', {\n    mipmaps: true,\n    anisotropy: 16,\n    type: 'rgba'\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"asset-hooks",children:"Asset hooks"}),"\n",(0,t.jsxs)(n.p,{children:["There are different hooks for loading different types of assets. You can create more advanced hooks by wrapping the ",(0,t.jsx)(n.code,{children:"useAsset"})," hook."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"useModel"})," for loading 3D GLTF/GLB models"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"useTexture"})," for loading textures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"useSplat"})," for loading Gaussian Splats"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"useEnvAtlas"})," for loading environment atlases"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"useAsset"})," for loading any type of asset"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"asset-caching",children:"Asset Caching"}),"\n",(0,t.jsx)(n.p,{children:"Assets are cached by default to avoid reloading the same file multiple times. This means you're not duplicating on memory, but you'll need to ensure assets are correctly unloaded when they're no longer needed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="unloading-model-viewer.tsx"',children:"import { useModel } from '@playcanvas/react/hooks';\nimport { useEffect } from 'react';\n\nexport function UnloadingModelViewer() {\n  const { asset, loading, error } = useModel('model.glb');\n\n  useEffect(() => {\n    return () => asset?.unload();\n  }, [asset]);\n\n  if (!asset) return null;\n\n  return <Container asset={asset} />;\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Unloading an asset will remove it globally."})," This will affect other components that are using the same asset."]})}),"\n",(0,t.jsx)(n.h3,{id:"custom-loading-states",children:"Custom Loading States"}),"\n",(0,t.jsx)(n.p,{children:"You can placeholders or custom loaders whilst assets load by checking the loading state of an asset. This gives you granular control."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="loading-spinner.tsx"',children:"import { Entity, Render } from '@playcanvas/react/components';\n\n// A component that displays a model with a custom loading state\nexport function ModelWithCustomLoading() {\n  const { asset: plane, loading: planeLoading } = useModel('plane.glb');\n  const { asset: car, loading: carLoading } = useModel('car.glb');\n    \n  if (planeLoading || carLoading) return <LoadingSpinner />;\n\n  return <>\n    <Render asset={car} />\n    <Render asset={plane} />\n  </>\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"progressive-loading",children:"Progressive Loading"}),"\n",(0,t.jsx)(n.p,{children:"The loading hooks also provide a simple mechanic to progressively load assets, so you can prioritize rendering quickly following up with high quality content later."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="progressive-loading.tsx"',children:"import { Entity, Render } from '@playcanvas/react/components';\n\n// A component that displays a model with a custom loading state\nexport function ProgressiveAsset({ low, high }) {\n  const { asset: low } = useModel(low); // load the low quality asset\n  const { asset: high } = useModel(low && high); // load the high quality asset, when the low quality is loaded\n  \n  // Show a spinner if nothing is visible\n  if (!low && !high ) return <LoadingSpinner />;\n\n  return <Render asset={high || low} />\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"data-fetching-libraries",children:"Data Fetching Libraries"}),"\n",(0,t.jsxs)(n.p,{children:["If you need more advanced caching or loading strategies, you can integrate with libraries like ",(0,t.jsx)(n.strong,{children:"React Query"})," or ",(0,t.jsx)(n.strong,{children:"SWR"})," or any other Promise based library using the ",(0,t.jsx)(n.code,{children:"fetchAsset"})," utility."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:'title="model-with-query.tsx"',children:"import { fetchAsset } from '@playcanvas/react/utils';\nimport { useQuery } from '@tanstack/react-query';\n\nfunction useQueryModel(src: string) {\n  const query = useQuery({\n    queryKey: ['asset', src],\n    // 'container' is the type of asset we're loading (e.g., model, texture, etc.)\n    queryFn: () => fetchAsset({ app, url: src, type: 'container' })\n  });\n\n  return query;\n}\n\nexport function ModelWithQuery() {\n  const { data: asset, isLoading } = useQueryModel('model.glb');\n\n  if (isLoading) return <LoadingSpinner />;\n  return <Container asset={asset} />;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"https://tanstack.com/query/latest",children:"React Query documentation"})," and ",(0,t.jsx)(n.a,{href:"https://swr.vercel.app/",children:"SWR documentation"})," for more information on how to use it."]}),"\n",(0,t.jsx)(n.h3,{id:"suspense-integration",children:"Suspense Integration"}),"\n",(0,t.jsx)(n.p,{children:"React Query and SWR have built-in support for Suspense, which allows you to handle loading states in a more declarative way."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { fetchAsset } from '@playcanvas/react/utils';\nimport { useQuery } from '@tanstack/react-query';\n\nfunction useSuspendedQueryModel(src: string) {\n  const query = useQuery({\n    queryKey: ['asset', src],\n    queryFn: () => fetchAsset({ app, url: src, type: 'container' }),\n    suspense: true\n  });\n\n  return query;\n}\n\nexport function ModelWithQuery() {\n  const { data: asset } = useSuspendedQueryModel('model.glb');\n  return <Container asset={asset} />;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can read more about Suspense in the ",(0,t.jsx)(n.a,{href:"https://react.dev/reference/react/Suspense",children:"React documentation"}),", as well as the ",(0,t.jsx)(n.a,{href:"https://tanstack.com/query/v4/docs/framework/react/guides/suspense",children:"React Query documentation"})," and ",(0,t.jsx)(n.a,{href:"https://swr.vercel.app/docs/suspense",children:"SWR documentation"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);