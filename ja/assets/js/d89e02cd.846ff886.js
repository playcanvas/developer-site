"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[75958],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(96540);const a={},r=s.createContext(a);function l(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},81717:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"user-manual/playcanvas-react/api/hooks/use-app-event","title":"useAppEvent","description":"Subscribe to PlayCanvas application events","source":"@site/docs/user-manual/playcanvas-react/api/hooks/use-app-event.mdx","sourceDirName":"user-manual/playcanvas-react/api/hooks","slug":"/user-manual/playcanvas-react/api/hooks/use-app-event","permalink":"/ja/user-manual/playcanvas-react/api/hooks/use-app-event","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/playcanvas-react/api/hooks/use-app-event.mdx","tags":[],"version":"current","frontMatter":{"description":"Subscribe to PlayCanvas application events"},"sidebar":"userManualSidebar","previous":{"title":"useApp","permalink":"/ja/user-manual/playcanvas-react/api/hooks/use-app"},"next":{"title":"Asset Hooks","permalink":"/ja/user-manual/playcanvas-react/api/hooks/use-asset"}}');var a=t(74848),r=t(28453);const l={description:"Subscribe to PlayCanvas application events"},o="useAppEvent",i={},p=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Built-in Events",id:"built-in-events",level:2},{value:"Update Event",id:"update-event",level:3},{value:"Render Events",id:"render-events",level:3},{value:"Custom Events",id:"custom-events",level:2},{value:"Event Firing",id:"event-firing",level:2},{value:"Input Handling",id:"input-handling",level:2},{value:"Related",id:"related",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"useappevent",children:(0,a.jsx)(n.code,{children:"useAppEvent"})})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"useAppEvent"})," hook allows you to subscribe to PlayCanvas application events with proper TypeScript typing and automatic cleanup. It supports both built-in events and custom events."]}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"copy",children:"import { useAppEvent } from '@playcanvas/react/hooks'\n\nfunction MyComponent() {\n  useAppEvent('update', (dt) => {\n    console.log('Frame time:', dt)\n  })\n  \n  useAppEvent('prerender', () => {\n    console.log('Pre-rendering')\n  })\n  \n  return null\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"event"})," (",(0,a.jsx)(n.code,{children:"TEventName"}),") - The event name to subscribe to"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"TEventMap[TEventName]"}),") - The callback function to execute when the event fires"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"built-in-events",children:"Built-in Events"}),"\n",(0,a.jsx)(n.h3,{id:"update-event",children:"Update Event"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"copy",children:"import { useAppEvent } from '@playcanvas/react/hooks'\n\nfunction UpdateHandler() {\n  useAppEvent('update', (dt) => {\n    // dt is the delta time since the last frame\n    console.log('Delta time:', dt)\n    \n    // Your update logic here\n    // This runs every frame\n  })\n  \n  return null\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"render-events",children:"Render Events"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"copy",children:"import { useAppEvent } from '@playcanvas/react/hooks'\n\nfunction RenderHandler() {\n  useAppEvent('prerender', () => {\n    console.log('About to render frame')\n    // Pre-render logic\n  })\n  \n  useAppEvent('postrender', () => {\n    console.log('Finished rendering frame')\n    // Post-render logic\n  })\n  \n  return null\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"custom-events",children:"Custom Events"}),"\n",(0,a.jsx)(n.p,{children:"You can define custom event types with TypeScript:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"copy",children:"import { useAppEvent } from '@playcanvas/react/hooks'\n\n// Define your custom event map\ninterface MyEventMap {\n  levelComplete: (level: number, score: number) => void\n  playerDeath: (position: [number, number, number]) => void\n  itemCollected: (itemId: string, quantity: number) => void\n}\n\nfunction GameEventHandler() {\n  useAppEvent<MyEventMap>('levelComplete', (level, score) => {\n    console.log(`Level ${level} completed with score ${score}`)\n  })\n  \n  useAppEvent<MyEventMap>('playerDeath', (position) => {\n    console.log('Player died at position:', position)\n  })\n  \n  useAppEvent<MyEventMap>('itemCollected', (itemId, quantity) => {\n    console.log(`Collected ${quantity} of item ${itemId}`)\n  })\n  \n  return null\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"event-firing",children:"Event Firing"}),"\n",(0,a.jsx)(n.p,{children:"To fire custom events, you need access to the app instance:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"copy",children:"import { useAppEvent, useApp } from '@playcanvas/react/hooks'\n\nfunction EventFirer() {\n  const app = useApp()\n  \n  useAppEvent('update', (dt) => {\n    // Fire custom events\n    app.fire('levelComplete', 1, 1000)\n    app.fire('playerDeath', [0, 0, 0])\n    app.fire('itemCollected', 'coin', 1)\n  })\n  \n  return null\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"input-handling",children:"Input Handling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"copy",children:"import { useAppEvent } from '@playcanvas/react/hooks'\n\ninterface InputEvents {\n  keyDown: (key: string) => void\n  keyUp: (key: string) => void\n  mouseClick: (x: number, y: number) => void\n  mouseMove: (x: number, y: number) => void\n}\n\nfunction InputHandler() {\n  useAppEvent<InputEvents>('keyDown', (key) => {\n    console.log('Key pressed:', key)\n  })\n  \n  useAppEvent<InputEvents>('keyUp', (key) => {\n    console.log('Key released:', key)\n  })\n  \n  useAppEvent<InputEvents>('mouseClick', (x, y) => {\n    console.log('Mouse clicked at:', x, y)\n  })\n  \n  useAppEvent<InputEvents>('mouseMove', (x, y) => {\n    console.log('Mouse moved to:', x, y)\n  })\n  \n  return null\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"../use-app",children:"useApp"})," - Access the Application instance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://api.playcanvas.com/engine/classes/Application.html#events",children:"Application Events"})," - PlayCanvas application events documentation"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);