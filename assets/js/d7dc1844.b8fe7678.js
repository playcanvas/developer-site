"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[45312],{11470:(e,t,a)=>{a.d(t,{A:()=>w});var n=a(96540),s=a(34164),i=a(23104),r=a(56347),l=a(205),o=a(57485),c=a(31682),u=a(70679);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return h(e).map((({props:{value:e,label:t,attributes:a,default:n}})=>({value:e,label:t,attributes:a,default:n})))}(a);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p({value:e,tabValues:t}){return t.some((t=>t.value===e))}function f({queryString:e=!1,groupId:t}){const a=(0,r.W6)(),s=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,o.aZ)(s),(0,n.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function m(e){const{defaultValue:t,queryString:a=!1,groupId:s}=e,i=d(e),[r,o]=(0,n.useState)((()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[c,h]=f({queryString:a,groupId:s}),[m,y]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,s]=(0,u.Dv)(t);return[a,(0,n.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:s}),b=(()=>{const e=c??m;return p({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{b&&o(b)}),[b]);return{selectedValue:r,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),y(e)}),[h,y,i]),tabValues:i}}var y=a(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=a(74848);function x({className:e,block:t,selectedValue:a,selectValue:n,tabValues:r}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),c=e=>{const t=e.currentTarget,s=l.indexOf(t),i=r[s].value;i!==a&&(o(t),n(i))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=l.indexOf(e.currentTarget)+1;t=l[a]??l[0];break}case"ArrowLeft":{const a=l.indexOf(e.currentTarget)-1;t=l[a]??l[l.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:r.map((({value:e,label:t,attributes:n})=>(0,v.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{l.push(e)},onKeyDown:u,onClick:c,...n,className:(0,s.A)("tabs__item",b.tabItem,n?.className,{"tabs__item--active":a===e}),children:t??e},e)))})}function g({lazy:e,children:t,selectedValue:a}){const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=i.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function j(e){const t=m(e);return(0,v.jsxs)("div",{className:(0,s.A)("tabs-container",b.tabList),children:[(0,v.jsx)(x,{...t,...e}),(0,v.jsx)(g,{...t,...e})]})}function w(e){const t=(0,y.A)();return(0,v.jsx)(j,{...e,children:h(e.children)},String(t))}},19365:(e,t,a)=>{a.d(t,{A:()=>r});a(96540);var n=a(34164);const s={tabItem:"tabItem_Ymn6"};var i=a(74848);function r({children:e,hidden:t,className:a}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(s.tabItem,a),hidden:t,children:e})}},28453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>l});var n=a(96540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},50725:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"tutorials/music-visualizer","title":"Creating a Music Visualizer","description":"Find out more by forking the full project.","source":"@site/docs/tutorials/music-visualizer.md","sourceDirName":"tutorials","slug":"/tutorials/music-visualizer","permalink":"/tutorials/music-visualizer","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/music-visualizer.md","tags":[{"inline":true,"label":"audio","permalink":"/tags/audio"}],"version":"current","frontMatter":{"title":"Creating a Music Visualizer","tags":["audio"],"thumb":"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/405891/L2JCV3-image-75.jpg"},"sidebar":"tutorialsSidebar","previous":{"title":"Multitouch input","permalink":"/tutorials/multitouch-input"},"next":{"title":"Orange Room","permalink":"/tutorials/orange-room"}}');var s=a(74848),i=a(28453),r=a(11470),l=a(19365);const o={title:"Creating a Music Visualizer",tags:["audio"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/405891/L2JCV3-image-75.jpg"},c=void 0,u={},h=[{value:"The Analyser",id:"the-analyser",level:2},{value:"The Visualizer",id:"the-visualizer",level:2},{value:"More ideas?",id:"more-ideas",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{className:"iframe-container",children:(0,s.jsx)("iframe",{src:"https://playcanv.as/p/BqhCi6oy/",title:"Creating a Music Visualizer",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.em,{children:["Find out more by forking the ",(0,s.jsx)(t.a,{href:"https://playcanvas.com/project/405891",children:"full project"}),"."]})}),"\n",(0,s.jsx)(t.p,{children:"This tutorial teaches you how to create a Music Visualizer application in WebGL using PlayCanvas. We're going to take an audio stream extra frequency data and then render that data into a PlayCanvas canvas."}),"\n",(0,s.jsx)(t.p,{children:"Our music visualizer consists of two scripts. The analyser, plays the audio and extracts the data via an Analyser Node. Which is part of the Web Audio API built into modern browsers. The visualizer, takes the data from the analyser and renders it onto screen as a funky graph."}),"\n",(0,s.jsx)(t.h2,{id:"the-analyser",children:"The Analyser"}),"\n","\n",(0,s.jsxs)(r.A,{defaultValue:"classic",groupId:"script-code",children:[(0,s.jsx)(l.A,{value:"esm",label:"ESM",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'import { Script } from \'playcanvas\';\n\nexport class Analyser extends Script {\n    static scriptName = "analyser";\n\n    /**\n     * @attribute\n     * @title Fftsize\n     * @type {number}\n     */\n    fftsize = null;\n\n    // initialize code called once per entity\n    initialize() {\n        const context = this.app.systems.sound.context;\n\n        // Create analyser node and set up\n        this.analyser = context.createAnalyser();\n        this.analyser.smoothingTimeConstant = 0.6;\n        this.analyser.fftSize = this.fftsize;\n\n        this.freqData = new Float32Array(this.analyser.frequencyBinCount);\n        this.timeData = new Float32Array(this.analyser.fftSize);\n\n        const slot = this.entity.sound.slot("track");\n        slot.setExternalNodes(this.analyser);\n    }\n\n    // update code called every frame\n    update(dt) {\n        this.analyser.getFloatFrequencyData(this.freqData);\n        this.analyser.getFloatTimeDomainData(this.timeData);\n    }\n}\n'})})}),(0,s.jsx)(l.A,{value:"classic",label:"Classic",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"var Analyser = pc.createScript('analyser');\n\nAnalyser.attributes.add('fftsize', {\n    type: 'number'\n});\n\n// initialize code called once per entity\nAnalyser.prototype.initialize = function() {\n    var context = this.app.systems.sound.context;\n\n    // create analyser node and set up\n    this.analyser = context.createAnalyser();\n    this.analyser.smoothingTimeConstant = 0.6;\n    this.analyser.fftSize = this.fftsize;\n\n    this.freqData = new Float32Array(this.fftsize/2);\n    this.timeData = new Float32Array(this.fftsize/2);\n\n    var slot = this.entity.sound.slot(\"track\");\n    slot.setExternalNodes(this.analyser);\n};\n\n// update code called every frame\nAnalyser.prototype.update = function(dt) {\n    this.analyser.getFloatFrequencyData(this.freqData);\n    this.analyser.getFloatTimeDomainData(this.timeData);\n};\n"})})})]}),"\n",(0,s.jsx)(t.p,{children:"Let's take a closer look at the code here."}),"\n",(0,s.jsxs)(t.p,{children:["First we get hold of the ",(0,s.jsx)(t.code,{children:"context"}),". This is the applications instance of an ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en/docs/Web/API/AudioContext",children:(0,s.jsx)(t.code,{children:"AudioContext"})}),". We use this to create a new ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode",children:(0,s.jsx)(t.code,{children:"AnalyserNode"})})," which is part of the Web Audio API the standard across all modern browsers. The ",(0,s.jsx)(t.code,{children:"AnalyserNode"})," let's us access the raw data of the audio every frame as an array of values. It has a couple of properties ",(0,s.jsx)(t.code,{children:"smoothingTimeConstant"})," determines whether the data sampling is smoothed over time. ",(0,s.jsx)(t.code,{children:"0"})," means no smoothing, ",(0,s.jsx)(t.code,{children:"1"})," means super-smooth. And ",(0,s.jsx)(t.code,{children:"fftSize"})," this determines how many samples the analyser node will generate. It must be a power of two, the higher it is the more detailed and the more expensive for your CPU."]}),"\n",(0,s.jsxs)(t.p,{children:["You can access the data from the ",(0,s.jsx)(t.code,{children:"AnalyserNode"})," as integers, in a ",(0,s.jsx)(t.code,{children:"Uint8Array"})," or as floats, in a ",(0,s.jsx)(t.code,{children:"Float32Array"}),". In this demo we use floats, so we allocate two ",(0,s.jsx)(t.code,{children:"Float32Arrays"})," each one needs to be half as big as ",(0,s.jsx)(t.code,{children:"fftSize"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The final part of the setup is to use ",(0,s.jsx)(t.code,{children:"setExternalNodes"})," from the PlayCanvas SoundSlot API to insert this new node into the node chain in the Sound Component."]}),"\n",(0,s.jsxs)(t.p,{children:["Then in our update loop we use the ",(0,s.jsx)(t.code,{children:"AnalyserNode"})," methods ",(0,s.jsx)(t.code,{children:"getFloatFrequencyData"})," and ",(0,s.jsx)(t.code,{children:"getFloatTimeDomainData"})," to fill our arrays with data. We'll be using this data in our Visualizer script."]}),"\n",(0,s.jsx)(t.h2,{id:"the-visualizer",children:"The Visualizer"}),"\n",(0,s.jsxs)(r.A,{defaultValue:"classic",groupId:"script-code",children:[(0,s.jsx)(l.A,{value:"esm",label:"ESM",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"import { Script, Vec3 } from 'playcanvas';\n\nexport class Visualizer extends Script {\n    static scriptName = \"visualizer\";\n\n    /**\n     * @attribute\n     * @title Analyser\n     * @type {Entity}\n     */\n    analyser = null;\n\n    /**\n     * @attribute\n     * @title Freqcolor\n     * @type {Color}\n     */\n    freqcolor = null;\n\n    /**\n     * @attribute\n     * @title Timecolor\n     * @type {Color}\n     */\n    timecolor = null;\n\n    /**\n     * @attribute\n     * @title Height Scale\n     * @type {number}\n     */\n    heightScale = 1;\n\n    // initialize code called once per entity\n    initialize() {\n        this.lines = [];\n        const count = this.analyser.script.analyser.fftsize;\n        for (let i = 0; i < count; i++) {\n            this.lines.push(new Vec3(), new Vec3()); // Push two for each line segment\n        }\n\n        this.xScale = 0.10 * 2048 / count;\n        this.minDb = this.analyser.script.analyser.analyser.minDecibels;\n        this.maxDb = this.analyser.script.analyser.analyser.maxDecibels;\n        this.freqScale = 1 / (this.maxDb - this.minDb);\n        this.freqOffset = this.minDb;\n    }\n\n    // update code called every frame\n    update(dt) {\n        this.renderData(this.analyser.script.analyser.freqData, this.freqcolor, this.freqScale, this.freqOffset);\n        this.renderData(this.analyser.script.analyser.timeData, this.timecolor, 0.5, 0);\n    }\n\n    renderData(data, color, scale, offset) {\n        let lineIndex = 0;\n        for (let i = 0; i < data.length - 1; i++) {\n            if (lineIndex < this.lines.length - 1) {\n                const h1 = scale * (data[i] - offset);\n                const h2 = scale * (data[i + 1] - offset);\n\n                this.lines[lineIndex].set(i * this.xScale, this.heightScale * h1, 0);\n                this.lines[lineIndex + 1].set((i + 1) * this.xScale, this.heightScale * h2, 0);\n\n                lineIndex += 2;\n            }\n        }\n        this.app.renderLines(this.lines, color);\n    }\n}\n"})})}),(0,s.jsx)(l.A,{value:"classic",label:"Classic",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"var Visualizer = pc.createScript('visualizer');\n\nVisualizer.attributes.add('analyser', {\n    type: 'entity'\n});\n\nVisualizer.attributes.add('freqcolor', {\n    type: 'rgba'\n});\n\nVisualizer.attributes.add('timecolor', {\n    type: 'rgba'\n});\n\nVisualizer.attributes.add('heightScale', {\n    type: 'number',\n    default: 1\n});\n\n// initialize code called once per entity\nVisualizer.prototype.initialize = function() {\n    this.lines = [];\n    var count = this.analyser.script.analyser.fftsize;\n    for (var i = 0; i < count; i++) {\n        this.lines.push(new pc.Vec3());\n    }\n\n    this.yScale = 1;\n    this.xScale = 0.10 * 2048 / count;\n\n    this.minDb = this.analyser.script.analyser.analyser.minDecibels;\n    this.maxDb = this.analyser.script.analyser.analyser.maxDecibels;\n    this.freqScale = 1 / (this.maxDb - this.minDb);\n    this.freqOffset = this.minDb;\n};\n\n// update code called every frame\nVisualizer.prototype.update = function(dt) {\n    this.freqScale = 1 / (this.maxDb - this.minDb);\n    this.freqOffset = this.minDb;\n\n    this.renderData(this.analyser.script.analyser.freqData, this.freqcolor, this.freqScale, this.freqOffset);\n    this.renderData(this.analyser.script.analyser.timeData, this.timecolor, 0.5, 0);\n};\n\n\nVisualizer.prototype.renderData = function (data, color, scale, offset) {\n    var line = 0;\n    for (var i = 0; i < data.length; i++) {\n        if (line < this.lines.length) {\n            var h1 = scale * (data[i] - offset);\n            var h2 = scale * (data[i+1] - offset);\n\n            this.lines[line].set(i * this.xScale, this.heightScale*h1, 0);\n            this.lines[line+1].set((i+1) * this.xScale, this.heightScale*h2, 0);\n\n            line += 2;\n        }\n    }\n    this.app.renderLines(this.lines, color);\n};\n"})})})]}),"\n",(0,s.jsxs)(t.p,{children:["The visualizer script takes all the data from the analyser and renders it as line graph using the ",(0,s.jsx)(t.a,{href:"https://api.playcanvas.com/engine/classes/AppBase.html#renderlines",children:(0,s.jsx)(t.code,{children:"this.app.renderLines"})})," API."]}),"\n",(0,s.jsxs)(t.p,{children:["In our setup we are allocating a load of vectors to use in for the lines. We need 2 for every point of data (for the start and end of the lines). Then we are setting up some scale factors to make sure the lines all appear on the screen. The ",(0,s.jsx)(t.code,{children:"AnalyserNode"})," contains a min and max value of decibels that the data can contain. I've found this isn't particular accurate (I definitely got values outside of this range) but it forms a good basis for normalizing the data."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"renderData"})," function loops through all the data and sets one of our pre-allocated vectors to be the start at the current point and finish at the next point."]}),"\n",(0,s.jsx)(t.p,{children:"In our update loop we render the graphs for both the Frequency Data and the Time Domain Data."}),"\n",(0,s.jsx)(t.h2,{id:"more-ideas",children:"More ideas?"}),"\n",(0,s.jsx)(t.p,{children:"This is just a taster of how you can visualize your music. Why not try scaling 3D bars, adjusting colors and brightness in time to the music? Hook up the visualizer to SoundCloud and let users pick tracks? There are loads of possibilities."})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);