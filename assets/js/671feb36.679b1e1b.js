"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[72577],{21524:(n,e,t)=>{t.d(e,{A:()=>i});t(96540);var a=t(74848);function i({id:n,title:e,height:t=500,defaultTab:i="html"}){return(0,a.jsxs)("iframe",{height:t,style:{width:"100%"},title:e,src:`https://codepen.io/playcanvas/embed/${n}?default-tab=${s=i,{html:"html%2Cresult",css:"css%2Cresult",js:"js%2Cresult",result:"result"}[s]||"html%2Cresult"}&theme-id=light&editable=true`,loading:"lazy",allowTransparency:"true",allowFullScreen:"true",children:["See the Pen ",(0,a.jsx)("a",{href:`https://codepen.io/playcanvas/pen/${n}`,children:e})," by PlayCanvas (",(0,a.jsx)("a",{href:"https://codepen.io/playcanvas",children:"@playcanvas"}),") on ",(0,a.jsx)("a",{href:"https://codepen.io",children:"CodePen"}),"."]});var s}},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var a=t(96540);const i={},s=a.createContext(i);function r(n){const e=a.useContext(s);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),a.createElement(s.Provider,{value:e},n.children)}},90155:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"user-manual/gaussian-splatting/building/your-first-app/react","title":"Using PlayCanvas React","description":"Let\'s build a simple Gaussian splat application step by step using PlayCanvas React. We\'ll create a scene with an interactive 3D toy cat splat that you can rotate around.","source":"@site/docs/user-manual/gaussian-splatting/building/your-first-app/react.md","sourceDirName":"user-manual/gaussian-splatting/building/your-first-app","slug":"/user-manual/gaussian-splatting/building/your-first-app/react","permalink":"/user-manual/gaussian-splatting/building/your-first-app/react","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/gaussian-splatting/building/your-first-app/react.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Using PlayCanvas React","sidebar_position":3},"sidebar":"userManualSidebar","previous":{"title":"Using Web Components","permalink":"/user-manual/gaussian-splatting/building/your-first-app/web-components"},"next":{"title":"Using the Editor","permalink":"/user-manual/gaussian-splatting/building/your-first-app/editor"}}');var i=t(74848),s=t(28453),r=t(21524);const o={title:"Using PlayCanvas React",sidebar_position:3},l=void 0,c={},p=[{value:"Starting Point",id:"starting-point",level:2},{value:"Adding a Camera",id:"adding-a-camera",level:2},{value:"Adding the Splat",id:"adding-the-splat",level:2},{value:"Complete Code",id:"complete-code",level:2},{value:"Final Result",id:"final-result",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["Let's build a simple Gaussian splat application step by step using ",(0,i.jsx)(e.a,{href:"/user-manual/playcanvas-react",children:"PlayCanvas React"}),". We'll create a scene with an interactive 3D toy cat splat that you can rotate around."]}),"\n",(0,i.jsx)(e.h2,{id:"starting-point",children:"Starting Point"}),"\n",(0,i.jsx)(e.p,{children:"First, let's set up a basic React component structure. We'll start with the essential PlayCanvas React components:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"import './App.css'\nimport { Application } from '@playcanvas/react'\nimport { FILLMODE_FILL_WINDOW, RESOLUTION_AUTO } from 'playcanvas'\n\nfunction Scene() {\n    return null;\n}\n\nexport default function App() {\n    return (\n        <Application fillMode={FILLMODE_FILL_WINDOW} resolutionMode={RESOLUTION_AUTO}>\n            <Scene />\n        </Application>\n    );\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"This creates an empty 3D scene with optimal settings for web applications. However, we can't see anything rendered yet. We need a camera and some content."}),"\n",(0,i.jsx)(e.admonition,{title:"Performance Optimization",type:"warning",children:(0,i.jsxs)(e.p,{children:["We've configured the ",(0,i.jsx)(e.code,{children:"Application"})," with ",(0,i.jsx)(e.code,{children:"FILLMODE_FILL_WINDOW"})," and ",(0,i.jsx)(e.code,{children:"RESOLUTION_AUTO"})," for optimal splat rendering performance. These settings help reduce the fragment processing load, which is the primary bottleneck in Gaussian splat rendering. Learn more in the ",(0,i.jsx)(e.a,{href:"/user-manual/gaussian-splatting/building/engine-features/performance",children:"Performance"})," guide."]})}),"\n",(0,i.jsx)(e.admonition,{type:"note",children:(0,i.jsxs)(e.p,{children:["PlayCanvas React uses JSX components that map to the underlying PlayCanvas Engine. Make sure you have ",(0,i.jsx)(e.code,{children:"@playcanvas/react"})," installed in your React project."]})}),"\n",(0,i.jsx)(e.h2,{id:"adding-a-camera",children:"Adding a Camera"}),"\n",(0,i.jsxs)(e.p,{children:["To view our scene, we need a camera which we can add using the ",(0,i.jsx)(e.code,{children:"Entity"})," component with ",(0,i.jsx)(e.code,{children:"Camera"})," and ",(0,i.jsx)(e.code,{children:"OrbitControls"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",metastring:"{3-4,8-13}",children:"import './App.css'\nimport { Application, Entity } from '@playcanvas/react'\nimport { Camera } from '@playcanvas/react/components'\nimport { OrbitControls } from '@playcanvas/react/scripts'\nimport { FILLMODE_FILL_WINDOW, RESOLUTION_AUTO } from 'playcanvas'\n\nfunction Scene() {\n    return (\n        <Entity position={[0, 0, -2.5]}>\n            <Camera />\n            <OrbitControls />\n        </Entity>\n    );\n}\n\nexport default function App() {\n    return (\n        <Application fillMode={FILLMODE_FILL_WINDOW} resolutionMode={RESOLUTION_AUTO}>\n            <Scene />\n        </Application>\n    );\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["We've positioned the camera 2.5 units down the negative Z axis. By default, a camera looks down the negative Z axis, so our camera is now looking toward the origin where we'll place our splat. The ",(0,i.jsx)(e.code,{children:"OrbitControls"})," will allow you to:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Left mouse drag"}),": Orbit around the target"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Right mouse drag"}),": Pan the camera"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Mouse wheel"}),": Zoom in and out"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"adding-the-splat",children:"Adding the Splat"}),"\n",(0,i.jsxs)(e.p,{children:["Now let's add our toy cat splat to the scene using the ",(0,i.jsx)(e.code,{children:"useSplat"})," hook and ",(0,i.jsx)(e.code,{children:"GSplat"})," component:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",metastring:"{3,5,9-11,15-17}",children:"import './App.css'\nimport { Application, Entity } from '@playcanvas/react'\nimport { Camera, GSplat } from '@playcanvas/react/components'\nimport { OrbitControls } from '@playcanvas/react/scripts'\nimport { useSplat } from '@playcanvas/react/hooks'\nimport { FILLMODE_FILL_WINDOW, RESOLUTION_AUTO } from 'playcanvas'\n\nfunction Scene() {\n    const { asset } = useSplat('toy-cat.compressed.ply');\n\n    if (!asset) return null;\n\n    return (\n        <>\n            <Entity position={[0, -0.7, 0]} rotation={[0, 0, 180]}>\n                <GSplat asset={asset} />\n            </Entity>\n            <Entity position={[0, 0, -2.5]}>\n                <Camera />\n                <OrbitControls />\n            </Entity>\n        </>\n    );\n}\n\nexport default function App() {\n    return (\n        <Application fillMode={FILLMODE_FILL_WINDOW} resolutionMode={RESOLUTION_AUTO}>\n            <Scene />\n        </Application>\n    );\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"We've added several important elements:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsxs)(e.strong,{children:[(0,i.jsx)(e.code,{children:"useSplat"})," hook"]}),": Loads the splat asset from the URL"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Conditional rendering"}),": ",(0,i.jsx)(e.code,{children:"if (!asset) return null;"})," ensures we don't render until the asset is loaded"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"GSplat positioning"}),": The splat is positioned slightly below the origin (-0.7 on the Y axis) and rotated 180 degrees around the Z axis to orient it properly"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"React Fragment"}),": We use ",(0,i.jsx)(e.code,{children:"<>...</>"})," to return multiple entities without a wrapper"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"complete-code",children:"Complete Code"}),"\n",(0,i.jsx)(e.p,{children:"Here's the complete React component with all the code from the steps above:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"import './App.css'\nimport { Application, Entity } from '@playcanvas/react'\nimport { Camera, GSplat } from '@playcanvas/react/components'\nimport { OrbitControls } from '@playcanvas/react/scripts'\nimport { useSplat } from '@playcanvas/react/hooks'\nimport { FILLMODE_FILL_WINDOW, RESOLUTION_AUTO } from 'playcanvas'\n\nfunction Scene() {\n    const { asset } = useSplat('toy-cat.compressed.ply');\n\n    if (!asset) return null;\n\n    return (\n        <>\n            <Entity position={[0, -0.7, 0]} rotation={[0, 0, 180]}>\n                <GSplat asset={asset} />\n            </Entity>\n            <Entity position={[0, 0, -2.5]}>\n                <Camera />\n                <OrbitControls />\n            </Entity>\n        </>\n    );\n}\n\nexport default function App() {\n    return (\n        <Application fillMode={FILLMODE_FILL_WINDOW} resolutionMode={RESOLUTION_AUTO}>\n            <Scene />\n        </Application>\n    );\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"final-result",children:"Final Result"}),"\n",(0,i.jsx)(e.p,{children:"After completing the steps above, you should see an interactive 3D toy cat splat that you can orbit around, pan, and zoom!"}),"\n","\n",(0,i.jsx)(r.A,{id:"MYgGZax",title:"<pc-splat> example"}),"\n",(0,i.jsx)(e.admonition,{title:"Try it yourself",type:"tip",children:(0,i.jsx)(e.p,{children:"Add the complete JSX code above to your React component and run your application to see your first splat app in action! Then extend it in any way you like using the full power of PlayCanvas React!"})})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);