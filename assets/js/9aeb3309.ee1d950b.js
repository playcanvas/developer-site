"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[99095],{577:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"tutorials/ui-elements-progress","title":"User Interface - Progress Bar","description":"A progress bar using Element components. See the full scene.","source":"@site/docs/tutorials/ui-elements-progress.md","sourceDirName":"tutorials","slug":"/tutorials/ui-elements-progress","permalink":"/tutorials/ui-elements-progress","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/ui-elements-progress.md","tags":[{"inline":true,"label":"ui","permalink":"/tags/ui"}],"version":"current","frontMatter":{"title":"User Interface - Progress Bar","tags":["ui"],"thumb":"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/501979/49D69A-image-75.jpg"},"sidebar":"tutorialsSidebar","previous":{"title":"User Interface - Leaderboard","permalink":"/tutorials/ui-elements-leaderboard"},"next":{"title":"User Interface - Stats Counter","permalink":"/tutorials/ui-elements-stats-counter"}}');var n=r(74848),a=r(28453),i=r(11470),o=r(19365);const l={title:"User Interface - Progress Bar",tags:["ui"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/501979/49D69A-image-75.jpg"},c=void 0,h={},u=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Screen setup",id:"screen-setup",level:2},{value:"Progress Bar setup",id:"progress-bar-setup",level:2},{value:"Script",id:"script",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("div",{className:"iframe-container",children:(0,n.jsx)("iframe",{src:"https://playcanv.as/p/FlebHmLs/",title:"User Interface - Progress Bar",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.em,{children:["A progress bar using Element components. See the ",(0,n.jsx)(t.a,{href:"https://playcanvas.com/editor/scene/547906",children:"full scene"}),"."]})}),"\n",(0,n.jsxs)(t.p,{children:["We can easily create progress bars using the built-in ",(0,n.jsx)(t.a,{href:"/user-manual/user-interface/elements/",children:"Elements"}),". In this tutorial we have a progress bar that loops from empty to full every few seconds."]}),"\n",(0,n.jsx)(t.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,n.jsx)(t.p,{children:"This is what our UI looks like in the Hierarchy:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Hierarchy",src:r(86564).A+"",width:"259",height:"126"})}),"\n",(0,n.jsx)(t.h2,{id:"screen-setup",children:"Screen setup"}),"\n",(0,n.jsxs)(t.p,{children:["Our ",(0,n.jsx)(t.a,{href:"/user-manual/user-interface/screens/",children:"screen"})," is set up like so:"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Screen",src:r(2529).A+"",width:"317",height:"180"})}),"\n",(0,n.jsx)(t.p,{children:"Since it's a 2D screen we have ticked Screen Space. Our Reference Resolution is the resolution that we are targeting - in this case it's 1080 x 1920. We choose Blend for Scale Mode so that our Screen adapts to resolution changes and we set Scale Blend to 1 so that the Screen will adapt only to height changes."}),"\n",(0,n.jsxs)(t.p,{children:["The screen has a child Text Element to show the POWER text and an Entity called ",(0,n.jsx)(t.code,{children:"Progress Bar"})," which show our progress bar."]}),"\n",(0,n.jsx)(t.h2,{id:"progress-bar-setup",children:"Progress Bar setup"}),"\n",(0,n.jsx)(t.p,{children:"The progress bar is made of 2 Elements. The background image and the fill image."}),"\n",(0,n.jsxs)(t.p,{children:["The background image is the ",(0,n.jsx)(t.code,{children:"Progress Bar"})," entity in our example. It has an Image Element and it shows the background image of the progress bar:"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Background Image",src:r(93370).A+"",width:"319",height:"819"})}),"\n",(0,n.jsxs)(t.p,{children:["The fill image is the ",(0,n.jsx)(t.code,{children:"Fill Image"})," entity in our example. It is a child of the ",(0,n.jsx)(t.code,{children:"Progress Bar"})," entity and it has an Image Element to show the fill of the progress bar. This image is anchored to the left of its parent background image. That allows us to change the width of the element in order to make the progress bar grow."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Fill Image",src:r(41680).A+"",width:"313",height:"687"})}),"\n",(0,n.jsx)(t.h2,{id:"script",children:"Script"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"Progress Bar"})," entity has a script to control how the progress bar is resized:"]}),"\n","\n",(0,n.jsxs)(i.A,{defaultValue:"classic",groupId:"script-code",children:[(0,n.jsx)(o.A,{value:"esm",label:"ESM",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"import { Script, math, Entity } from 'playcanvas';\n\nexport class ProgressBar extends Script {\n    static scriptName = \"progressBar\";\n\n   /**\n     * @attribute\n     * @title Progress Image\n     * @type {Entity}\n     */\n    progressImage = null;\n\n    /**\n     * @attribute\n     * @title Progress Image Max Width\n     * @type {number}\n     */\n    progressImageMaxWidth = null;\n\n    initialize() {\n        // use our own rect object to set the size of\n        // the progress bar\n        this.imageRect = this.progressImage.element.rect.clone();\n\n        // initialize progress to 0\n        this.setProgress(0);\n        // if true the progress bar will increase\n        // otherwise it will decrease in update\n        this.increase = true;\n    }\n\n    setProgress(value) {\n        // clamp value between 0 and 1\n        value = math.clamp(value, 0, 1);\n\n        this.progress = value;\n\n        // find the desired width of our progress fill image\n        var width = math.lerp(0, this.progressImageMaxWidth, value);\n        // set the width of the fill image element\n        this.progressImage.element.width = width;\n\n        // Set the width of the element's rect (rect.z) to be the same\n        // value as our 0-1 progress.\n        // This is so that the fill image will only show the portion\n        // of the texture that is visible\n        this.imageRect.copy(this.progressImage.element.rect);\n        this.imageRect.z = value;\n        // force rect update\n        this.progressImage.element.rect = this.progressImage.element.rect;\n    }\n\n    // Increase or decrease the progress automatically\n    update(dt) {\n        const diff = this.increase ? dt : -dt;\n        this.setProgress(this.progress + diff);\n\n        if (this.progress >= 1)\n            this.increase = false;\n        else if (this.progress <= 0)\n            this.increase = true;\n    }\n}\n"})})}),(0,n.jsx)(o.A,{value:"classic",label:"Classic",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:"var ProgressBar = pc.createScript('progressBar');\n\n// The entity that shows the fill image\nProgressBar.attributes.add('progressImage', {type: 'entity'});\n// The maximum width of the fill image\nProgressBar.attributes.add('progressImageMaxWidth', {type: 'number'});\n\nProgressBar.prototype.initialize = function() {\n    // use our own rect object to set the size of\n    // the progress bar\n    this.imageRect = this.progressImage.element.rect.clone();\n\n    // initialize progress to 0\n    this.setProgress(0);\n    // if true the progress bar will increase\n    // otherwise it will decrease in update\n    this.increase = true;\n};\n\n// Set progress - value is between 0 and 1\nProgressBar.prototype.setProgress = function (value) {\n    // clamp value between 0 and 1\n    value = pc.math.clamp(value, 0, 1);\n\n    this.progress = value;\n\n    // find the desired width of our progress fill image\n    var width = pc.math.lerp(0, this.progressImageMaxWidth, value);\n    // set the width of the fill image element\n    this.progressImage.element.width = width;\n\n    // Set the width of the element's rect (rect.z) to be the same\n    // value as our 0-1 progress.\n    // This is so that the fill image will only show the portion\n    // of the texture that is visible\n    this.imageRect.copy(this.progressImage.element.rect);\n    this.imageRect.z = value;\n    // force rect update\n    this.progressImage.element.rect = this.progressImage.element.rect;\n};\n\n// Increase or decrease the progress automatically\nProgressBar.prototype.update = function(dt) {\n    var diff = this.increase ? dt : -dt;\n    this.setProgress(this.progress + diff);\n\n    if (this.progress >= 1)\n        this.increase = false;\n    else if (this.progress <= 0)\n        this.increase = true;\n};\n"})})})]}),"\n",(0,n.jsxs)(t.p,{children:["The script has 2 attributes - the Entity that shows the fill image and the max width of that image. It has a ",(0,n.jsx)(t.code,{children:"setProgress"})," function which sets the progress to a value between 0 and 1."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"update"})," method essentially loops progress between 0 and 1. The important thing to note in this script is how we need to change the ",(0,n.jsx)(t.code,{children:"width"})," and the ",(0,n.jsx)(t.code,{children:"rect"})," of the fill image in order to properly resize our progress bar."]}),"\n",(0,n.jsxs)(t.p,{children:["Changing the ",(0,n.jsx)(t.code,{children:"width"})," makes the fill image larger and changing the ",(0,n.jsx)(t.code,{children:"rect"})," makes sure that we only show the portion of the texture that is visible, so that we avoid stretching the visible texture. ",(0,n.jsx)(t.a,{href:"https://api.playcanvas.com/engine/classes/ElementComponent.html#rect",children:"Here"})," is the API reference for ",(0,n.jsx)(t.code,{children:"rect"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},2529:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/screen-476f6627ed7b4d931345e08a47f13204.png"},11470:(e,t,r)=>{r.d(t,{A:()=>y});var s=r(96540),n=r(34164),a=r(23104),i=r(56347),o=r(205),l=r(57485),c=r(31682),h=r(70679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function d(e){const{values:t,children:r}=e;return(0,s.useMemo)(()=>{const e=t??function(e){return u(e).map(({props:{value:e,label:t,attributes:r,default:s}})=>({value:e,label:t,attributes:r,default:s}))}(r);return function(e){const t=(0,c.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,r])}function p({value:e,tabValues:t}){return t.some(t=>t.value===e)}function g({queryString:e=!1,groupId:t}){const r=(0,i.W6)(),n=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l.aZ)(n),(0,s.useCallback)(e=>{if(!n)return;const t=new URLSearchParams(r.location.search);t.set(n,e),r.replace({...r.location,search:t.toString()})},[n,r])]}function m(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,a=d(e),[i,l]=(0,s.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=t.find(e=>e.default)??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a})),[c,u]=g({queryString:r,groupId:n}),[m,f]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,n]=(0,h.Dv)(t);return[r,(0,s.useCallback)(e=>{t&&n.set(e)},[t,n])]}({groupId:n}),b=(()=>{const e=c??m;return p({value:e,tabValues:a})?e:null})();(0,o.A)(()=>{b&&l(b)},[b]);return{selectedValue:i,selectValue:(0,s.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)},[u,f,a]),tabValues:a}}var f=r(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=r(74848);function x({className:e,block:t,selectedValue:r,selectValue:s,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),c=e=>{const t=e.currentTarget,n=o.indexOf(t),a=i[n].value;a!==r&&(l(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;t=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;t=o[r]??o[o.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.A)("tabs",{"tabs--block":t},e),children:i.map(({value:e,label:t,attributes:s})=>(0,v.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{o.push(e)},onKeyDown:h,onClick:c,...s,className:(0,n.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":r===e}),children:t??e},e))})}function w({lazy:e,children:t,selectedValue:r}){const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===r);return e?(0,s.cloneElement)(e,{className:(0,n.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:a.map((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==r}))})}function j(e){const t=m(e);return(0,v.jsxs)("div",{className:(0,n.A)("tabs-container",b.tabList),children:[(0,v.jsx)(x,{...t,...e}),(0,v.jsx)(w,{...t,...e})]})}function y(e){const t=(0,f.A)();return(0,v.jsx)(j,{...e,children:u(e.children)},String(t))}},19365:(e,t,r)=>{r.d(t,{A:()=>i});r(96540);var s=r(34164);const n={tabItem:"tabItem_Ymn6"};var a=r(74848);function i({children:e,hidden:t,className:r}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(n.tabItem,r),hidden:t,children:e})}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var s=r(96540);const n={},a=s.createContext(n);function i(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(a.Provider,{value:t},e.children)}},41680:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/progress-bar-fill-fa971f631338e72f94a93f2cff4b4c93.png"},86564:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/hierarchy-90e08c19d6e71ee1db5be51f6fe566de.png"},93370:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/progress-bar-bg-2e834a4a6a189e936b95415aa61461e6.png"}}]);