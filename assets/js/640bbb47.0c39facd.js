"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[87252],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var o=t(96540);const s={},a=o.createContext(s);function l(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(a.Provider,{value:n},e.children)}},58893:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"user-manual/playcanvas-react/api/collision","title":"<Collision/>","description":"Documentation for the Collision component","source":"@site/docs/user-manual/playcanvas-react/api/collision.mdx","sourceDirName":"user-manual/playcanvas-react/api","slug":"/user-manual/playcanvas-react/api/collision","permalink":"/user-manual/playcanvas-react/api/collision","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/playcanvas-react/api/collision.mdx","tags":[],"version":"current","frontMatter":{"description":"Documentation for the Collision component"},"sidebar":"userManualSidebar","previous":{"title":"<Camera/>","permalink":"/user-manual/playcanvas-react/api/camera"},"next":{"title":"<Environment/>","permalink":"/user-manual/playcanvas-react/api/environment"}}');var s=t(74848),a=t(28453);const l={description:"Documentation for the Collision component"},i="<Collision/>",r={},c=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components},{RenderApiDocs:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RenderApiDocs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"collision",children:(0,s.jsx)(n.code,{children:"<Collision/>"})})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"<Collision/>"})," component attaches a PlayCanvas ",(0,s.jsx)(n.a,{href:"https://api.playcanvas.com/engine/classes/CollisionComponent.html",children:"Collision Component"})," to an ",(0,s.jsx)(n.a,{href:"../entity",children:"Entity"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"It allows an Entity to participate in collision detection with other entities that have collision components. This is useful for physics simulations, trigger zones, and other gameplay mechanics that require detecting when objects intersect."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Enable physics by installing ",(0,s.jsx)(n.code,{children:"sync-ammo"})," and enabling physics on the Application using ",(0,s.jsx)(n.code,{children:"<Application usePhysics/>"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["You attach a Collision component to an Entity in the same way you would attach a Render component. To work with physics, you should also attach a ",(0,s.jsx)(n.code,{children:"Rigidbody"})," component to the same ",(0,s.jsx)(n.code,{children:"Entity"}),", and probably a ",(0,s.jsx)(n.code,{children:"Render"})," component too."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:"copy",children:'import { Application, Entity } from \'@playcanvas/react\'\nimport { Collision, Rigidbody, Render } from \'@playcanvas/react/components\'\n\nexport default function Scene() {\n  return (\n    <Application usePhysics>\n      <Entity>\n        <Collision type="box" />\n        <Rigidbody type="dynamic" mass={12} />\n        <Render type="box" />\n      </Entity>\n    </Application>\n  )\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Learn more about ",(0,s.jsx)(n.a,{href:"https://api.playcanvas.com/engine/classes/CollisionComponent.html",children:"Collision Components"})," in the PlayCanvas documentation. Also see the ",(0,s.jsx)(n.a,{href:"/user-manual/playcanvas-react/api/rigidbody",children:"Rigidbody"})," component for more information on how to use collision components with physics."]}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t,{data:'[{"name":"default","description":"","entries":[{"name":"type","description":"Sets the type of the collision volume. Can be:\\n\\n- \\"box\\": A box-shaped collision volume.\\n- \\"capsule\\": A capsule-shaped collision volume.\\n- \\"compound\\": A compound shape. Any descendant entities with a collision component of type\\nbox, capsule, cone, cylinder or sphere will be combined into a single, rigid shape.\\n- \\"cone\\": A cone-shaped collision volume.\\n- \\"cylinder\\": A cylinder-shaped collision volume.\\n- \\"mesh\\": A collision volume that uses a model asset as its shape.\\n- \\"sphere\\": A sphere-shaped collision volume.\\n\\nDefaults to \\"box\\".\\nGets the type of the collision volume.","optional":true,"type":{"displayName":"\\"box\\" | \\"capsule\\" | \\"compound\\" | \\"cone\\" | \\"cylinder\\" | \\"mesh\\" | \\"sphere\\"","types":[{"name":"\\"box\\"","url":null},{"name":"\\"capsule\\"","url":null},{"name":"\\"compound\\"","url":null},{"name":"\\"cone\\"","url":null},{"name":"\\"cylinder\\"","url":null},{"name":"\\"mesh\\"","url":null},{"name":"\\"sphere\\"","url":null}]}},{"name":"halfExtents","description":"Sets the half-extents of the box-shaped collision volume in the x, y and z axes. Defaults to\\n`[0.5, 0.5, 0.5]`.\\nGets the half-extents of the box-shaped collision volume in the x, y and z axes.","optional":true,"type":{"displayName":"[number, number, number]","types":[{"name":"[number, number, number]","url":null}]}},{"name":"linearOffset","description":"Sets the positional offset of the collision shape from the Entity position along the local\\naxes. Defaults to `[0, 0, 0]`.\\nGets the positional offset of the collision shape from the Entity position along the local\\naxes.","optional":true,"type":{"displayName":"[number, number, number]","types":[{"name":"[number, number, number]","url":null}]}},{"name":"angularOffset","description":"Sets the rotational offset of the collision shape from the Entity rotation in local space.\\nDefaults to identity.\\nGets the rotational offset of the collision shape from the Entity rotation in local space.","optional":true,"type":{"displayName":"[number, number, number, number]","types":[{"name":"[number, number, number, number]","url":null}]}},{"name":"radius","description":"Sets the radius of the sphere, capsule, cylinder or cone-shaped collision volumes.\\nDefaults to 0.5.\\nGets the radius of the sphere, capsule, cylinder or cone-shaped collision volumes.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"axis","description":"Sets the local space axis with which the capsule, cylinder or cone-shaped collision volume\'s\\nlength is aligned. 0 for X, 1 for Y and 2 for Z. Defaults to 1 (Y-axis).\\nGets the local space axis with which the capsule, cylinder or cone-shaped collision volume\'s\\nlength is aligned.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"height","description":"Sets the total height of the capsule, cylinder or cone-shaped collision volume from tip to\\ntip. Defaults to 2.\\nGets the total height of the capsule, cylinder or cone-shaped collision volume from tip to\\ntip.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"asset","description":"Sets the asset or asset id for the model of the mesh collision volume. Defaults to null.\\nGets the asset or asset id for the model of the mesh collision volume.","optional":true,"type":{"displayName":"number | Asset | null","types":[{"name":"number","url":null},{"name":"Asset","url":"https://api.playcanvas.com/engine/classes/Asset.html"}]}},{"name":"renderAsset","description":"Sets the render asset or asset id of the mesh collision volume. Defaults to null.\\nIf not set then the asset property will be checked instead.\\nGets the render asset id of the mesh collision volume.","optional":true,"type":{"displayName":"number | Asset | null","types":[{"name":"number","url":null},{"name":"Asset","url":"https://api.playcanvas.com/engine/classes/Asset.html"}]}},{"name":"convexHull","description":"Sets whether the collision mesh should be treated as a convex hull. When false, the mesh can\\nonly be used with a static body. When true, the mesh can be used with a static, dynamic or\\nkinematic body. Defaults to `false`.\\nGets whether the collision mesh should be treated as a convex hull.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"shape","description":"","optional":true,"type":{"displayName":"any","types":[{"name":"any","url":null}]}},{"name":"model","description":"Sets the model that is added to the scene graph for the mesh collision volume.\\nGets the model that is added to the scene graph for the mesh collision volume.","optional":true,"type":{"displayName":"Model | null","types":[{"name":"Model","url":"https://api.playcanvas.com/engine/classes/Model.html"}]}},{"name":"render","description":"","optional":true,"type":{"displayName":"any","types":[{"name":"any","url":null}]}},{"name":"checkVertexDuplicates","description":"Sets whether checking for duplicate vertices should be enabled when creating collision meshes.\\nGets whether checking for duplicate vertices should be enabled when creating collision meshes.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"system","description":"The ComponentSystem used to create this Component.","optional":true,"type":{"displayName":"ComponentSystem","types":[{"name":"ComponentSystem","url":"https://api.playcanvas.com/engine/classes/ComponentSystem.html"}]}},{"name":"entity","description":"The Entity that this Component is attached to.","optional":true,"type":{"displayName":"Entity","types":[{"name":"Entity","url":"https://api.playcanvas.com/engine/classes/Entity.html"}]}},{"name":"enabled","description":"Sets the enabled state of the component.\\nGets the enabled state of the component.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}}]}]'})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);