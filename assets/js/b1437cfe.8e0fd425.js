"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[35994],{11470:(e,t,n)=>{n.d(t,{A:()=>E});var a=n(96540),i=n(34164),s=n(17559),r=n(23104),c=n(56347),l=n(205),o=n(57485),p=n(31682),h=n(70679);function u(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)(()=>{const e=t??function(e){return u(e).map(({props:{value:e,label:t,attributes:n,default:a}})=>({value:e,label:t,attributes:n,default:a}))}(n);return function(e){const t=(0,p.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function m({value:e,tabValues:t}){return t.some(t=>t.value===e)}function f({queryString:e=!1,groupId:t}){const n=(0,c.W6)(),i=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,o.aZ)(i),(0,a.useCallback)(e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})},[i,n])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,s=d(e),[r,c]=(0,a.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s})),[o,p]=f({queryString:n,groupId:i}),[u,y]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,i]=(0,h.Dv)(t);return[n,(0,a.useCallback)(e=>{t&&i.set(e)},[t,i])]}({groupId:i}),v=(()=>{const e=o??u;return m({value:e,tabValues:s})?e:null})();(0,l.A)(()=>{v&&c(v)},[v]);return{selectedValue:r,selectValue:(0,a.useCallback)(e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);c(e),p(e),y(e)},[p,y,s]),tabValues:s}}var v=n(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(74848);function k({className:e,block:t,selectedValue:n,selectValue:a,tabValues:s}){const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),o=e=>{const t=e.currentTarget,i=c.indexOf(t),r=s[i].value;r!==n&&(l(t),a(r))},p=e=>{let t=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},e),children:s.map(({value:e,label:t,attributes:a})=>(0,g.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{c.push(e)},onKeyDown:p,onClick:o,...a,className:(0,i.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function x({lazy:e,children:t,selectedValue:n}){const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===n);return e?(0,a.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:s.map((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function j(e){const t=y(e);return(0,g.jsxs)("div",{className:(0,i.A)(s.G.tabs.container,"tabs-container",b.tabList),children:[(0,g.jsx)(k,{...t,...e}),(0,g.jsx)(x,{...t,...e})]})}function E(e){const t=(0,v.A)();return(0,g.jsx)(j,{...e,children:u(e.children)},String(t))}},19365:(e,t,n)=>{n.d(t,{A:()=>r});n(96540);var a=n(34164);const i={tabItem:"tabItem_Ymn6"};var s=n(74848);function r({children:e,hidden:t,className:n}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,n),hidden:t,children:e})}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var a=n(96540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},94707:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"tutorials/entity-picking","title":"Entity Picking","description":"Collision Picking - click to select a shape","source":"@site/docs/tutorials/entity-picking.md","sourceDirName":"tutorials","slug":"/tutorials/entity-picking","permalink":"/tutorials/entity-picking","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/entity-picking.md","tags":[{"inline":true,"label":"raycast","permalink":"/tags/raycast"},{"inline":true,"label":"basics","permalink":"/tags/basics"},{"inline":true,"label":"physics","permalink":"/tags/physics"}],"version":"current","frontMatter":{"title":"Entity Picking","tags":["raycast","basics","physics"],"thumb":"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/405856/DS51PO-image-75.jpg"},"sidebar":"tutorialsSidebar","previous":{"title":"Entity picking without physics","permalink":"/tutorials/entity-picking-without-physics"},"next":{"title":"Explosion Particle Effect","permalink":"/tutorials/explosion-particle-effect"}}');var i=n(74848),s=n(28453),r=n(11470),c=n(19365);const l={title:"Entity Picking",tags:["raycast","basics","physics"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/405856/DS51PO-image-75.jpg"},o=void 0,p={},h=[{value:"Collision Picking",id:"collision-picking",level:2},{value:"Frame Buffer Picking",id:"frame-buffer-picking",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Collision Picking - click to select a shape"}),"\n",(0,i.jsx)("div",{className:"iframe-container",children:(0,i.jsx)("iframe",{src:"https://playcanv.as/b/Ps1tTzWn/",title:"Collision Picking",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:"Frame Buffer Picking - click to select a grey shape. The red shapes are set to be not pickable."}),"\n",(0,i.jsx)("div",{className:"iframe-container",children:(0,i.jsx)("iframe",{src:"https://playcanv.as/b/ZQVQqgGU/",title:"Frame Buffer Picking",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.p,{children:["Try it from the Editor in the ",(0,i.jsx)(t.a,{href:"https://playcanvas.com/project/405856",children:"tutorial project."})]}),"\n",(0,i.jsx)(t.p,{children:"This tutorial describes to methods of selecting an Entity from the 3D scene, for example, on the click of the mouse."}),"\n",(0,i.jsx)(t.h2,{id:"collision-picking",children:"Collision Picking"}),"\n",(0,i.jsxs)(t.p,{children:["Collision based picking uses the collision components to add a shape to each Entity that needs to be picked. Then we use the ",(0,i.jsx)(t.a,{href:"https://api.playcanvas.com/engine/classes/RigidBodyComponentSystem.html#raycastfirst",children:"raycastFirst()"}),' method in the rigidbody system to fire a ray from the mouse click position into the screen to see if it hits a collision component. If it does, that Entity is "selected".']}),"\n","\n",(0,i.jsxs)(r.A,{defaultValue:"classic",groupId:"script-code",children:[(0,i.jsx)(c.A,{value:"esm",label:"ESM",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"import { Script, EVENT_MOUSEDOWN } from 'playcanvas';\n\nexport class PickerRaycast extends Script {\n    static scriptName = \"pickerRayCast\";\n\n    // initialize code called once per entity\n    initialize() {\n        this.app.mouse.on(EVENT_MOUSEDOWN, this.onSelect, this);\n\n        this.on('destroy', () => {\n            this.app.mouse.off(EVENT_MOUSEDOWN, this.onSelect, this);\n        });\n    }\n\n    onSelect (e) {\n        const from = this.entity.camera.screenToWorld(e.x, e.y, this.entity.camera.nearClip);\n        const to = this.entity.camera.screenToWorld(e.x, e.y, this.entity.camera.farClip);\n\n        const result = this.app.systems.rigidbody.raycastFirst(from, to);\n        if (result) {\n            var pickedEntity = result.entity;\n            pickedEntity.script.pulse.pulse();\n        }\n    }\n}\n"})})}),(0,i.jsx)(c.A,{value:"classic",label:"Classic",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"var PickerRaycast = pc.createScript('pickerRaycast');\n\n// initialize code called once per entity\nPickerRaycast.prototype.initialize = function() {\n    this.app.mouse.on(pc.EVENT_MOUSEDOWN, this.onSelect, this);\n\n    this.on('destroy', function() {\n        this.app.mouse.off(pc.EVENT_MOUSEDOWN, this.onSelect, this);\n    }, this);\n};\n\nPickerRaycast.prototype.onSelect = function (e) {\n    var from = this.entity.camera.screenToWorld(e.x, e.y, this.entity.camera.nearClip);\n    var to = this.entity.camera.screenToWorld(e.x, e.y, this.entity.camera.farClip);\n\n    var result = this.app.systems.rigidbody.raycastFirst(from, to);\n    if (result) {\n        var pickedEntity = result.entity;\n        pickedEntity.script.pulse.pulse();\n    }\n};\n"})})})]}),"\n",(0,i.jsx)(t.h2,{id:"frame-buffer-picking",children:"Frame Buffer Picking"}),"\n",(0,i.jsxs)(t.p,{children:["Frame buffer based picking uses the ",(0,i.jsx)(t.a,{href:"https://api.playcanvas.com/engine/classes/Picker.html",children:"pc.Picker"})," class to render the scene to a internal buffer. When the mouse is clicked the color of the buffer at the mouse location is used to determine which mesh instance was selected. This has some advantages and disadvantages over the collision based method."]}),"\n",(0,i.jsx)(t.p,{children:"Advantages include:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Able to use a rectangle to pick many items in a scene at once"}),"\n",(0,i.jsx)(t.li,{children:"Doesn't require the physics library to be included which reduces preload time."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["The main disadvantage is that this uses the ",(0,i.jsx)(t.code,{children:"readPixels"})," method which stalls the graphics pipeline. This can have serious rendering performance implications particularly on mobile and GPU heavy applications."]}),"\n",(0,i.jsxs)(t.p,{children:["You are able modify the size of the buffer to be smaller to improve the performance at the cost of accuracy. In the example script below, the attribute ",(0,i.jsx)(t.code,{children:"pickAreaScale"})," is used to do this where the lower the number, the faster and less accurate the picker becomes."]}),"\n",(0,i.jsxs)(t.p,{children:["It's also possible to restrict the layers to pick which the script supports via ",(0,i.jsx)(t.code,{children:"layerNames"})," array. We can add the names of the layers that we want to pick from and also improves performance by rendering only what we need to the internal buffer."]}),"\n",(0,i.jsxs)(r.A,{defaultValue:"classic",groupId:"script-code",children:[(0,i.jsx)(c.A,{value:"esm",label:"ESM",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"import { Script, Picker, Vec3, Entity, EVENT_MOUSEDOWN } from 'playcanvas';\n\nexport class PickerFramebuffer extends Script {\n    static scriptName = \"pickerFrameBuffer\";\n\n    /**\n     * 1 is more accurate but worse performance. 0.01 is best performance but least accurate. 0.25 is the default.\n     * \n     * @attribute\n     * @title Pick Area Scale\n     * @type {number}\n     * @range [0.01, 1]\n     */\n    pickAreaScale = 0.25;\n\n    /**\n     * Layer names from which objects will be picked from.\n     * \n     * @attribute\n     * @title Layers Names\n     * @type {string[]}\n     */\n    layerNames = ['World'];\n\n    initialize() {\n        // Create a frame buffer picker with a scaled resolution\n        const canvas = this.app.graphicsDevice.canvas;\n        const canvasWidth = parseInt(canvas.clientWidth, 10);\n        const canvasHeight = parseInt(canvas.clientHeight, 10);\n\n        this.picker = new Picker(this.app, canvasWidth * this.pickAreaScale, canvasHeight * this.pickAreaScale);\n        this.layers = [];\n        for (let i = 0; i < this.layerNames.length; ++i) {\n            const layer = this.app.scene.layers.getLayerByName(this.layerNames[i]);\n            if (layer) {\n                this.layers.push(layer);\n            }\n        }\n\n        this.app.mouse.on(EVENT_MOUSEDOWN, this.onSelect, this);\n\n        this.on('destroy', () => {\n            this.app.mouse.off(EVENT_MOUSEDOWN, this.onSelect, this);\n        });\n    }\n\n    onSelect(event) {\n        const canvas = this.app.graphicsDevice.canvas;\n        const canvasWidth = parseInt(canvas.clientWidth, 10);\n        const canvasHeight = parseInt(canvas.clientHeight, 10);\n\n        const camera = this.entity.camera.camera;\n        const scene = this.app.scene;\n        const picker = this.picker;\n\n        picker.resize(canvasWidth * this.pickAreaScale, canvasHeight * this.pickAreaScale);\n        picker.prepare(camera, scene, this.layers);\n\n        // Map the mouse coordinates into picker coordinates and\n        // query the selection\n        const selected = picker.getSelection({\n            x: Math.floor(event.x * (picker.width / canvasWidth)),\n            y: picker.height - Math.floor(event.y * (picker.height / canvasHeight))\n        });\n\n        if (selected.length > 0) {\n            // Get the graph node used by the selected mesh instance\n            let entity = selected[0].node;\n\n            // Bubble up the hierarchy until we find an actual Entity\n            while (entity !== null && !(entity instanceof Entity) && (entity.script && entity.script.pulse)) {\n                entity = entity.getParent();\n            }\n            if (entity) {\n                entity.script.pulse.pulse();\n            }\n        }\n    }\n}\n"})})}),(0,i.jsx)(c.A,{value:"classic",label:"Classic",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"var PickerFramebuffer = pc.createScript('pickerFramebuffer');\n\nPickerFramebuffer.attributes.add('pickAreaScale', {\n    type: 'number',\n    title: 'Pick Area Scale',\n    description: '1 is more accurate but worse performance. 0.01 is best performance but least accurate. 0.25 is the default.',\n    default: 0.25,\n    min: 0.01,\n    max: 1\n});\n\nPickerFramebuffer.attributes.add('layerNames', {\n    type: 'string',\n    title: 'Layers Names',\n    array: true,\n    description: 'Layer names from which objects will be picked from.',\n    default: ['World']\n});\n\n// initialize code called once per entity\nPickerFramebuffer.prototype.initialize = function() {\n    // Create a frame buffer picker with a scaled resolution\n    var canvas = this.app.graphicsDevice.canvas;\n    var canvasWidth = parseInt(canvas.clientWidth, 10);\n    var canvasHeight = parseInt(canvas.clientHeight, 10);\n\n    this.picker = new pc.Picker(this.app, canvasWidth * this.pickAreaScale, canvasHeight * this.pickAreaScale);\n    this.layers = [];\n    for (var i = 0; i < this.layerNames.length; ++i) {\n        var layer = this.app.scene.layers.getLayerByName(this.layerNames[i]);\n        if (layer) {\n            this.layers.push(layer);\n        }\n    }\n\n    this.app.mouse.on(pc.EVENT_MOUSEDOWN, this.onSelect, this);\n\n    this.on('destroy', function() {\n        this.app.mouse.off(pc.EVENT_MOUSEDOWN, this.onSelect, this);\n    }, this);\n};\n\nPickerFramebuffer.prototype.onSelect = function (event) {\n    var canvas = this.app.graphicsDevice.canvas;\n    var canvasWidth = parseInt(canvas.clientWidth, 10);\n    var canvasHeight = parseInt(canvas.clientHeight, 10);\n\n    var camera = this.entity.camera.camera;\n    var scene = this.app.scene;\n    var picker = this.picker;\n\n    picker.resize(canvasWidth * this.pickAreaScale, canvasHeight * this.pickAreaScale);\n    picker.prepare(camera, scene, this.layers);\n\n    // Map the mouse coordinates into picker coordinates and\n    // query the selection\n    var selected = picker.getSelection({\n        x: Math.floor(event.x * (picker.width / canvasWidth)),\n        y: picker.height - Math.floor(event.y * (picker.height / canvasHeight))\n    });\n\n    if (selected.length > 0) {\n        // Get the graph node used by the selected mesh instance\n        var entity = selected[0].node;\n\n        // Bubble up the hierarchy until we find an actual Entity\n        // that has the script we are looking for\n        while (entity !== null && !(entity instanceof pc.Entity) && (entity.script && entity.script.pulse)) {\n            entity = entity.getParent();\n        }\n        if (entity) {\n            entity.script.pulse.pulse();\n        }\n    }\n};\n"})})})]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);