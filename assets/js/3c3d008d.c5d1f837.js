"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[25032],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var n=i(96540);const s={},a=n.createContext(s);function r(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(a.Provider,{value:t},e.children)}},81316:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"user-manual/optimization/mini-stats","title":"MiniStats","description":"MiniStats is a lightweight graphical display of an application\'s key performance statistics. It shows draw call count, frame time, CPU load and (where supported) GPU load.","source":"@site/docs/user-manual/optimization/mini-stats.md","sourceDirName":"user-manual/optimization","slug":"/user-manual/optimization/mini-stats","permalink":"/user-manual/optimization/mini-stats","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/optimization/mini-stats.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"MiniStats","sidebar_position":3},"sidebar":"userManualSidebar","previous":{"title":"Profiler","permalink":"/user-manual/optimization/profiler"},"next":{"title":"Device Pixel Ratio","permalink":"/user-manual/optimization/runtime-devicepixelratio"}}');var s=i(74848),a=i(28453);const r={title:"MiniStats",sidebar_position:3},o=void 0,l={},c=[{value:"Using MiniStats Outside of the Editor",id:"using-ministats-outside-of-the-editor",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"MiniStats is a lightweight graphical display of an application's key performance statistics. It shows draw call count, frame time, CPU load and (where supported) GPU load."}),"\n",(0,s.jsx)(t.p,{children:"Editor users can enable the MiniStats panel via the Launch button menu:"}),"\n",(0,s.jsx)("img",{loading:"lazy",alt:"Launch Menu",width:"600",src:"/img/user-manual/optimization/mini-stats/launch-menu-mini-stats.png"}),"\n",(0,s.jsx)(t.p,{children:"Clicking on the MiniStats will cycle through three supported sizes:"}),"\n",(0,s.jsx)("img",{loading:"lazy",alt:"Mini Stats",width:"411",src:"/img/user-manual/optimization/mini-stats/mini-stats.gif"}),"\n",(0,s.jsx)(t.p,{children:"The information displayed is as follows:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"DrawCalls"})," - The number of rendered objects dispatched every frame. Each draw call has a cost on the CPU and GPU, so minimizing this number is sensible."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Frame"})," - The total time in milliseconds for the browser to process each frame."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"GPU"})," - Shows the time in milliseconds to render each frame by the GPU. This stat is supported by both WebGL 2 and WebGPU flavors of the Engine but there are some requirements:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["WebGL 2: The underlying WebGL implementation must support the ",(0,s.jsx)(t.a,{href:"https://web3dsurvey.com/webgl2/extensions/EXT_disjoint_timer_query_webgl2",children:(0,s.jsx)(t.code,{children:"EXT_disjoint_timer_query_webgl2"})})," extension. You can confirm whether your browser supports this extension by visiting ",(0,s.jsx)(t.a,{href:"https://webglreport.com/?v=2",children:"WebGL Report"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["WebGPU: The underlying WebGPU implementation must support the GPU Adapter feature ",(0,s.jsx)(t.a,{href:"https://web3dsurvey.com/webgpu/features/timestamp-query",children:(0,s.jsx)(t.code,{children:"timestamp-query"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"CPU"})," - Shows the time in milliseconds to render each frame by the CPU."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The CPU and GPU graphs display a breakdown of the update and render portion of the frame using red and green respectively."}),"\n",(0,s.jsx)(t.h2,{id:"using-ministats-outside-of-the-editor",children:"Using MiniStats Outside of the Editor"}),"\n",(0,s.jsx)(t.p,{children:"While the MiniStats panel is incorporated into the Editor's Launch page, you can also use it independent of the Editor. To add MiniStats to your application, simply call:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const miniStats = new pc.MiniStats(app);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["For more details on available methods and properties, refer to the ",(0,s.jsx)(t.a,{href:"https://api.playcanvas.com/engine/classes/MiniStats.html",children:"MiniStats API reference"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Take a look at the ",(0,s.jsx)(t.a,{href:"https://playcanvas.github.io/",children:"Engine Examples Browser"})," to see MiniStats in action in an Engine-only context."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);