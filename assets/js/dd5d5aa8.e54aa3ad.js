"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[34909],{25776:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"user-manual/gaussian-splatting/creating/sog-format","title":"SOG file format","description":"SOG (Spatially Ordered Gaussians) is a compact container for 3D Gaussian Splat data. It achieves high compression via quantization (lossy by design), typically yielding files \\\\~15\u201320\xd7 smaller than an equivalent PLY.","source":"@site/docs/user-manual/gaussian-splatting/creating/sog-format.md","sourceDirName":"user-manual/gaussian-splatting/creating","slug":"/user-manual/gaussian-splatting/creating/sog-format","permalink":"/user-manual/gaussian-splatting/creating/sog-format","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/gaussian-splatting/creating/sog-format.md","tags":[],"version":"current","frontMatter":{"title":"SOG file format"},"sidebar":"userManualSidebar","previous":{"title":"The PLY Format","permalink":"/user-manual/gaussian-splatting/creating/ply-format"},"next":{"title":"Viewing Splats","permalink":"/user-manual/gaussian-splatting/viewing"}}');var t=s(74848),r=s(28453);const l={title:"SOG file format"},o=void 0,a={},d=[{value:"1) File set",id:"1-file-set",level:2},{value:"1.1 Image dimensions &amp; indexing",id:"11-image-dimensions--indexing",level:3},{value:"1.2 Coordinate system",id:"12-coordinate-system",level:3},{value:"1.3 Bundled variant",id:"13-bundled-variant",level:3},{value:"2) <code>meta.json</code>",id:"2-metajson",level:2},{value:"3) Property encodings",id:"3-property-encodings",level:2},{value:"3.1 Positions",id:"31-positions",level:3},{value:"3.2 Orientation",id:"32-orientation",level:3},{value:"Validity constraints",id:"validity-constraints",level:4},{value:"3.3 Scales",id:"33-scales",level:3},{value:"3.4 Base color + opacity (DC)",id:"34-base-color--opacity-dc",level:3},{value:"3.5 Higher-order SH (optional)",id:"35-higher-order-sh-optional",level:3},{value:"Labels",id:"labels",level:4},{value:"Centroids (palette)",id:"centroids-palette",level:4},{value:"4) Example <code>meta.json</code>",id:"4-example-metajson",level:2},{value:"5) Versioning &amp; compatibility",id:"5-versioning--compatibility",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"SOG (Spatially Ordered Gaussians)"})," is a compact container for 3D Gaussian Splat data. It achieves high compression via quantization (lossy by design), typically yielding files ",(0,t.jsx)(n.strong,{children:"~15\u201320\xd7 smaller"})," than an equivalent PLY."]}),"\n",(0,t.jsxs)(n.p,{children:["You can create SOG files with ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://github.com/playcanvas/splat-transform",children:"SplatTransform"})})," and preview them in the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://playcanvas.com/viewer",children:"PlayCanvas Viewer"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:"This document is the format specification."}),"\n",(0,t.jsx)(n.h2,{id:"1-file-set",children:"1) File set"}),"\n",(0,t.jsx)(n.p,{children:"A SOG dataset is a set of images plus a metadata file:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"File"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Channels (8-bit)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"meta.json"})}),(0,t.jsx)(n.td,{children:"Scene metadata and filenames"}),(0,t.jsx)(n.td,{children:"\u2014"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"means_l.webp"})}),(0,t.jsx)(n.td,{children:"Positions \u2013 lower 8 bits (RGB)"}),(0,t.jsx)(n.td,{children:"R,G,B"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"means_u.webp"})}),(0,t.jsx)(n.td,{children:"Positions \u2013 upper 8 bits (RGB)"}),(0,t.jsx)(n.td,{children:"R,G,B"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"quats.webp"})}),(0,t.jsx)(n.td,{children:"Orientation \u2013 compressed quaternion"}),(0,t.jsx)(n.td,{children:"R,G,B,A"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"scales.webp"})}),(0,t.jsx)(n.td,{children:"Per-axis sizes via codebook"}),(0,t.jsx)(n.td,{children:"R,G,B"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"sh0.webp"})}),(0,t.jsx)(n.td,{children:"Base color (DC) + opacity"}),(0,t.jsx)(n.td,{children:"R,G,B,A"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"shN_labels.webp"})}),(0,t.jsx)(n.td,{children:"Indices into SH palette (optional)"}),(0,t.jsx)(n.td,{children:"R,G"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"shN_centroids.webp"})}),(0,t.jsx)(n.td,{children:"SH palette coefficients (optional)"}),(0,t.jsx)(n.td,{children:"RGBA"})]})]})]}),"\n",(0,t.jsx)(n.admonition,{title:"Image formats",type:"note",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["By default, images ",(0,t.jsx)(n.strong,{children:"should"})," be ",(0,t.jsx)(n.strong,{children:"lossless WebP"})," to preserve quantized values exactly."]}),"\n",(0,t.jsxs)(n.li,{children:["Each property in ",(0,t.jsx)(n.code,{children:"meta.json"})," names its file, so other 8-bit RGBA-capable formats ",(0,t.jsx)(n.strong,{children:"may"})," be used."]}),"\n",(0,t.jsx)(n.li,{children:"Do not use lossy encodings for these assets as lossy compression will corrupt values and can produce visible/structural artifacts."}),"\n"]})}),"\n",(0,t.jsx)(n.h3,{id:"11-image-dimensions--indexing",children:"1.1 Image dimensions & indexing"}),"\n",(0,t.jsx)(n.p,{children:"All per-Gaussian properties are co-located: the same pixel (x, y) across all property images (except shN_centroids) belongs to the same Gaussian."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Pixels are laid out ",(0,t.jsx)(n.strong,{children:"row-major"}),", origin at the ",(0,t.jsx)(n.strong,{children:"top-left"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["For image width ",(0,t.jsx)(n.code,{children:"W"})," and height ",(0,t.jsx)(n.code,{children:"H"}),", the number of addressable Gaussians is ",(0,t.jsx)(n.code,{children:"W*H"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"meta.count"})," ",(0,t.jsx)(n.strong,{children:"must"})," be ",(0,t.jsx)(n.code,{children:"<= W*H"}),". Any trailing pixels are ignored."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Indexing math (zero-based):"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["From index to pixel:\n",(0,t.jsx)(n.code,{children:"x = i % W"}),", ",(0,t.jsx)(n.code,{children:"y = floor(i / W)"})]}),"\n",(0,t.jsxs)(n.li,{children:["From pixel to index:\n",(0,t.jsx)(n.code,{children:"i = x + y * W"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"12-coordinate-system",children:"1.2 Coordinate system"}),"\n",(0,t.jsx)(n.p,{children:"Right-handed:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"x:"})," right"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"y:"})," up"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"z:"})," back (i.e., \u2212z is \u201cforward\u201d in camera-looking-down \u2212z conventions)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"13-bundled-variant",children:"1.3 Bundled variant"}),"\n",(0,t.jsxs)(n.p,{children:["A bundled SOG is a ZIP of the files above. Readers ",(0,t.jsx)(n.strong,{children:"should"})," accept either layout:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multi-file directory"})," (recommended during authoring)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Single archive"})," (e.g., ",(0,t.jsx)(n.code,{children:"scene.sog"}),") containing the same files at the archive root"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Readers ",(0,t.jsx)(n.strong,{children:"must"})," unzip and then resolve files using ",(0,t.jsx)(n.code,{children:"meta.json"})," exactly as for the multi-file version."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2-metajson",children:["2) ",(0,t.jsx)(n.code,{children:"meta.json"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'interface Meta {\n  version: 2;              // File format version (integer)\n  count: number;           // Number of gaussians (<= W*H of the images)\n  antialias: boolean;      // True iff scene was trained with anti-aliasing\n\n  means: {\n    // Ranges for decoding *log-transformed* positions (see \xa73.1).\n    mins: [number, number, number];   // min of nx,ny,nz (log-domain)\n    maxs: [number, number, number];   // max of nx,ny,nz (log-domain)\n    files: ["means_l.webp", "means_u.webp"];\n  };\n\n  scales: {\n    codebook: number[];    // 256 floats; see \xa73.3\n    files: ["scales.webp"];\n  };\n\n  quats: {\n    files: ["quats.webp"]; // \xa73.2\n  };\n\n  sh0: {\n    codebook: number[];    // 256 floats; maps quantized DC to linear color (\xa73.4)\n    files: ["sh0.webp"];\n  };\n\n  // Present only if higher-order SH exist:\n  shN?: {\n    count: number;         // Palette size (up to 65536)\n    bands: number;         // Number of SH bands (1..3). DC (=band 1) lives in sh0.\n    codebook: number[];    // 256 floats; shared for all AC coefficients (\xa73.5)\n    files: [\n      "shN_labels.webp",   // Per-gaussian palette index (0..count-1)\n      "shN_centroids.webp" // Palette of AC coefficients as pixels (\xa73.5)\n    ];\n  };\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"All codebooks contain linear-space values, not sRGB."}),"\n",(0,t.jsxs)(n.li,{children:["Image data ",(0,t.jsx)(n.strong,{children:"must"})," be treated as raw 8-bit integers (no gamma conversion)."]}),"\n",(0,t.jsx)(n.li,{children:"Unless otherwise stated, channels not mentioned are ignored."}),"\n"]})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"3-property-encodings",children:"3) Property encodings"}),"\n",(0,t.jsx)(n.h3,{id:"31-positions",children:"3.1 Positions"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"means_l.webp"}),", ",(0,t.jsx)(n.code,{children:"means_u.webp"})," (RGB, 16-bit per axis)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Each axis is quantized to ",(0,t.jsx)(n.strong,{children:"16 bits"})," across two images:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// 16-bit normalized value per axis (0..65535)\nconst qx = (means_u.r << 8) | means_l.r;\nconst qy = (means_u.g << 8) | means_l.g;\nconst qz = (means_u.b << 8) | means_l.b;\n\n// Dequantize into *log-domain* nx,ny,nz using per-axis ranges from meta:\nconst nx = lerp(meta.means.mins[0], meta.means.maxs[0], qx / 65535);\nconst ny = lerp(meta.means.mins[1], meta.means.maxs[1], qy / 65535);\nconst nz = lerp(meta.means.mins[2], meta.means.maxs[2], qz / 65535);\n\n// Undo the symmetric log transform used at encode time:\nconst unlog = (n: number) => Math.sign(n) * (Math.exp(Math.abs(n)) - 1);\n\nconst p = {\n  x: unlog(nx),\n  y: unlog(ny),\n  z: unlog(nz),\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"32-orientation",children:"3.2 Orientation"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"quats.webp"})," (RGBA, 26-bit \u201csmallest-three\u201d)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Quaternions are encoded with ",(0,t.jsx)(n.strong,{children:"3\xd78-bit components + 2-bit mode"})," (total ",(0,t.jsx)(n.strong,{children:"26 bits"}),") using the standard ",(0,t.jsx)(n.em,{children:"smallest-three"})," scheme."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"R,G,B"})," store the three kept (signed) components, uniformly quantized to ",(0,t.jsx)(n.code,{children:"[-\u221a2/2, +\u221a2/2]"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"A"})," stores the ",(0,t.jsx)(n.strong,{children:"mode"})," in the range ",(0,t.jsx)(n.strong,{children:"252..255"}),". The mode is ",(0,t.jsx)(n.code,{children:"A - 252"})," \u2208 ",3," and identifies which of the four components was the ",(0,t.jsx)(n.strong,{children:"largest by magnitude"})," (and therefore omitted from the stream and reconstructed)."]}),"\n",(0,t.jsxs)(n.li,{children:["Let ",(0,t.jsx)(n.code,{children:"norm = Math.SQRT2"})," (i.e., \u221a2)."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// Dequantize the stored three components:\nconst toComp = (c: number) => (c / 255 - 0.5) * 2.0 / Math.SQRT2;\n\nconst a = toComp(quats.r);\nconst b = toComp(quats.g);\nconst c = toComp(quats.b);\n\nconst mode = quats.a - 252; // 0..3 (R,G,B,A is one of the four components)\n\n// Reconstruct the omitted component so that ||q|| = 1 and w.l.o.g. the omitted one is non-negative\nconst t = a*a + b*b + c*c;\nconst d = Math.sqrt(Math.max(0, 1 - t));\n\n// Place components according to mode\nlet q: [number, number, number, number];\nswitch (mode) {\n    case 0: q = [d, a, b, c]; break; // omitted = x\n    case 1: q = [a, d, b, c]; break; // omitted = y\n    case 2: q = [a, b, d, c]; break; // omitted = z\n    case 3: q = [a, b, c, d]; break; // omitted = w\n    default: throw new Error("Invalid quaternion mode");\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"validity-constraints",children:"Validity constraints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"quats.a"})," ",(0,t.jsx)(n.strong,{children:"must"})," be in ",(0,t.jsx)(n.strong,{children:"252, 253, 254, 255"}),". Other values are reserved."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"33-scales",children:"3.3 Scales"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"scales.webp"})," (RGB via codebook)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Per-axis sizes are ",(0,t.jsx)(n.strong,{children:"codebook indices"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const sx = meta.scales.codebook[scales.r]; // 0..255\nconst sy = meta.scales.codebook[scales.g];\nconst sz = meta.scales.codebook[scales.b];\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Interpretation (e.g., principal axis standard deviations vs. full extents) follows the source training setup; values are in ",(0,t.jsx)(n.strong,{children:"scene units"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"34-base-color--opacity-dc",children:"3.4 Base color + opacity (DC)"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sh0.webp"})," (RGBA)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sh0"})," holds the ",(0,t.jsx)(n.strong,{children:"DC (l=0)"})," SH coefficient per color channel and ",(0,t.jsx)(n.strong,{children:"alpha"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"R,G,B"})," are 0..255 indices into ",(0,t.jsx)(n.code,{children:"sh0.codebook"})," (linear domain)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"A"})," is the ",(0,t.jsx)(n.strong,{children:"opacity"})," in ",(0,t.jsx)(n.code,{children:"[0,1]"})," (i.e., ",(0,t.jsx)(n.code,{children:"sh0.a / 255"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To convert the DC coefficient to ",(0,t.jsx)(n.strong,{children:"linear RGB"})," contribution:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// SH_C0 = Y_0^0 = 1 / (2 * sqrt(pi))\nconst SH_C0 = 0.28209479177387814;\n\nconst r = 0.5 + meta.sh0.codebook[sh0.r] * SH_C0;\nconst g = 0.5 + meta.sh0.codebook[sh0.g] * SH_C0;\nconst b = 0.5 + meta.sh0.codebook[sh0.b] * SH_C0;\nconst a = sh0.a / 255;\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Color space."})," Values are ",(0,t.jsx)(n.strong,{children:"linear"}),". If you output to sRGB, apply the usual transfer after shading/compositing."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"35-higher-order-sh-optional",children:"3.5 Higher-order SH (optional)"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"shN_labels.webp"}),", ",(0,t.jsx)(n.code,{children:"shN_centroids.webp"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If present, higher-order (AC) SH coefficients are stored via a palette:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"shN.count"})," \u2208 ",(0,t.jsx)(n.strong,{children:"[1,64k]"})," number of entries."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"shN.bands"})," \u2208 ",(0,t.jsx)(n.strong,{children:"[1,3]"})," number of bands per entry."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"labels",children:"Labels"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"shN_labels.webp"})," stores a ",(0,t.jsx)(n.strong,{children:"16-bit index"})," per gaussian with range (0..count-1)."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const index = shN_labels.r + (shN_labels.g << 8);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"centroids-palette",children:"Centroids (palette)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"shN_centroids.webp"})," is an RGB image storing the SH coefficient palette."]}),"\n",(0,t.jsx)(n.li,{children:"There are always 64 entries per row; entries are packed row-major with origin top-left."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The texture width is dependent on the number of bands:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Bands"}),(0,t.jsx)(n.th,{children:"Coefficients"}),(0,t.jsx)(n.th,{children:"Texure width (pixels)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:"64 * 3 = 96"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"8"}),(0,t.jsx)(n.td,{children:"64 * 8 = 512"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:"15"}),(0,t.jsx)(n.td,{children:"64 * 15 = 960"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Calculating the pixel location for spherical harmonic entry n and coefficient c:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const coeffs = [3, 8, 15];\nconst u = (n % 64) * coeffs[bands] + c;\nconst v = Math.floor(n / 64);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"4-example-metajson",children:["4) Example ",(0,t.jsx)(n.code,{children:"meta.json"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "version": 2,\n  "count": 187543,\n  "antialias": true,\n  "means": {\n    "mins": [-2.10, -1.75, -2.40],\n    "maxs": [ 2.05,  2.25,  1.90],\n    "files": ["means_l.webp", "means_u.webp"]\n  },\n  "scales": {\n    "codebook": [/* 256 floats */],\n    "files": ["scales.webp"]\n  },\n  "quats": { "files": ["quats.webp"] },\n  "sh0": {\n    "codebook": [/* 256 floats */],\n    "files": ["sh0.webp"]\n  },\n  "shN": {\n    "count": 128,\n    "bands": 3,\n    "codebook": [/* 256 floats */],\n    "files": ["shN_labels.webp", "shN_centroids.webp"]\n  }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"5-versioning--compatibility",children:"5) Versioning & compatibility"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Readers ",(0,t.jsx)(n.strong,{children:"must"})," check ",(0,t.jsx)(n.code,{children:"version"}),". This document describes ",(0,t.jsx)(n.strong,{children:"version 2"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Additional optional properties may appear in future versions; readers ",(0,t.jsx)(n.strong,{children:"should"})," ignore unrecognized fields."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(96540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);