"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[79443],{11470:(e,n,t)=>{t.d(n,{A:()=>M});var i=t(96540),s=t(34164),o=t(23104),r=t(56347),a=t(205),l=t(57485),c=t(31682),u=t(70679);function p(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)(()=>{const e=n??function(e){return p(e).map(({props:{value:e,label:n,attributes:t,default:i}})=>({value:e,label:n,attributes:t,default:i}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function d({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const t=(0,r.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(s),(0,i.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})},[s,t])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,o=h(e),[r,l]=(0,i.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o})),[c,p]=m({queryString:t,groupId:s}),[b,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,u.Dv)(n);return[t,(0,i.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),v=(()=>{const e=c??b;return d({value:e,tabValues:o})?e:null})();(0,a.A)(()=>{v&&l(v)},[v]);return{selectedValue:r,selectValue:(0,i.useCallback)(e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),f(e)},[p,f,o]),tabValues:o}}var f=t(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function w({className:e,block:n,selectedValue:t,selectValue:i,tabValues:r}){const a=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),c=e=>{const n=e.currentTarget,s=a.indexOf(n),o=r[s].value;o!==t&&(l(n),i(o))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;n=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;n=a[t]??a[a.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:r.map(({value:e,label:n,attributes:i})=>(0,g.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{a.push(e)},onKeyDown:u,onClick:c,...i,className:(0,s.A)("tabs__item",v.tabItem,i?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function x({lazy:e,children:n,selectedValue:t}){const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=o.find(e=>e.props.value===t);return e?(0,i.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function y(e){const n=b(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",v.tabList),children:[(0,g.jsx)(w,{...n,...e}),(0,g.jsx)(x,{...n,...e})]})}function M(e){const n=(0,f.A)();return(0,g.jsx)(y,{...e,children:p(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var i=t(34164);const s={tabItem:"tabItem_Ymn6"};var o=t(74848);function r({children:e,hidden:n,className:t}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,i.A)(s.tabItem,t),hidden:n,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},96750:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"tutorials/terrain-generation","title":"Terrain Generation from Heightmap","description":"This project uses the pc.Mesh API to procedurally generate and texture a rolling hillside from a heightmap texture.","source":"@site/docs/tutorials/terrain-generation.md","sourceDirName":"tutorials","slug":"/tutorials/terrain-generation","permalink":"/tutorials/terrain-generation","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/terrain-generation.md","tags":[{"inline":true,"label":"procedural","permalink":"/tags/procedural"}],"version":"current","frontMatter":{"title":"Terrain Generation from Heightmap","tags":["procedural"],"thumb":"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/406046/W2AUF9-image-75.jpg"},"sidebar":"tutorialsSidebar","previous":{"title":"Switching materials at runtime","permalink":"/tutorials/switching-materials-at-runtime"},"next":{"title":"Third Person Controller","permalink":"/tutorials/third-person-controller"}}');var s=t(74848),o=t(28453),r=t(11470),a=t(19365);const l={title:"Terrain Generation from Heightmap",tags:["procedural"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/406046/W2AUF9-image-75.jpg"},c=void 0,u={},p=[];function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{className:"iframe-container",children:(0,s.jsx)("iframe",{src:"https://playcanv.as/p/CmcIlmPb/",title:"Terrain Generation from Heightmap",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,s.jsxs)(n.p,{children:["This project uses the ",(0,s.jsx)(n.a,{href:"https://api.playcanvas.com/engine/classes/Mesh.html",children:(0,s.jsx)(n.code,{children:"pc.Mesh"})})," API to procedurally generate and texture a rolling hillside from a heightmap texture."]}),"\n",(0,s.jsxs)(n.p,{children:["Try it from the Editor in the ",(0,s.jsx)(n.a,{href:"https://playcanvas.com/project/406046",children:"tutorial project."})]}),"\n",(0,s.jsx)(n.p,{children:"The script below performs the terrain generation."}),"\n","\n",(0,s.jsxs)(r.A,{defaultValue:"classic",groupId:"script-code",children:[(0,s.jsx)(a.A,{value:"esm",label:"ESM",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Script, Vec3, Mesh, MeshInstance, GraphNode, Model, calculateNormals } from 'playcanvas';\n\nexport class Terrain extends Script {\n    static scriptName = \"terrain\";\n\n    /**\n     * @attribute\n     * @title Height Map\n     * @type {Asset}\n     * @resource texture\n     */\n    heightMap = null;\n\n    /**\n     * @attribute\n     * @title Min Height\n     * @type {number}\n     */\n    minHeight = 0;\n\n    /**\n     * @attribute\n     * @title Max Height\n     * @type {number}\n     */\n    maxHeight = 10;\n\n    /**\n     * @attribute\n     * @title Width\n     * @type {number}\n     */\n    width = 100;\n\n    /**\n     * @attribute\n     * @title Depth\n     * @type {number}\n     */\n    depth = 100;\n\n    /**\n     * @attribute\n     * @title Subdivisions\n     * @type {number}\n     */\n    subdivisions = 250;\n\n    /**\n     * @attribute\n     * @title Material\n     * @type {Asset}\n     * @resource material\n     */\n    material = null;\n\n    initialize() {\n        const img = this.heightMap.resource.getSource();\n        const visualMesh = this.createTerrainFromHeightMap(img, this.subdivisions);\n        const collisionMesh = this.createTerrainFromHeightMap(img, this.subdivisions / 2);\n\n        this.entity.addComponent('render', {\n            meshInstances: [new MeshInstance(visualMesh, this.material.resource)]\n        });\n\n        this.entity.addComponent('collision', {\n            type: 'mesh'\n        });\n\n        // We still have to create a model resource to create a runtime collision mesh\n        const node = new GraphNode();\n        const meshInstance = new MeshInstance(node, collisionMesh, this.material.resource);\n        const collisionModel = new Model();\n        collisionModel.graph = node;\n        collisionModel.meshInstances.push(meshInstance);\n\n        this.entity.collision.model = collisionModel;\n\n        this.entity.addComponent('rigidbody', {\n            friction: 0.5,\n            type: 'static'\n        });\n    }\n\n    createTerrainVertexData(options) {\n        let positions = [];\n        let uvs = [];\n        let indices = [];\n        let row, col;\n\n        for (row = 0; row <= options.subdivisions; row++) {\n            for (col = 0; col <= options.subdivisions; col++) {\n                let position = new Vec3(\n                    (col * options.width) / options.subdivisions - (options.width / 2.0),\n                    0,\n                    ((options.subdivisions - row) * options.depth) / options.subdivisions - (options.depth / 2.0)\n                );\n\n                let heightMapX = (((position.x + options.width / 2) / options.width) * (options.bufferWidth - 1)) | 0;\n                let heightMapY = ((1.0 - (position.z + options.depth / 2) / options.depth) * (options.bufferHeight - 1)) | 0;\n\n                let pos = (heightMapX + heightMapY * options.bufferWidth) * 4;\n                let r = options.buffer[pos] / 255.0;\n                let g = options.buffer[pos + 1] / 255.0;\n                let b = options.buffer[pos + 2] / 255.0;\n\n                let gradient = r * 0.3 + g * 0.59 + b * 0.11;\n\n                position.y = options.minHeight + (options.maxHeight - options.minHeight) * gradient;\n\n                positions.push(position.x, position.y, position.z);\n                uvs.push(col / options.subdivisions, 1.0 - row / options.subdivisions);\n            }\n        }\n\n        for (row = 0; row < options.subdivisions; row++) {\n            for (col = 0; col < options.subdivisions; col++) {\n                indices.push(col + row * (options.subdivisions + 1));\n                indices.push(col + 1 + row * (options.subdivisions + 1));\n                indices.push(col + 1 + (row + 1) * (options.subdivisions + 1));\n\n                indices.push(col + row * (options.subdivisions + 1));\n                indices.push(col + 1 + (row + 1) * (options.subdivisions + 1));\n                indices.push(col + (row + 1) * (options.subdivisions + 1));\n            }\n        }\n\n        let normals = calculateNormals(positions, indices);\n\n        return {\n            indices: indices,\n            positions: positions,\n            normals: normals,\n            uvs: uvs\n        };\n    }\n\n    createTerrainFromHeightMap(img, subdivisions) {\n        const canvas = document.createElement(\"canvas\");\n        const context = canvas.getContext(\"2d\");\n        const bufferWidth = img.width;\n        const bufferHeight = img.height;\n        canvas.width = bufferWidth;\n        canvas.height = bufferHeight;\n\n        context.drawImage(img, 0, 0);\n\n        const buffer = context.getImageData(0, 0, bufferWidth, bufferHeight).data;\n        const vertexData = this.createTerrainVertexData({\n            width: this.width,\n            depth: this.depth,\n            subdivisions: subdivisions,\n            minHeight: this.minHeight,\n            maxHeight: this.maxHeight,\n            buffer: buffer,\n            bufferWidth: bufferWidth,\n            bufferHeight: bufferHeight\n        });\n\n        const mesh = new Mesh(this.app.graphicsDevice);\n        mesh.setPositions(vertexData.positions);\n        mesh.setNormals(vertexData.normals);\n        mesh.setUvs(0, vertexData.uvs);\n        mesh.setIndices(vertexData.indices);\n        mesh.update();\n\n        return mesh;\n    }\n}\n"})})}),(0,s.jsx)(a.A,{value:"classic",label:"Classic",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"var Terrain = pc.createScript('terrain');\n\nTerrain.attributes.add('heightMap', {\n    type: 'asset',\n    assetType: 'texture'\n});\n\nTerrain.attributes.add('minHeight', {\n    type: 'number',\n    default: 0\n});\n\nTerrain.attributes.add('maxHeight', {\n    type: 'number',\n    default: 10\n});\n\nTerrain.attributes.add('width', {\n    type: 'number',\n    default: 100\n});\n\nTerrain.attributes.add('depth', {\n    type: 'number',\n    default: 100\n});\n\nTerrain.attributes.add('subdivisions', {\n    type: 'number',\n    default: 250\n});\n\nTerrain.attributes.add('material', {\n    type: 'asset',\n    assetType: 'material'\n});\n\n// initialize code called once per entity\nTerrain.prototype.initialize = function() {\n    var img = this.heightMap.resource.getSource();\n    var visualMesh = this.createTerrainFromHeightMap(img, this.subdivisions);\n    var collisionMesh = this.createTerrainFromHeightMap(img, this.subdivisions / 2);\n\n    this.entity.addComponent('render', {\n        meshInstances: [new pc.MeshInstance(visualMesh, this.material.resource)]\n    });\n\n    this.entity.addComponent('collision', {\n        type: 'mesh'\n    });\n\n    // We still have to create a model resource to create a runtime\n    // collision mesh\n    var node = new pc.GraphNode();\n    var meshInstance = new pc.MeshInstance(node, collisionMesh, this.material.resource);\n    var collisionModel = new pc.Model();\n    collisionModel.graph = node;\n    collisionModel.meshInstances.push(meshInstance);\n\n    this.entity.collision.model = collisionModel;\n\n    this.entity.addComponent('rigidbody', {\n        friction: 0.5,\n        type: 'static'\n    });\n};\n\nTerrain.prototype.createTerrainVertexData = function (options) {\n    var positions = [];\n    var uvs = [];\n    var indices = [];\n    var row, col;\n\n    for (row = 0; row <= options.subdivisions; row++) {\n        for (col = 0; col <= options.subdivisions; col++) {\n            var position = new pc.Vec3((col * options.width) / options.subdivisions - (options.width / 2.0), 0, ((options.subdivisions - row) * options.height) / options.subdivisions - (options.height / 2.0));\n\n            var heightMapX = (((position.x + options.width / 2) / options.width) * (options.bufferWidth - 1)) | 0;\n            var heightMapY = ((1.0 - (position.z + options.height / 2) / options.height) * (options.bufferHeight - 1)) | 0;\n\n            var pos = (heightMapX + heightMapY * options.bufferWidth) * 4;\n            var r = options.buffer[pos] / 255.0;\n            var g = options.buffer[pos + 1] / 255.0;\n            var b = options.buffer[pos + 2] / 255.0;\n\n            var gradient = r * 0.3 + g * 0.59 + b * 0.11;\n\n            position.y = options.minHeight + (options.maxHeight - options.minHeight) * gradient;\n\n            positions.push(position.x, position.y, position.z);\n            uvs.push(col / options.subdivisions, 1.0 - row / options.subdivisions);\n        }\n    }\n\n    for (row = 0; row < options.subdivisions; row++) {\n        for (col = 0; col < options.subdivisions; col++) {\n            indices.push(col + row * (options.subdivisions + 1));\n            indices.push(col + 1 + row * (options.subdivisions + 1));\n            indices.push(col + 1 + (row + 1) * (options.subdivisions + 1));\n\n            indices.push(col + row * (options.subdivisions + 1));\n            indices.push(col + 1 + (row + 1) * (options.subdivisions + 1));\n            indices.push(col + (row + 1) * (options.subdivisions + 1));\n        }\n    }\n\n    var normals = pc.calculateNormals(positions, indices);\n\n    return {\n        indices: indices,\n        positions: positions,\n        normals: normals,\n        uvs: uvs\n    };\n};\n\nTerrain.prototype.createTerrainFromHeightMap = function (img, subdivisions) {\n    var canvas = document.createElement(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var bufferWidth = img.width;\n    var bufferHeight = img.height;\n    canvas.width = bufferWidth;\n    canvas.height = bufferHeight;\n\n    context.drawImage(img, 0, 0);\n\n    var buffer = context.getImageData(0, 0, bufferWidth, bufferHeight).data;\n    var vertexData = this.createTerrainVertexData({\n        width: this.width,\n        height: this.depth,\n        subdivisions: subdivisions,\n        minHeight: this.minHeight,\n        maxHeight: this.maxHeight,\n        buffer: buffer,\n        bufferWidth: bufferWidth,\n        bufferHeight: bufferHeight\n    });\n\n    var mesh = new pc.Mesh(this.app.graphicsDevice);\n    mesh.setPositions(vertexData.positions);\n    mesh.setNormals(vertexData.normals);\n    mesh.setUvs(0, vertexData.uvs);\n    mesh.setIndices(vertexData.indices);\n    mesh.update();\n\n    return mesh;\n};\n"})})})]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);