"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[29648],{7184:(e,a,t)=>{t.d(a,{C:()=>T,G:()=>w});var n=t(11470),r=t(19365),l=t(59849),s=t(96540),i=t(95293),o=t(9764),p=t(18676),u=t(58817),m=t(19748),d=t(83395),c=t(43025),h=t(10977),y=t(7306),f=t(68869),b=t(78692),g=t(8939),v=t(40050),x=t(93953),N=t(27351),C=t(74848);const M="// \u2191 imports hidden",w=({code:e,label:a,filename:t,language:i="jsx",showDemo:p=!1,showViewSourceButton:u=!0,showControls:m=!0,children:d})=>{const[c,h]=(0,s.useState)(0);if(!d||!e)return console.error("CodeExample: code and children are required"),null;return(0,C.jsxs)(n.A,{defaultValue:c>0?"Code":p?"Demo":"Code",children:[(0,C.jsx)(r.A,{value:"Demo",children:(0,C.jsxs)("div",{className:"code-example-demo",children:[d,u&&(0,C.jsxs)("div",{className:"code-example-demo-footer",children:[a," - ",(0,C.jsx)("a",{href:"#",onClick:e=>{e.preventDefault(),h(e=>e+1)},children:"View Code"})]}),(0,C.jsx)("div",{className:"code-example-controls",children:(0,C.jsx)(o.XA,{fill:!0,hidden:!1===m})})]})}),(0,C.jsx)(r.A,{value:"Code",children:(0,C.jsx)(l.A,{language:i,title:t,children:e.includes(M)?M+e.split(M)[1]:e})})]},c)},D=e=>{const{width:a=8,depth:t=8,intensity:n=.75}=e,r=(0,s.useMemo)(()=>new x.e(a,1,t),[a,t]);return(0,C.jsxs)(p.w,{children:[(0,C.jsx)(m.v,{type:"directional",castShadows:!0,normalOffsetBias:0,shadowBias:0,shadowDistance:16,shadowResolution:1024,shadowType:N.au1,shadowUpdateMode:N.M5l,vsmBlurSize:8,shadowIntensity:n,intensity:0}),(0,C.jsx)(d.e,{script:g.X,intensity:n,scale:r})]})},T=({children:e,useLight:a=!0,useControls:t=!1,useGrid:n=!1,useShadow:r=!1,camera:l=[0,0,10],sceneOffset:o=[0,-.501,0],exposure:m=1})=>{const{colorMode:g}=(0,i.G)(),x=(0,h.n)(),{asset:N}=(0,y.yj)("/assets/helipad.png"),M="dark"===g?"#2a2a2a":"#e4e0e0",[w,T]=(0,s.useState)(!1),[E,S]=(0,s.useState)(!1),A=(0,s.useCallback)(()=>T(!0),[]),j=(0,s.useCallback)(()=>T(!1),[]),I=(0,s.useCallback)(()=>S(!0),[]),O=(0,s.useCallback)(()=>S(!1),[]);return(0,s.useEffect)(()=>{const e=x.graphicsDevice.canvas;e.style.cursor=w?"grabbing":E?"grab":"default"},[w,E,x]),(0,s.useEffect)(()=>{const e=()=>T(!1);return x.graphicsDevice.canvas.addEventListener("pointerup",e),()=>x.graphicsDevice?.canvas.removeEventListener("pointerup",e)},[x]),(0,C.jsxs)(p.w,{children:[(0,C.jsxs)(p.w,{name:"camera",position:l,children:[(0,C.jsx)(u.i,{clearColor:M,renderSceneColorMap:!0}),t&&(0,C.jsx)(d.e,{script:f.a,enableFly:!1,pitchRange:new v.Z(-90,-5)})]}),a&&(0,C.jsx)(c.O,{envAtlas:N,showSkybox:!1,exposure:m}),n&&(0,C.jsx)(p.w,{name:"grid",scale:[1e3,1,1e3],position:[0,-.5,0],children:(0,C.jsx)(d.e,{script:b.x})}),r&&(0,C.jsx)(p.w,{position:o,children:(0,C.jsx)(D,{})}),(0,C.jsx)(p.w,{onPointerOver:I,onPointerOut:O,onPointerDown:A,onPointerUp:j,children:e})]})}},24358:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>b,contentTitle:()=>f,default:()=>x,frontMatter:()=>y,metadata:()=>n,toc:()=>g});const n=JSON.parse('{"id":"user-manual/playcanvas-react/api/hooks/use-material","title":"useMaterial","description":"Create and manage PlayCanvas materials","source":"@site/docs/user-manual/playcanvas-react/api/hooks/use-material.mdx","sourceDirName":"user-manual/playcanvas-react/api/hooks","slug":"/user-manual/playcanvas-react/api/hooks/use-material","permalink":"/user-manual/playcanvas-react/api/hooks/use-material","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/playcanvas-react/api/hooks/use-material.mdx","tags":[],"version":"current","frontMatter":{"description":"Create and manage PlayCanvas materials"},"sidebar":"userManualSidebar","previous":{"title":"Asset Hooks","permalink":"/user-manual/playcanvas-react/api/hooks/use-asset"},"next":{"title":"useParent","permalink":"/user-manual/playcanvas-react/api/hooks/use-parent"}}');var r=t(74848),l=t(28453),s=t(7184),i=t(78264);const o="import { Entity } from '@playcanvas/react';\nimport { Render } from '@playcanvas/react/components';\nimport { useMaterial } from '@playcanvas/react/hooks';\nimport { useControls } from 'leva';\n\nconst vars = {\n    diffuse: { value: '#000000' },\n    metalness: { value: 1, min: 0, max: 1, step: 0.01 },\n    gloss: { value: 0.5, min: 0, max: 1, step: 0.01 },\n    // emissive: { value: '#000000' },\n    // emissiveIntensity: { value: 0, min: 0, max: 2, step: 0.01 },\n    // specular: { value: '#ffffff' },\n    // shininess: { value: 30, min: 0, max: 100, step: 1 },\n    // reflectivity: { value: 0.5, min: 0, max: 1, step: 0.01 },\n    // clearCoat: { value: 0, min: 0, max: 1, step: 0.01 },\n    // clearCoatRoughness: { value: 0, min: 0, max: 1, step: 0.01 }\n};\n\n// \u2191 imports hidden\nexport const MaterialExample = () => {\n    const materialProps = useControls(vars);\n    const material = useMaterial({ \n      useMetalness: true,\n      glossInvert: true,\n      ...materialProps \n    });\n\n\n    return (\n      <Entity>\n          <Render type=\"box\" material={material} />\n      </Entity>\n    );\n};";var p=t(18676),u=t(16230),m=t(30885),d=t(9764);const c={diffuse:{value:"#000000"},metalness:{value:1,min:0,max:1,step:.01},gloss:{value:.5,min:0,max:1,step:.01}},h=()=>{const e=(0,d._5)(c),a=(0,m.R)({useMetalness:!0,glossInvert:!0,...e});return(0,r.jsx)(p.w,{children:(0,r.jsx)(u.d,{type:"box",material:a})})},y={description:"Create and manage PlayCanvas materials"},f="useMaterial",b={},g=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Further examples",id:"further-examples",level:2},{value:"Advanced Properties",id:"advanced-properties",level:3},{value:"Material with Textures",id:"material-with-textures",level:3},{value:"Material Sharing",id:"material-sharing",level:3},{value:"Related",id:"related",level:2}];function v(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components},{Details:t,RenderApiDocs:n}=a;return t||N("Details",!0),n||N("RenderApiDocs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"usematerial",children:(0,r.jsx)(a.code,{children:"useMaterial"})})}),"\n","\n",(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.code,{children:"useMaterial"})," hook allows you to create and manage a PlayCanvas ",(0,r.jsx)(a.a,{href:"https://api.playcanvas.com/engine/classes/StandardMaterial.html",children:"StandardMaterial"})," instance. Create a material with the hook and apply it to a ",(0,r.jsx)(a.a,{href:"../../render",children:(0,r.jsx)(a.code,{children:"<Render/>"})})," component."]}),"\n",(0,r.jsx)(a.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(a.p,{children:["You can create a material with the hook and apply it to a ",(0,r.jsx)(a.a,{href:"../../render",children:(0,r.jsx)(a.code,{children:"<Render/>"})})," component and update material properties dynamically."]}),"\n",(0,r.jsx)(s.G,{label:"Set material properties dynamically",filename:"material-example.jsx",code:o,showDemo:!0,children:(0,r.jsx)(i.l,{children:(0,r.jsx)(s.C,{useLight:!0,useShadow:!0,useGrid:!0,camera:[3,1,3],useControls:!0,children:(0,r.jsx)(h,{})})})}),"\n",(0,r.jsx)(a.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(a.p,{children:["The hooks accepts an object with the following properties that closely match those of the ",(0,r.jsx)(a.a,{href:"https://api.playcanvas.com/engine/classes/StandardMaterial.html",children:(0,r.jsx)(a.code,{children:"StandardMaterial"})})," class."]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Parameters"})}),(0,r.jsx)("p",{children:(0,r.jsx)(n,{data:'[{"name":"default","description":"","entries":[{"name":"userAttributes","description":"","optional":true,"type":{"displayName":"Map<any, any>","types":[{"name":"Map","url":null}]}},{"name":"onUpdateShader","description":"A custom function that will be called after all shader generator properties are collected\\nand before shader code is generated. This function will receive an object with shader\\ngenerator settings (based on current material and scene properties), that you can change and\\nthen return. Returned value will be used instead. This is mostly useful when rendering the\\nsame set of objects, but with different shader variations based on the same material. For\\nexample, you may wish to render a depth or normal pass using textures assigned to the\\nmaterial, a reflection pass with simpler shaders and so on. These properties are split into\\ntwo sections, generic standard material options and lit options. Properties of the standard\\nmaterial options are StandardMaterialOptions and the options for the lit options are\\nLitShaderOptions.","optional":true,"type":{"displayName":"UpdateShaderCallback | undefined","types":[{"name":"__type","url":"https://api.playcanvas.com/engine/classes/__type.html"}]}},{"name":"shaderOptBuilder","description":"","optional":true,"type":{"displayName":"StandardMaterialOptionsBuilder","types":[{"name":"StandardMaterialOptionsBuilder","url":"https://api.playcanvas.com/engine/classes/StandardMaterialOptionsBuilder.html"}]}},{"name":"alphaFade","description":"","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"ambient","description":"The ambient color of the material. This color value is 3-component (RGB), where each component is between 0 and 1.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"anisotropy","description":"Intensity Defines amount of anisotropy. Requires StandardMaterial#enableGGXSpecular  is set to true. - When anisotropyIntensity == 0, specular is isotropic. - Specular anisotropy increases as anisotropyIntensity value increases to maximum of 1.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"anisotropyIntensity","description":"Defines amount of anisotropy. Requires StandardMaterial#enableGGXSpecular  is set to true. - When anisotropyIntensity == 0, specular is isotropic. - Specular anisotropy increases as anisotropyIntensity value increases to maximum of 1.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"anisotropyRotation","description":"Defines the rotation (in degrees) of anisotropy.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"anisotropyMap","description":"e main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"anisotropyMapOffset","description":"Controls the 2D offset of the anisotropy map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"anisotropyMapRotation","description":"Controls the 2D rotation (in degrees) of the anisotropy map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"anisotropyMapTiling","description":"Controls the 2D tiling of the anisotropy map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"anisotropyMapUv","description":"Anisotropy map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"aoIntensity","description":"Ambient occlusion intensity. Defaults to 1.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"aoMap","description":"seMap The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"aoMapChannel","description":"Color channel of the main (primary) AO map to use. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"aoMapOffset","description":"Controls the 2D offset of the main (primary) AO map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"aoMapRotation","description":"Controls the 2D rotation (in degrees) of the main (primary) AO map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"aoMapTiling","description":"Controls the 2D tiling of the main (primary) AO map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"aoMapUv","description":"Main (primary) AO map UV channel","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"aoDetailMap","description":"The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"aoDetailMapChannel","description":"Color channels of the detail (secondary) AO map to use. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\" (default is \\"g\\").","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"aoDetailMapOffset","description":"Controls the 2D offset of the detail (secondary) AO map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"aoDetailMapRotation","description":"Controls the 2D rotation (in degrees) of the detail (secondary) AO map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"aoDetailMapTiling","description":"Controls the 2D tiling of the detail (secondary) AO map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"aoDetailMapUv","description":"Detail (secondary) AO map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"aoDetailMode","description":"Determines how the main (primary) and detail (secondary) AO maps are blended together. Can be: - DETAILMODE_MUL: Multiply together the primary and secondary colors. - DETAILMODE_ADD: Add together the primary and secondary colors. - DETAILMODE_SCREEN: Softer version of DETAILMODE_ADD. - DETAILMODE_OVERLAY: Multiplies or screens the colors, depending on the primary color. - DETAILMODE_MIN: Select whichever of the primary and secondary colors is darker, component-wise. - DETAILMODE_MAX: Select whichever of the primary and secondary colors is lighter, component-wise. Defaults to DETAILMODE_MUL.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"aoVertexColor","description":"Use mesh vertex colors for AO. If aoMap is set, it\'ll be multiplied by vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"aoVertexColorChannel","description":"Vertex color channels to use for AO. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"bumpiness","description":"The bumpiness of the material. This value scales the assigned main (primary) normal map. It should be normally between 0 (no bump mapping) and 1 (full bump mapping), but can be set to e.g. 2 to give even more pronounced bump effect.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearCoat","description":"Defines intensity of clearcoat layer from 0 to 1. Clearcoat layer is disabled when clearCoat == 0. Default value is 0 (disabled).","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearCoatBumpiness","description":"The bumpiness of the clearcoat layer. This value scales the assigned main clearcoat normal map. It should be normally between 0 (no bump mapping) and 1 (full bump mapping), but can be set to e.g. 2 to give even more pronounced bump effect.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearCoatGlossInvert","description":"Invert the clearcoat gloss component (default is false). Enabling this flag results in material treating the clear coat gloss members as roughness.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"clearCoatGlossMap","description":"in (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"clearCoatGlossMapChannel","description":"Color channel of the clearcoat gloss map to use. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"clearCoatGlossMapOffset","description":"Controls the 2D offset of the clearcoat gloss map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"clearCoatGlossMapRotation","description":"Controls the 2D rotation (in degrees) of the clear coat gloss map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearCoatGlossMapTiling","description":"Controls the 2D tiling of the clearcoat gloss map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"clearCoatGlossMapUv","description":"Clearcoat gloss map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearCoatGlossVertexColor","description":"Use mesh vertex colors for clearcoat glossiness. If clearCoatGlossMap is set, it\'ll be multiplied by vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"clearCoatGlossVertexColorChannel","description":"Vertex color channel to use for clearcoat glossiness. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"clearCoatGloss","description":"Defines the clearcoat glossiness of the clearcoat layer from 0 (rough) to 1 (mirror).","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearCoatMap","description":"he main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"clearCoatMapChannel","description":"Color channel of the clearcoat intensity map to use. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"clearCoatMapOffset","description":"Controls the 2D offset of the clearcoat intensity map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"clearCoatMapRotation","description":"Controls the 2D rotation (in degrees) of the clearcoat intensity map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearCoatMapTiling","description":"Controls the 2D tiling of the clearcoat intensity map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"clearCoatMapUv","description":"Clearcoat intensity map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearCoatNormalMap","description":"n (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"clearCoatNormalMapOffset","description":"Controls the 2D offset of the main clearcoat normal map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"clearCoatNormalMapRotation","description":"Controls the 2D rotation (in degrees) of the main clearcoat map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearCoatNormalMapTiling","description":"Controls the 2D tiling of the main clearcoat normal map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"clearCoatNormalMapUv","description":"Clearcoat normal map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearCoatVertexColor","description":"Use mesh vertex colors for clearcoat intensity. If clearCoatMap is set, it\'ll be multiplied by vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"clearCoatVertexColorChannel","description":"Vertex color channel to use for clearcoat intensity. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"cubeMap","description":"Map The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"cubeMapProjection","description":"The type of projection applied to the cubeMap property: - CUBEPROJ_NONE: The cube map is treated as if it is infinitely far away. - CUBEPROJ_BOX: Box-projection based on a world space axis-aligned bounding box. Defaults to CUBEPROJ_NONE.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"cubeMapProjectionBox","description":"The world space axis-aligned bounding box defining the box-projection used for the cubeMap property. Only used when cubeMapProjection is set to CUBEPROJ_BOX.","optional":true,"type":{"displayName":"BoundingBox","types":[{"name":"BoundingBox","url":"https://api.playcanvas.com/engine/classes/BoundingBox.html"}]}},{"name":"diffuse","description":"The diffuse color of the material. This color value is 3-component (RGB), where each component is between 0 and 1. Defines basic surface color (aka albedo).","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"diffuseDetailMap","description":"ain (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"diffuseDetailMapChannel","description":"Color channels of the detail (secondary) diffuse map to use. Can be \\"r\\", \\"g\\", \\"b\\", \\"a\\", \\"rgb\\" or any swizzled combination.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"diffuseDetailMapOffset","description":"Controls the 2D offset of the detail (secondary) diffuse map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"diffuseDetailMapRotation","description":"Controls the 2D rotation (in degrees) of the main (secondary) diffuse map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"diffuseDetailMapTiling","description":"Controls the 2D tiling of the detail (secondary) diffuse map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"diffuseDetailMapUv","description":"Detail (secondary) diffuse map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"diffuseDetailMode","description":"Determines how the main (primary) and detail (secondary) diffuse maps are blended together. Can be: - DETAILMODE_MUL: Multiply together the primary and secondary colors. - DETAILMODE_ADD: Add together the primary and secondary colors. - DETAILMODE_SCREEN: Softer version of DETAILMODE_ADD. - DETAILMODE_OVERLAY: Multiplies or screens the colors, depending on the primary color. - DETAILMODE_MIN: Select whichever of the primary and secondary colors is darker, component-wise. - DETAILMODE_MAX: Select whichever of the primary and secondary colors is lighter, component-wise. Defaults to DETAILMODE_MUL.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"diffuseMap","description":"The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"diffuseMapChannel","description":"Color channels of the main (primary) diffuse map to use. Can be \\"r\\", \\"g\\", \\"b\\", \\"a\\", \\"rgb\\" or any swizzled combination.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"diffuseMapOffset","description":"Controls the 2D offset of the main (primary) diffuse map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"diffuseMapRotation","description":"Controls the 2D rotation (in degrees) of the main (primary) diffuse map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"diffuseMapTiling","description":"Controls the 2D tiling of the main (primary) diffuse map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"diffuseMapUv","description":"Main (primary) diffuse map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"diffuseVertexColor","description":"Multiply diffuse by the mesh vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"diffuseVertexColorChannel","description":"Vertex color channels to use for diffuse. Can be \\"r\\", \\"g\\", \\"b\\", \\"a\\", \\"rgb\\" or any swizzled combination.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"emissive","description":"The emissive color of the material. This color value is 3-component (RGB), where each component is between 0 and 1.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"emissiveIntensity","description":"Emissive color multiplier.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"emissiveMap","description":"The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"emissiveMapChannel","description":"Color channels of the emissive map to use. Can be \\"r\\", \\"g\\", \\"b\\", \\"a\\", \\"rgb\\" or any swizzled combination.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"emissiveMapOffset","description":"Controls the 2D offset of the emissive map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"emissiveMapRotation","description":"Controls the 2D rotation (in degrees) of the emissive map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"emissiveMapTiling","description":"Controls the 2D tiling of the emissive map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"emissiveMapUv","description":"Emissive map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"emissiveVertexColor","description":"Use mesh vertex colors for emission. If emissiveMap or emissive are set, they\'ll be multiplied by vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"emissiveVertexColorChannel","description":"Vertex color channels to use for emission. Can be \\"r\\", \\"g\\", \\"b\\", \\"a\\", \\"rgb\\" or any swizzled combination.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"enableGGXSpecular","description":"Enables GGX specular. Also enables StandardMaterial#anisotropyIntensity  parameter to set material anisotropy.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"envAtlas","description":"ap The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"fresnelModel","description":"Defines the formula used for Fresnel effect. As a side-effect, enabling any Fresnel model changes the way diffuse and reflection components are combined. When Fresnel is off, legacy non energy-conserving combining is used. When it is on, combining behavior is energy-conserving. - FRESNEL_NONE: No Fresnel. - FRESNEL_SCHLICK: Schlick\'s approximation of Fresnel (recommended). Parameterized by specular color.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"gloss","description":"Defines the glossiness of the material from 0 (rough) to 1 (shiny).","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"glossInvert","description":"Invert the gloss component (default is false). Enabling this flag results in material treating the gloss members as roughness.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"glossMap","description":"ap The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"glossMapChannel","description":"Color channel of the gloss map to use. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"glossMapOffset","description":"Controls the 2D offset of the gloss map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"glossMapRotation","description":"Controls the 2D rotation (in degrees) of the gloss map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"glossMapTiling","description":"Controls the 2D tiling of the gloss map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"glossMapUv","description":"Gloss map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"glossVertexColor","description":"Use mesh vertex colors for glossiness. If glossMap is set, it\'ll be multiplied by vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"glossVertexColorChannel","description":"Vertex color channel to use for glossiness. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"heightMap","description":"p The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"heightMapChannel","description":"Color channel of the height map to use. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"heightMapFactor","description":"Height map multiplier. Affects the strength of the parallax effect.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"heightMapOffset","description":"Controls the 2D offset of the height map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"heightMapRotation","description":"Controls the 2D rotation (in degrees) of the height map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"heightMapTiling","description":"Controls the 2D tiling of the height map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"heightMapUv","description":"Height map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"lightMap","description":"ap The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"lightMapChannel","description":"Color channels of the lightmap to use. Can be \\"r\\", \\"g\\", \\"b\\", \\"a\\", \\"rgb\\" or any swizzled combination.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"lightMapOffset","description":"Controls the 2D offset of the lightmap. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"lightMapRotation","description":"Controls the 2D rotation (in degrees) of the lightmap.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"lightMapTiling","description":"Controls the 2D tiling of the lightmap.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"lightMapUv","description":"Lightmap UV channel","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"lightVertexColor","description":"Use baked vertex lighting. If lightMap is set, it\'ll be multiplied by vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"lightVertexColorChannel","description":"Vertex color channels to use for baked lighting. Can be \\"r\\", \\"g\\", \\"b\\", \\"a\\", \\"rgb\\" or any swizzled combination.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"metalness","description":"Defines how much the surface is metallic. From 0 (dielectric) to 1 (metal).","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"metalnessMap","description":"he main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"metalnessMapChannel","description":"Color channel of the metalness map to use. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"metalnessMapOffset","description":"Controls the 2D offset of the metalness map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"metalnessMapRotation","description":"Controls the 2D rotation (in degrees) of the metalness map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"metalnessMapTiling","description":"Controls the 2D tiling of the metalness map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"metalnessMapUv","description":"Metalness map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"metalnessVertexColor","description":"Use mesh vertex colors for metalness. If metalnessMap is set, it\'ll be multiplied by vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"metalnessVertexColorChannel","description":"Vertex color channel to use for metalness. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"normalDetailMap","description":"main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"normalDetailMapBumpiness","description":"The bumpiness of the material. This value scales the assigned detail (secondary) normal map. It should be normally between 0 (no bump mapping) and 1 (full bump mapping), but can be set to e.g. 2 to give even more pronounced bump effect.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"normalDetailMapOffset","description":"Controls the 2D offset of the detail (secondary) normal map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"normalDetailMapRotation","description":"Controls the 2D rotation (in degrees) of the detail (secondary) normal map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"normalDetailMapTiling","description":"Controls the 2D tiling of the detail (secondary) normal map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"normalDetailMapUv","description":"Detail (secondary) normal map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"normalMap","description":"p The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"normalMapOffset","description":"Controls the 2D offset of the main (primary) normal map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"normalMapRotation","description":"Controls the 2D rotation (in degrees) of the main (primary) normal map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"normalMapTiling","description":"Controls the 2D tiling of the main (primary) normal map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"normalMapUv","description":"Main (primary) normal map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"occludeDirect","description":"","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"occludeSpecular","description":"Uses ambient occlusion to darken specular/reflection. It\'s a hack, because real specular occlusion is view-dependent. However, it can be better than nothing. - SPECOCC_NONE: No specular occlusion - SPECOCC_AO: Use AO directly to occlude specular. - SPECOCC_GLOSSDEPENDENT: Modify AO based on material glossiness/view angle to occlude specular.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"occludeSpecularIntensity","description":"Controls visibility of specular occlusion.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"opacity","description":"The opacity of the material. This value can be between 0 and 1, where 0 is fully transparent and 1 is fully opaque. If you want the material to be semi-transparent you also need to set the Material#blendType  to BLEND_NORMAL, BLEND_ADDITIVE or any other mode. Also note that for most semi-transparent objects you want Material#depthWrite  to be false, otherwise they can fully occlude objects behind them.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"opacityDither","description":"Used to specify whether opacity is dithered, which allows transparency without alpha blending. Can be: - DITHER_NONE: Opacity dithering is disabled. - DITHER_BAYER8: Opacity is dithered using a Bayer 8 matrix. - DITHER_BLUENOISE: Opacity is dithered using a blue noise. - DITHER_IGNNOISE: Opacity is dithered using an interleaved gradient noise. Defaults to DITHER_NONE.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"opacityShadowDither","description":"","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"opacityFadesSpecular","description":"Used to specify whether specular and reflections are faded out using StandardMaterial#opacity . Default is true. When set to false use Material#alphaFade  to fade out materials.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"opacityMap","description":"The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"opacityMapChannel","description":"Color channel of the opacity map to use. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"opacityMapOffset","description":"Controls the 2D offset of the opacity map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"opacityMapRotation","description":"Controls the 2D rotation (in degrees) of the opacity map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"opacityMapTiling","description":"Controls the 2D tiling of the opacity map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"opacityMapUv","description":"Opacity map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"opacityVertexColor","description":"Use mesh vertex colors for opacity. If opacityMap is set, it\'ll be multiplied by vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"opacityVertexColorChannel","description":"Vertex color channels to use for opacity. Can be \\"r\\", \\"g\\", \\"b\\" or \\"a\\".","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"pixelSnap","description":"Align vertices to pixel coordinates when rendering. Useful for pixel perfect 2D graphics.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"reflectivity","description":"Environment map intensity.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"refraction","description":"Defines the visibility of refraction. Material can refract the same cube map as used for reflections.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"refractionIndex","description":"Defines the index of refraction, i.e. The amount of distortion. The value is calculated as (outerIor / surfaceIor), where inputs are measured indices of refraction, the one around the object and the one of its own surface. In most situations outer medium is air, so outerIor will be approximately 1. Then you only need to do (1.0 / surfaceIor).","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"dispersion","description":"The strength of the angular separation of colors (chromatic aberration) transmitting through a volume. Defaults to 0, which is equivalent to no dispersion.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"shadowCatcher","description":"When enabled, the material will output accumulated directional shadow value in linear space as the color.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"specular","description":"The specular color of the material. This color value is 3-component (RGB), where each component is between 0 and 1. Defines surface reflection/specular color. Affects specular intensity and tint.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"specularMap","description":"The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"specularMapChannel","description":"Color channels of the specular map to use. Can be \\"r\\", \\"g\\", \\"b\\", \\"a\\", \\"rgb\\" or any swizzled combination.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"specularMapOffset","description":"Controls the 2D offset of the specular map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"specularMapRotation","description":"Controls the 2D rotation (in degrees) of the specular map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"specularMapTiling","description":"Controls the 2D tiling of the specular map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"specularMapUv","description":"Specular map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"specularTint","description":"Multiply specular map and/or specular vertex color by the constant specular value.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"specularVertexColor","description":"Use mesh vertex colors for specular. If specularMap or are specularTint are set, they\'ll be multiplied by vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"specularVertexColorChannel","description":"Vertex color channels to use for specular. Can be \\"r\\", \\"g\\", \\"b\\", \\"a\\", \\"rgb\\" or any swizzled combination.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"specularityFactor","description":"The factor of specular intensity, used to weight the fresnel and specularity. Default is 1.0.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"specularityFactorMap","description":"(primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"specularityFactorMapChannel","description":"The channel used by the specularity factor texture to sample from (default is \'a\').","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"specularityFactorMapOffset","description":"Controls the 2D offset of the specularity factor map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"specularityFactorMapRotation","description":"Controls the 2D rotation (in degrees) of the specularity factor map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"specularityFactorMapTiling","description":"Controls the 2D tiling of the specularity factor map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"specularityFactorMapUv","description":"Specularity factor map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"useSheen","description":"Toggle sheen specular effect on/off.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"sheen","description":"The specular color of the sheen (fabric) microfiber structure. This color value is 3-component (RGB), where each component is between 0 and 1.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"sheenMap","description":"ap The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"sheenMapChannel","description":"Color channels of the sheen map to use. Can be \\"r\\", \\"g\\", \\"b\\", \\"a\\", \\"rgb\\" or any swizzled combination.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"sheenMapOffset","description":"Controls the 2D offset of the sheen map. Each component is between 0 and 1.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"sheenMapRotation","description":"Controls the 2D rotation (in degrees) of the sheen map.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"sheenMapTiling","description":"Controls the 2D tiling of the sheen map.","optional":true,"type":{"displayName":"[number, number]","types":[{"name":"[number, number]","url":null}]}},{"name":"sheenMapUv","description":"Sheen map UV channel.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"sheenVertexColor","description":"Use mesh vertex colors for sheen. If sheen map or sheen tint are set, they\'ll be multiplied by vertex colors.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"sheenVertexColorChannel","description":"","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"sphereMap","description":"p The main (primary) diffuse map of the material (default is null).","optional":true,"type":{"displayName":"Texture | null","types":[{"name":"Texture","url":"https://api.playcanvas.com/engine/classes/Texture.html"}]}},{"name":"twoSidedLighting","description":"Calculate proper normals (and therefore lighting) on backfaces.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"useFog","description":"Apply fogging (as configured in scene settings)","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"useTonemap","description":"Apply tonemapping (as configured in Scene#rendering  or CameraComponent.rendering ). Defaults to true.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"useLighting","description":"Apply lighting","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"useMetalness","description":"Use metalness properties instead of specular. When enabled, diffuse colors also affect specular instead of the dedicated specular map. This can be used as alternative to specular color to save space. With metalness == 0, the pixel is assumed to be dielectric, and diffuse color is used as normal. With metalness == 1, the pixel is fully metallic, and diffuse color is used as specular color instead.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"useMetalnessSpecularColor","description":"When metalness is enabled, use the specular map to apply color tint to specular reflections. at direct angles.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"useSkybox","description":"Apply scene skybox as prefiltered environment map","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"userId","description":"A unique id the user can assign to the material. The engine internally does not use this for\\nanything, and the user can assign a value to this id for any purpose they like. Defaults to\\nan empty string.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"id","description":"","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"parameters","description":"","optional":true,"type":{"displayName":"{}","types":[{"name":"__type","url":null}]}},{"name":"alphaTest","description":"The alpha test reference value to control which fragments are written to the currently\\nactive render target based on alpha value. All fragments with an alpha value of less than\\nthe alphaTest reference value will be discarded. alphaTest defaults to 0 (all fragments\\npass).","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"alphaToCoverage","description":"Enables or disables alpha to coverage (WebGL2 only). When enabled, and if hardware\\nanti-aliasing is on, limited order-independent transparency can be achieved. Quality depends\\non the number of MSAA samples of the current render target. It can nicely soften edges of\\notherwise sharp alpha cutouts, but isn\'t recommended for large area semi-transparent\\nsurfaces. Note, that you don\'t need to enable blending to make alpha to coverage work. It\\nwill work without it, just like alphaTest.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"cull","description":"Controls how triangles are culled based on their face direction with respect to the\\nviewpoint. Can be:\\n\\n- CULLFACE_NONE: Do not cull triangles based on face direction.\\n- CULLFACE_BACK: Cull the back faces of triangles (do not render triangles facing\\naway from the view point).\\n- CULLFACE_FRONT: Cull the front faces of triangles (do not render triangles facing\\ntowards the view point).\\n\\nDefaults to CULLFACE_BACK.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"stencilFront","description":"Stencil parameters for front faces (default is null).","optional":true,"type":{"displayName":"StencilParameters | null","types":[{"name":"StencilParameters","url":"https://api.playcanvas.com/engine/classes/StencilParameters.html"}]}},{"name":"stencilBack","description":"Stencil parameters for back faces (default is null).","optional":true,"type":{"displayName":"StencilParameters | null","types":[{"name":"StencilParameters","url":"https://api.playcanvas.com/engine/classes/StencilParameters.html"}]}},{"name":"shaderChunksVersion","description":"Sets the version of the shader chunks.\\n\\nThis should be a string containing the current engine major and minor version (e.g., \'2.8\'\\nfor engine v2.8.1) and ensures compatibility with the current engine version. When providing\\ncustom shader chunks, set this to the latest supported version. If a future engine release no\\nlonger supports the specified version, a warning will be issued. In that case, update your\\nshader chunks to match the new format and set this to the latest version accordingly.\\nReturns the version of the shader chunks.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"chunks","description":"","optional":true,"type":{"displayName":"{}","types":[{"name":"__type","url":null}]}},{"name":"depthBias","description":"Sets the offset for the output depth buffer value. Useful for decals to prevent z-fighting.\\nTypically a small negative value (-0.1) is used to render the mesh slightly closer to the\\ncamera.\\nGets the offset for the output depth buffer value.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"slopeDepthBias","description":"Sets the offset for the output depth buffer value based on the slope of the triangle\\nrelative to the camera.\\nGets the offset for the output depth buffer value based on the slope of the triangle\\nrelative to the camera.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"dirty","description":"","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"redWrite","description":"Sets whether the red channel is written to the color buffer. If true, the red component of\\nfragments generated by the shader of this material is written to the color buffer of the\\ncurrently active render target. If false, the red component will not be written. Defaults to\\ntrue.\\nGets whether the red channel is written to the color buffer.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"greenWrite","description":"Sets whether the green channel is written to the color buffer. If true, the red component of\\nfragments generated by the shader of this material is written to the color buffer of the\\ncurrently active render target. If false, the green component will not be written. Defaults\\nto true.\\nGets whether the green channel is written to the color buffer.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"blueWrite","description":"Sets whether the blue channel is written to the color buffer. If true, the red component of\\nfragments generated by the shader of this material is written to the color buffer of the\\ncurrently active render target. If false, the blue component will not be written. Defaults\\nto true.\\nGets whether the blue channel is written to the color buffer.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"alphaWrite","description":"Sets whether the alpha channel is written to the color buffer. If true, the red component of\\nfragments generated by the shader of this material is written to the color buffer of the\\ncurrently active render target. If false, the alpha component will not be written. Defaults\\nto true.\\nGets whether the alpha channel is written to the color buffer.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"blendState","description":"Sets the blend state for this material. Controls how fragment shader outputs are blended\\nwhen being written to the currently active render target. This overwrites blending type set\\nusing Material#blendType , and offers more control over blending.\\nGets the blend state for this material.","optional":true,"type":{"displayName":"BlendState","types":[{"name":"BlendState","url":"https://api.playcanvas.com/engine/classes/BlendState.html"}]}},{"name":"blendType","description":"Sets the blend mode for this material. Controls how fragment shader outputs are blended when\\nbeing written to the currently active render target. Can be:\\n\\n- BLEND_SUBTRACTIVE: Subtract the color of the source fragment from the destination\\nfragment and write the result to the frame buffer.\\n- BLEND_ADDITIVE: Add the color of the source fragment to the destination fragment\\nand write the result to the frame buffer.\\n- BLEND_NORMAL: Enable simple translucency for materials such as glass. This is\\nequivalent to enabling a source blend mode of BLENDMODE_SRC_ALPHA and a destination\\nblend mode of BLENDMODE_ONE_MINUS_SRC_ALPHA.\\n- BLEND_NONE: Disable blending.\\n- BLEND_PREMULTIPLIED: Similar to BLEND_NORMAL expect the source fragment is\\nassumed to have already been multiplied by the source alpha value.\\n- BLEND_MULTIPLICATIVE: Multiply the color of the source fragment by the color of the\\ndestination fragment and write the result to the frame buffer.\\n- BLEND_ADDITIVEALPHA: Same as BLEND_ADDITIVE except the source RGB is\\nmultiplied by the source alpha.\\n- BLEND_MULTIPLICATIVE2X: Multiplies colors and doubles the result.\\n- BLEND_SCREEN: Softer version of additive.\\n- BLEND_MIN: Minimum color.\\n- BLEND_MAX: Maximum color.\\n\\nDefaults to BLEND_NONE.\\nGets the blend mode for this material.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"depthState","description":"Sets the depth state. Note that this can also be done by using Material#depthTest ,\\nMaterial#depthFunc  and Material#depthWrite .\\nGets the depth state.","optional":true,"type":{"displayName":"DepthState","types":[{"name":"DepthState","url":"https://api.playcanvas.com/engine/classes/DepthState.html"}]}},{"name":"depthTest","description":"Sets whether depth testing is enabled. If true, fragments generated by the shader of this\\nmaterial are only written to the current render target if they pass the depth test. If\\nfalse, fragments generated by the shader of this material are written to the current render\\ntarget regardless of what is in the depth buffer. Defaults to true.\\nGets whether depth testing is enabled.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"depthFunc","description":"Sets the depth test function. Controls how the depth of new fragments is compared against\\nthe current depth contained in the depth buffer. Can be:\\n\\n- FUNC_NEVER: don\'t draw\\n- FUNC_LESS: draw if new depth < depth buffer\\n- FUNC_EQUAL: draw if new depth == depth buffer\\n- FUNC_LESSEQUAL: draw if new depth <= depth buffer\\n- FUNC_GREATER: draw if new depth > depth buffer\\n- FUNC_NOTEQUAL: draw if new depth != depth buffer\\n- FUNC_GREATEREQUAL: draw if new depth >= depth buffer\\n- FUNC_ALWAYS: always draw\\n\\nDefaults to FUNC_LESSEQUAL.\\nGets the depth test function.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"depthWrite","description":"Sets whether depth writing is enabled. If true, fragments generated by the shader of this\\nmaterial write a depth value to the depth buffer of the currently active render target. If\\nfalse, no depth value is written. Defaults to true.\\nGets whether depth writing is enabled.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}}]}]'})})]}),"\n",(0,r.jsx)(a.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(a.p,{children:["The hooks will return a ",(0,r.jsx)(a.a,{href:"https://api.playcanvas.com/engine/classes/StandardMaterial.html",children:(0,r.jsx)(a.code,{children:"StandardMaterial"})})," instance which can be applied to a ",(0,r.jsx)(a.a,{href:"../../render",children:(0,r.jsx)(a.code,{children:"Render"})})," component."]}),"\n",(0,r.jsx)(n,{data:'[{"name":"default","description":"","entries":[{"name":"material","description":"The PlayCanvas StandardMaterial instance","optional":false,"type":{"displayName":"StandardMaterial","types":[{"name":"StandardMaterial","url":"https://api.playcanvas.com/engine/classes/StandardMaterial.html"}]}}]}]'}),"\n",(0,r.jsx)(a.h2,{id:"further-examples",children:"Further examples"}),"\n",(0,r.jsx)(a.h3,{id:"advanced-properties",children:"Advanced Properties"}),"\n",(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.code,{children:"StandardMaterial"})," accepts many different properties which can be found ",(0,r.jsx)(a.a,{href:"https://api.playcanvas.com/engine/classes/StandardMaterial.html",children:"here"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-jsx",metastring:"copy",children:"import { useMaterial } from '@playcanvas/react/hooks'\n\nfunction AdvancedMaterial() {\n  const material = useMaterial({\n    diffuse: 'purple',\n    opacity: 0.9,\n    metalness: 0.3,\n    roughness: 0.4,\n    emissive: 'yellow',\n    emissiveIntensity: 0.2,\n    specular: 'white',\n    shininess: 50,\n    reflectivity: 0.8,\n    clearCoat: 0.5,\n    clearCoatRoughness: 0.1\n  })\n  \n  return <Render type=\"box\" material={material} />\n}\n"})}),"\n",(0,r.jsx)(a.h3,{id:"material-with-textures",children:"Material with Textures"}),"\n",(0,r.jsxs)(a.p,{children:["You can use textures with the material by loading them with the ",(0,r.jsx)(a.a,{href:"../use-asset#usetexture",children:(0,r.jsx)(a.code,{children:"useTexture"})})," hook."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-jsx",metastring:"copy",children:"import { useMaterial } from '@playcanvas/react/hooks'\nimport { useTexture } from '@playcanvas/react/hooks'\n\nfunction TexturedMaterialExample() {\n  const { asset: diffuseMap } = useTexture('diffuse.jpg')\n  const { asset: normalMap } = useTexture('normal.jpg')\n  const { asset: roughnessMap } = useTexture('roughness.jpg')\n  \n  const material = useMaterial({\n    diffuseMap: diffuseMap?.resource,\n    normalMap: normalMap?.resource,\n    roughnessMap: roughnessMap?.resource,\n    diffuse: 'white',\n    metalness: 0.5,\n    roughness: 0.5\n  })\n  \n  return <Render type=\"box\" material={material} />\n}\n"})}),"\n",(0,r.jsx)(a.h3,{id:"material-sharing",children:"Material Sharing"}),"\n",(0,r.jsx)(a.p,{children:"You can easily share materials between multiple render components:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-jsx",metastring:"copy",children:'import { useMaterial } from \'@playcanvas/react/hooks\'\n\nfunction SharedMaterial() {\n  const material = useMaterial({\n    diffuse: \'orange\',\n    metalness: 0.7,\n    roughness: 0.3\n  })\n  \n  return (\n    <div>\n      <Render type="box" material={material} />\n      <Render type="sphere" material={material} />\n      <Render type="cylinder" material={material} />\n    </div>\n  )\n}\n'})}),"\n",(0,r.jsx)(a.h2,{id:"related",children:"Related"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.a,{href:"../use-asset#usetexture",children:"useTexture"})," - Load texture assets"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.a,{href:"../../render",children:"Render Component"})," - Use materials with render components"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.a,{href:"https://api.playcanvas.com/engine/classes/StandardMaterial.html",children:"StandardMaterial API"})," - PlayCanvas material documentation"]}),"\n"]})]})}function x(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(v,{...e})}):v(e)}function N(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},24421:(e,a,t)=>{t.d(a,{A:()=>m});var n=t(18676),r=t(19748),l=t(83395),s=t(93953),i=t(27351),o=t(8939),p=t(96540),u=t(74848);const m=e=>{const{width:a=2,depth:t=2,intensity:m=.75}=e,d=(0,p.useMemo)(()=>new s.e(a,1,t),[a,t]);return(0,u.jsxs)(n.w,{position:[0,.001,0],children:[(0,u.jsx)(r.v,{type:"directional",castShadows:!0,normalOffsetBias:0,shadowBias:0,shadowDistance:16,shadowResolution:1024,shadowType:i.au1,shadowUpdateMode:i.M5l,vsmBlurSize:8,shadowIntensity:m,intensity:0}),(0,u.jsx)(l.e,{script:o.X,intensity:m,scale:d})]})}},49801:(e,a,t)=>{t.d(a,{A:()=>i});var n=t(18676),r=t(83395),l=t(78692),s=t(74848);const i=({...e})=>(0,s.jsx)(n.w,{scale:[1e3,1,1e3],children:(0,s.jsx)(r.e,{script:l.x,...e})})},53558:(e,a,t)=>{t.d(a,{A:()=>g});var n=t(96540),r=t(68869),l=t(8939),s=t(78692),i=t(14007),o=t(25303),p=t(34363),u=t(53512),m=t(49801),d=t(24421),c=t(85593),h=t(83395),y=t(83171),f=t(74848);const b=e=>(0,f.jsx)(h.e,{script:y.d,...e}),g={React:n,...n,...i,...o,...p,...u,Grid:m.A,ShadowCatcher:d.A,GridScript:s.x,ShadowCatcherScript:l.X,StaticPostEffects:c.A,AutoRotate:b,CameraControls:r.a}},85593:(e,a,t)=>{t.d(a,{A:()=>s});var n=t(83395),r=t(15817),l=t(74848);const s=e=>{const a={lighting:{exposure:1.21,skyBoxIntensity:1.02},rendering:{renderFormat:18,renderTargetScale:1,sharpness:0,samples:4,toneMapping:4,fog:"none",fogColor:{r:0,g:0,b:0,a:1},fogRange:[0,100],fogDensity:.01,renderFormatFallback0:12,renderFormatFallback1:14,sceneColorMap:!1,sceneDepthMap:!1,fogStart:0,fogEnd:100},bloom:{enabled:!0,intensity:.1,lastMipLevel:1},grading:{enabled:!0,brightness:.83,contrast:1.1,saturation:1.2,tint:{r:1,g:.9333333333333333,b:.8666666666666667,a:1}},vignette:{enabled:!0,intensity:1,inner:.25,outer:1.52,curvature:.78},fringing:{enabled:!0,intensity:10},...e};return(0,l.jsx)(n.e,{script:r.P,...a})}}}]);