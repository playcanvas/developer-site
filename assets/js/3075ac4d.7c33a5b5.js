"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[56858],{11470:(e,n,t)=>{t.d(n,{A:()=>x});var s=t(96540),r=t(34164),a=t(17559),i=t(23104),o=t(56347),l=t(205),c=t(57485),d=t(31682),h=t(70679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:s}})=>({value:e,label:n,attributes:t,default:s}))}(t);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function y({value:e,tabValues:n}){return n.some(n=>n.value===e)}function b({queryString:e=!1,groupId:n}){const t=(0,o.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(r),(0,s.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})},[r,t])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=p(e),[i,o]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!y({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:a})),[c,d]=b({queryString:t,groupId:r}),[u,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,r]=(0,h.Dv)(n);return[t,(0,s.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),v=(()=>{const e=c??u;return y({value:e,tabValues:a})?e:null})();(0,l.A)(()=>{v&&o(v)},[v]);return{selectedValue:i,selectValue:(0,s.useCallback)(e=>{if(!y({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),f(e)},[d,f,a]),tabValues:a}}var v=t(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var k=t(74848);function w({className:e,block:n,selectedValue:t,selectValue:s,tabValues:a}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),c=e=>{const n=e.currentTarget,r=o.indexOf(n),i=a[r].value;i!==t&&(l(n),s(i))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,k.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:s})=>(0,k.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...s,className:(0,r.A)("tabs__item",m.tabItem,s?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function g({lazy:e,children:n,selectedValue:t}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===t);return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,k.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function j(e){const n=f(e);return(0,k.jsxs)("div",{className:(0,r.A)(a.G.tabs.container,"tabs-container",m.tabList),children:[(0,k.jsx)(w,{...n,...e}),(0,k.jsx)(g,{...n,...e})]})}function x(e){const n=(0,v.A)();return(0,k.jsx)(j,{...e,children:u(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var s=t(34164);const r={tabItem:"tabItem_Ymn6"};var a=t(74848);function i({children:e,hidden:n,className:t}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,t),hidden:n,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(96540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},68198:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"tutorials/keyboard-input","title":"Basic Keyboard Input","description":"Click to focus, then press left arrow, right arrow and spacebar to rotate the cube. Press and release the \'a\' key to change color.","source":"@site/docs/tutorials/keyboard-input.md","sourceDirName":"tutorials","slug":"/tutorials/keyboard-input","permalink":"/tutorials/keyboard-input","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/keyboard-input.md","tags":[{"inline":true,"label":"input","permalink":"/tags/input"}],"version":"current","frontMatter":{"title":"Basic Keyboard Input","tags":["input"],"thumb":"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/405804/513097-image-75.jpg"},"sidebar":"tutorialsSidebar","previous":{"title":"Making a Simple Game - Part 2","permalink":"/tutorials/keepyup-part-two"},"next":{"title":"Light Cookies","permalink":"/tutorials/light-cookies"}}');var r=t(74848),a=t(28453),i=t(11470),o=t(19365);const l={title:"Basic Keyboard Input",tags:["input"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/405804/513097-image-75.jpg"},c=void 0,d={},h=[{value:"<code>isPressed</code> vs <code>wasPressed</code>",id:"ispressed-vs-waspressed",level:2},{value:"<code>isPressed(key)</code>",id:"ispressedkey",level:3},{value:"<code>wasPressed(key)</code>",id:"waspressedkey",level:3},{value:"Events",id:"events",level:2},{value:"Key Codes",id:"key-codes",level:2},{value:"Try it out",id:"try-it-out",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",{className:"iframe-container",children:(0,r.jsx)("iframe",{src:"https://playcanv.as/p/rFZGQWCi/?overlay=false",title:"Basic Keyboard Input",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["Click to focus, then press ",(0,r.jsx)(n.code,{children:"left arrow"}),", ",(0,r.jsx)(n.code,{children:"right arrow"})," and ",(0,r.jsx)(n.code,{children:"spacebar"})," to rotate the cube. Press and release the 'a' key to change color."]})}),"\n",(0,r.jsxs)(n.p,{children:["Keyboard handling in the PlayCanvas engine is provided by the ",(0,r.jsx)(n.code,{children:"pc.Keyboard"})," object. The Keyboard object provides a simple interface\nfor common keyboard operations like checking if a key is pressed or held down. It also takes away the various cross-browser problems with\nhandling keycodes and charcodes."]}),"\n",(0,r.jsxs)(n.p,{children:["Take a look at the keyboard input Scene in the ",(0,r.jsx)(n.a,{href:"https://playcanvas.com/project/405804/overview/tutorial-basic-keyboard-input",children:"tutorials project"}),". Here is the code for the tutorial:"]}),"\n","\n",(0,r.jsxs)(i.A,{defaultValue:"classic",groupId:"script-code",children:[(0,r.jsx)(o.A,{value:"esm",label:"ESM",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { Script, KEY_LEFT, KEY_RIGHT, KEY_SPACE, KEY_A } from \'playcanvas\';\n\nexport class KeyboardHandler extends Script {\n    static scriptName = "keyboardHandler";\n\n    /**\n     * @attribute\n     * @title Red Material\n     * @type {Asset}\n     * @resource material\n     */\n    redMaterial = null;\n\n    /**\n     * @attribute\n     * @title White Material\n     * @type {Asset}\n     * @resource material\n     */\n    whiteMaterial = null;\n\n    // initialize code called once per entity\n    initialize() {\n        // Use on() to listen for events on the keyboard device.\n        // Arguments are:\n        // 1) The event name to listen for\n        // 2) The callback function to call when the event fires\n        // 3) (optional) The value to use for \'this\' in the callback function\n\n        this.app.keyboard.on("keydown", this.onKeyDown, this);\n        this.app.keyboard.on("keyup", this.onKeyUp, this);\n    }\n\n    // update code called every frame\n    update(dt) {\n        /*\n         * Notice in the demo that pressing and holding the arrow keys doesn\'t\n         * make the block spin. wasPressed() is used to detect a\n         * keypress that occurred since the last frame and will only be\n         * called once even if the key is held down.\n         */\n        var angle = 0;\n        if (this.app.keyboard.wasPressed(KEY_LEFT)) {\n            angle = -5;\n        } else if (this.app.keyboard.wasPressed(KEY_RIGHT)) {\n            angle = 5;\n        }\n\n        /*\n         * Notice that pressing and holding the space bar makes the block\n         * continuously spin. isPressed() is used to detected if a\n         * key is down right now. So it will be true every frame as long as\n         * the key is still pressed.\n         */\n        if (this.app.keyboard.isPressed(KEY_SPACE)) {\n            angle = 1;\n        }\n\n        // Update the spinning cube\n        this.entity.rotateLocal(0, angle, 0);\n    }\n\n    /*\n     * Event handler called when key is pressed\n     */\n    onKeyDown(event) {\n        // Check event.key to detect which key has been pressed\n        if (event.key === KEY_A && this.redMaterial) {\n            this.entity.render.meshInstances[0].material = this.redMaterial.resource;\n        }\n\n        // When the space bar is pressed this scrolls the window.\n        // Calling preventDefault() on the original browser event stops this.\n        event.preventDefault();\n    }\n\n    /*\n     * Event handler called when key is released\n     */\n    onKeyUp(event) {\n        // Check event.key to detect which key has been pressed\n        if (event.key === KEY_A && this.whiteMaterial) {\n            this.entity.render.meshInstances[0].material = this.whiteMaterial.resource;\n        }\n    }\n}\n'})})}),(0,r.jsx)(o.A,{value:"classic",label:"Classic",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"var KeyboardHandler = pc.createScript('keyboardHandler');\n\nKeyboardHandler.attributes.add('redMaterial', {\n    type: 'asset',\n    assetType: 'material'\n});\n\nKeyboardHandler.attributes.add('whiteMaterial', {\n    type: 'asset',\n    assetType: 'material'\n});\n\n// initialize code called once per entity\nKeyboardHandler.prototype.initialize = function() {\n    // Use on() to listen for events on the keyboard device.\n    // Arguments are:\n    // 1) The event name to listen for\n    // 2) The callback function to call when the event fires\n    // 3) (optional) The value to use for 'this' in the callback function\n\n    this.app.keyboard.on(pc.EVENT_KEYDOWN, this.onKeyDown, this);\n    this.app.keyboard.on(pc.EVENT_KEYUP, this.onKeyUp, this);\n};\n\n// update code called every frame\nKeyboardHandler.prototype.update = function(dt) {\n    /*\n     * Notice in the demo that pressing and holding the arrow keys doesn't\n     * make the block spin. wasPressed() is used to detect a\n     * keypress that occurred since the last frame and will only be\n     * called once even if the key is held down.\n     */\n    var angle = 0;\n    if (this.app.keyboard.wasPressed(pc.KEY_LEFT)) {\n        angle = -5;\n    } else if (this.app.keyboard.wasPressed(pc.KEY_RIGHT)) {\n        angle = 5;\n    }\n\n    /*\n     * Notice that pressing and holding the space bar makes the block\n     * continuously spin. isPressed() is used to detected if a\n     * key is down right now. So it will be true every frame as long as\n     * the key is still pressed.\n     */\n    if (this.app.keyboard.isPressed(pc.KEY_SPACE)) {\n        angle = 1;\n    }\n\n    // Update the spinning cube\n    this.entity.rotateLocal(0, angle, 0);\n};\n\n/*\n* Event handler called when key is pressed\n*/\nKeyboardHandler.prototype.onKeyDown = function (event) {\n    // Check event.key to detect which key has been pressed\n    if (event.key === pc.KEY_A && this.redMaterial) {\n        this.entity.render.meshInstances[0].material = this.redMaterial.resource;\n    }\n\n    // When the space bar is pressed this scrolls the window.\n    // Calling preventDefault() on the original browser event stops this.\n    event.preventDefault();\n};\n\n/*\n* Event handler called when key is released\n*/\nKeyboardHandler.prototype.onKeyUp = function (event) {\n    // Check event.key to detect which key has been pressed\n    if (event.key === pc.KEY_A && this.whiteMaterial) {\n        this.entity.render.meshInstances[0].material = this.whiteMaterial.resource;\n    }\n};\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["There are two ways of detecting keyboard input. The first is done in the update method of your scripts. Use ",(0,r.jsx)(n.code,{children:"isPressed()"})," and ",(0,r.jsx)(n.code,{children:"wasPressed()"})," and check whether a key is currently pressed or has just been pressed. The second uses events to respond to a key press or release as it happens."]}),"\n",(0,r.jsxs)(n.h2,{id:"ispressed-vs-waspressed",children:[(0,r.jsx)(n.code,{children:"isPressed"})," vs ",(0,r.jsx)(n.code,{children:"wasPressed"})]}),"\n",(0,r.jsxs)(n.p,{children:["In the demo above you can see the difference in behavior between ",(0,r.jsx)(n.code,{children:"isPressed()"})," and ",(0,r.jsx)(n.code,{children:"wasPressed()"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When you press and hold the left or right arrow keys the cube will rotate by 5\xb0, but it will only rotate once. This is because ",(0,r.jsx)(n.code,{children:"wasPressed()"})," only returns true for the frame immediately after the key was pressed."]}),"\n",(0,r.jsxs)(n.p,{children:["If you press and hold the spacebar you will see that the cube rotates continuously by 1\xb0 per frame. This is because ",(0,r.jsx)(n.code,{children:"isPressed()"})," returns true for every frame in which the key is pressed."]}),"\n",(0,r.jsx)(n.h3,{id:"ispressedkey",children:(0,r.jsx)(n.code,{children:"isPressed(key)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"isPressed(key)"})," checks to see if ",(0,r.jsx)(n.code,{children:"key"})," is currently pressed and returns true if it is. It will return true for every frame while the key is pressed."]}),"\n",(0,r.jsx)(n.h3,{id:"waspressedkey",children:(0,r.jsx)(n.code,{children:"wasPressed(key)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"wasPressed(key)"})," checks to see if ",(0,r.jsx)(n.code,{children:"key"})," was pressed ",(0,r.jsx)(n.em,{children:"since the last frame"}),". ",(0,r.jsx)(n.code,{children:"wasPressed()"})," will only return true once for a single key press."]}),"\n",(0,r.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,r.jsx)(n.p,{children:"The second method of handling key presses is to listen for events. Two keyboard events are supported on the Keyboard device:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"pc.EVENT_KEYDOWN"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"pc.EVENT_KEYUP"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/user-manual/glossary#dom",children:"DOM"})," keyboard events are implemented differently on different browsers so the PlayCanvas Engine provides events on the ",(0,r.jsx)(n.code,{children:"pc.Keyboard"})," object so you can use the same code everywhere. When the keyboard events are fired the event handler is passed a ",(0,r.jsx)(n.code,{children:"pc.KeyboardEvent"})," object which contains the key code of the key that was pressed on released."]}),"\n",(0,r.jsxs)(n.p,{children:["Notice we are also passing a third argument to on(), which is ",(0,r.jsx)(n.code,{children:"this"})," or the Script Instance itself. The third argument to on() is used as ",(0,r.jsx)(n.code,{children:"this"})," in the event callbacks, so we need to pass it in here, otherwise it won't be set to the correct object."]}),"\n",(0,r.jsx)(n.h2,{id:"key-codes",children:"Key Codes"}),"\n",(0,r.jsxs)(n.p,{children:["Identifying which key is pressed is done using key codes. These are numerical values which match up to a key on the keyboard. For example, pc.KEY_A is the ",(0,r.jsx)(n.code,{children:"A"})," key, pc.KEY_LEFT is the left arrow key."]}),"\n",(0,r.jsxs)(n.p,{children:["Note, you should always use the enumeration ",(0,r.jsx)(n.code,{children:"pc.KEY_*"})," rather than using numerical values. As the actual value of these constants may change in the future."]}),"\n",(0,r.jsx)(n.h2,{id:"try-it-out",children:"Try it out"}),"\n",(0,r.jsxs)(n.p,{children:["Try it out in full screen ",(0,r.jsx)(n.a,{href:"https://playcanv.as/p/rFZGQWCi/",children:"here"})," or at the top of the page. Compare tapping and holding the arrow keys, and tapping and holding the spacebar."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);