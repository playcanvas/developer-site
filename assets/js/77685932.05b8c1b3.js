"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[7834],{77644:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"tutorials/custom-posteffect","title":"Custom Post Effects","description":"In this tutorial, you\'ll learn how to create a custom watercolor post effect in PlayCanvas that applies a softening filter and a paper grain texture to your scene. By the end of this guide, you\'ll have a visually appealing watercolor effect that you can apply to any 3D scene.","source":"@site/docs/tutorials/custom-posteffect.md","sourceDirName":"tutorials","slug":"/tutorials/custom-posteffect","permalink":"/tutorials/custom-posteffect","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/custom-posteffect.md","tags":[{"inline":true,"label":"posteffects","permalink":"/tags/posteffects"}],"version":"current","frontMatter":{"title":"Custom Post Effects","tags":["posteffects"],"thumb":"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/406045/ABC61F-image-75.jpg"},"sidebar":"tutorialsSidebar","previous":{"title":"Creating Rigid Bodies in Code","permalink":"/tutorials/creating-rigid-bodies-in-code"},"next":{"title":"Custom Shaders","permalink":"/tutorials/custom-shaders"}}');var a=r(74848),o=r(28453);const s={title:"Custom Post Effects",tags:["posteffects"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/406045/ABC61F-image-75.jpg"},i=void 0,c={},l=[{value:"Step 1: Setting Up Your Shaders",id:"step-1-setting-up-your-shaders",level:2},{value:"Vertex Shader (watercolor.vert)",id:"vertex-shader-watercolorvert",level:3},{value:"Fragment Shader (watercolor.frag)",id:"fragment-shader-watercolorfrag",level:3},{value:"Step 2: Creating the Watercolor Effect Script",id:"step-2-creating-the-watercolor-effect-script",level:2},{value:"Step 3: Applying the Effect to a Camera",id:"step-3-applying-the-effect-to-a-camera",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"In this tutorial, you'll learn how to create a custom watercolor post effect in PlayCanvas that applies a softening filter and a paper grain texture to your scene. By the end of this guide, you'll have a visually appealing watercolor effect that you can apply to any 3D scene."}),"\n",(0,a.jsx)("div",{className:"iframe-container",children:(0,a.jsx)("iframe",{src:"https://playcanv.as/p/3je0YP0q/",title:"Custom Post Effects",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,a.jsx)(t.h2,{id:"step-1-setting-up-your-shaders",children:"Step 1: Setting Up Your Shaders"}),"\n",(0,a.jsx)(t.p,{children:"First, we need to create the shaders that will define our watercolor effect. You'll create two shader assets: a vertex shader and a fragment shader."}),"\n",(0,a.jsx)(t.h3,{id:"vertex-shader-watercolorvert",children:"Vertex Shader (watercolor.vert)"}),"\n",(0,a.jsxs)(t.p,{children:["The vertex shader will pass the UV coordinates from the vertices to the fragment shader. Create a new shader asset in PlayCanvas and name it ",(0,a.jsx)(t.code,{children:"watercolor.vert"}),". Then, copy and paste the following code:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-glsl",metastring:'title="watercolor.vert"',children:"attribute vec2 aPosition;\n\nvarying vec2 vUv0;\n\nvoid main(void)\n{\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    vUv0 = (aPosition.xy + 1.0) * 0.5;\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"fragment-shader-watercolorfrag",children:"Fragment Shader (watercolor.frag)"}),"\n",(0,a.jsxs)(t.p,{children:["The fragment shader will apply the watercolor effect using the color buffer texture and UV coordinates. Create another shader asset named ",(0,a.jsx)(t.code,{children:"watercolor.frag"})," and insert the following code:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-glsl",metastring:'title="watercolor.frag"',children:"precision mediump float;\n\n// The texture containing our rendered scene\nuniform sampler2D uColorBuffer;\n\n// The UV coordinates passed from the vertex shader\nvarying vec2 vUv0;\n\n// Function to create a simple paper grain texture\nfloat paperTexture(vec2 uv) {\n    // Create a pseudo-random pattern based on UV coordinates\n    float grain = fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n    // Modulate the grain intensity\n    grain = smoothstep(0.3, 0.7, grain);\n    return grain;\n}\n\nvoid main(void) {\n    // Sample the color from the scene texture at this fragment's UV coordinates\n    vec4 sceneColor = texture2D(uColorBuffer, vUv0);\n\n    // Apply a softening filter to mimic watercolor fluidity\n    // Blend with neighboring pixels (basic blur)\n    vec4 blurColor = vec4(0.0);\n    float offset = 0.003; // Offset for neighboring pixels; adjust for blur amount\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            blurColor += texture2D(uColorBuffer, vUv0 + vec2(x, y) * offset);\n        }\n    }\n    blurColor /= 9.0;\n\n    // Mix original color with blurred version\n    vec4 mixedColor = mix(sceneColor, blurColor, 0.5);\n\n    // Overlay the paper texture\n    float grain = paperTexture(vUv0 * 10.0); // Tiling of the grain texture\n    mixedColor.rgb += mixedColor.rgb * grain * 0.1; // Modulate to adjust intensity\n\n    // Output the final color\n    gl_FragColor = mixedColor;\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"step-2-creating-the-watercolor-effect-script",children:"Step 2: Creating the Watercolor Effect Script"}),"\n",(0,a.jsxs)(t.p,{children:["Now, you'll create a script to apply the shaders to your scene. Create a new script in PlayCanvas and name it ",(0,a.jsx)(t.code,{children:"watercolor.js"}),". Paste in the code provided:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"//--------------- POST EFFECT DEFINITION------------------------//\nclass WatercolorEffect extends pc.PostEffect {\n    constructor(graphicsDevice, vs, fs) {\n        super(graphicsDevice);\n\n        this.shader = new pc.Shader(graphicsDevice, {\n            attributes: {\n                aPosition: pc.SEMANTIC_POSITION\n            },\n            vshader: vs,\n            fshader: fs\n        });\n    }\n\n    // Every post effect must implement the render method which \n    // sets any parameters that the shader might require and \n    // also renders the effect on the screen\n    render(inputTarget, outputTarget, rect) {\n        // Set the input render target to the shader. This is the image rendered from our camera\n        this.device.scope.resolve(\"uColorBuffer\").setValue(inputTarget.colorBuffer);\n        \n        // Draw a full screen quad on the output target. In this case the output target is the screen.\n        // Drawing a full screen quad will run the shader that we defined above\n        pc.drawFullscreenQuad(this.device, outputTarget, this.vertexBuffer, this.shader, rect);\n    }\n}\n\n\n//--------------- SCRIPT DEFINITION------------------------//\nvar Watercolor = pc.createScript('watercolor');\n\nWatercolor.attributes.add('vs', {\n    type: 'asset',\n    assetType: 'shader',\n    title: 'Vertex Shader'\n});\n\nWatercolor.attributes.add('fs', {\n    type: 'asset',\n    assetType: 'shader',\n    title: 'Fragment Shader'\n});\n\n// initialize code called once per entity\nWatercolor.prototype.initialize = function() {\n    const effect = new WatercolorEffect(this.app.graphicsDevice, this.vs.resource, this.fs.resource);\n    \n    // add the effect to the camera's postEffects queue\n    const queue = this.entity.camera.postEffects;\n    queue.addEffect(effect);\n    \n    // when the script is enabled add our effect to the camera's postEffects queue\n    this.on('enable', function () {\n        queue.addEffect(effect, false); \n    });\n    \n    // when the script is disabled remove our effect from the camera's postEffects queue\n    this.on('disable', function () {\n        queue.removeEffect(effect); \n    });\n};\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Remember to parse the script so that the Editor knows about the script's attributes!"})}),"\n",(0,a.jsx)(t.h2,{id:"step-3-applying-the-effect-to-a-camera",children:"Step 3: Applying the Effect to a Camera"}),"\n",(0,a.jsx)(t.p,{children:"To see your watercolor effect in action, you need to apply it to a camera in your scene:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Create a new entity with a ",(0,a.jsx)(t.a,{href:"/user-manual/scenes/components/camera",children:"camera component"})," if you haven't already."]}),"\n",(0,a.jsxs)(t.li,{children:["Add a ",(0,a.jsx)(t.a,{href:"/user-manual/scenes/components/script",children:"script component"})," to the camera entity and assign the watercolor script to it."]}),"\n",(0,a.jsxs)(t.li,{children:["Assign the ",(0,a.jsx)(t.code,{children:"watercolor.vert"})," and ",(0,a.jsx)(t.code,{children:"watercolor.frag"})," shader assets to the corresponding attributes in the watercolor script component."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Now, when you play your scene, you should see the watercolor effect applied, giving your scene a soft, artistic look."}),"\n",(0,a.jsxs)(t.p,{children:["See the Custom Post Effects project ",(0,a.jsx)(t.a,{href:"https://playcanvas.com/project/406045",children:"here"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>i});var n=r(96540);const a={},o=n.createContext(a);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);