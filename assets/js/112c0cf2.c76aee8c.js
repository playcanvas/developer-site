"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[29691],{11470:(e,s,t)=>{t.d(s,{A:()=>A});var n=t(96540),a=t(34164),r=t(17559),i=t(23104),o=t(56347),l=t(205),d=t(57485),c=t(31682),h=t(70679);function u(e){return n.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:s,children:t}=e;return(0,n.useMemo)(()=>{const e=s??function(e){return u(e).map(({props:{value:e,label:s,attributes:t,default:n}})=>({value:e,label:s,attributes:t,default:n}))}(t);return function(e){const s=(0,c.XI)(e,(e,s)=>e.value===s.value);if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[s,t])}function m({value:e,tabValues:s}){return s.some(s=>s.value===e)}function g({queryString:e=!1,groupId:s}){const t=(0,o.W6)(),a=function({queryString:e=!1,groupId:s}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:e,groupId:s});return[(0,d.aZ)(a),(0,n.useCallback)(e=>{if(!a)return;const s=new URLSearchParams(t.location.search);s.set(a,e),t.replace({...t.location,search:s.toString()})},[a,t])]}function f(e){const{defaultValue:s,queryString:t=!1,groupId:a}=e,r=p(e),[i,o]=(0,n.useState)(()=>function({defaultValue:e,tabValues:s}){if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${s.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=s.find(e=>e.default)??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:s,tabValues:r})),[d,c]=g({queryString:t,groupId:a}),[u,f]=function({groupId:e}){const s=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,a]=(0,h.Dv)(s);return[t,(0,n.useCallback)(e=>{s&&a.set(e)},[s,a])]}({groupId:a}),y=(()=>{const e=d??u;return m({value:e,tabValues:r})?e:null})();(0,l.A)(()=>{y&&o(y)},[y]);return{selectedValue:i,selectValue:(0,n.useCallback)(e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),f(e)},[c,f,r]),tabValues:r}}var y=t(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function x({className:e,block:s,selectedValue:t,selectValue:n,tabValues:r}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),d=e=>{const s=e.currentTarget,a=o.indexOf(s),i=r[a].value;i!==t&&(l(s),n(i))},c=e=>{let s=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;s=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;s=o[t]??o[o.length-1];break}}s?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":s},e),children:r.map(({value:e,label:s,attributes:n})=>(0,b.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:c,onClick:d,...n,className:(0,a.A)("tabs__item",j.tabItem,n?.className,{"tabs__item--active":t===e}),children:s??e},e))})}function v({lazy:e,children:s,selectedValue:t}){const r=(Array.isArray(s)?s:[s]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===t);return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map((e,s)=>(0,n.cloneElement)(e,{key:s,hidden:e.props.value!==t}))})}function w(e){const s=f(e);return(0,b.jsxs)("div",{className:(0,a.A)(r.G.tabs.container,"tabs-container",j.tabList),children:[(0,b.jsx)(x,{...s,...e}),(0,b.jsx)(v,{...s,...e})]})}function A(e){const s=(0,y.A)();return(0,b.jsx)(w,{...e,children:u(e.children)},String(s))}},19365:(e,s,t)=>{t.d(s,{A:()=>i});t(96540);var n=t(34164);const a={tabItem:"tabItem_Ymn6"};var r=t(74848);function i({children:e,hidden:s,className:t}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,t),hidden:s,children:e})}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>o});var n=t(96540);const a={},r=n.createContext(a);function i(e){const s=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:s},e.children)}},67179:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"tutorials/using-assets","title":"Using the Asset Registry","description":"Click to focus, hold and release SPACEBAR to switch between two A and B models. Press \'L\' to load the C model. Hold \'C\' to display the C model.","source":"@site/docs/tutorials/using-assets.md","sourceDirName":"tutorials","slug":"/tutorials/using-assets","permalink":"/tutorials/using-assets","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/using-assets.md","tags":[{"inline":true,"label":"loading","permalink":"/tags/loading"},{"inline":true,"label":"assets","permalink":"/tags/assets"},{"inline":true,"label":"basics","permalink":"/tags/basics"}],"version":"current","frontMatter":{"title":"Using the Asset Registry","tags":["loading","assets","basics"],"thumb":"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/406036/U2FYM6-image-75.jpg"},"sidebar":"tutorialsSidebar","previous":{"title":"User Interface - Text Input","permalink":"/tutorials/ui-text-input"},"next":{"title":"Using events with scripts","permalink":"/tutorials/using-events-with-scripts"}}');var a=t(74848),r=t(28453),i=t(11470),o=t(19365);const l={title:"Using the Asset Registry",tags:["loading","assets","basics"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/406036/U2FYM6-image-75.jpg"},d=void 0,c={},h=[{value:"Setup",id:"setup",level:2},{value:"The AssetRegistry",id:"the-assetregistry",level:2},{value:"Using preloaded assets",id:"using-preloaded-assets",level:2},{value:"Loading assets at runtime",id:"loading-assets-at-runtime",level:2},{value:"The complete script",id:"the-complete-script",level:2},{value:"AssetRegistry events",id:"assetregistry-events",level:2}];function u(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{className:"iframe-container",children:(0,a.jsx)("iframe",{src:"https://playcanv.as/p/QwDM4qaF/",title:"Using the Asset Registry",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,a.jsx)(s.admonition,{type:"info",children:(0,a.jsx)(s.p,{children:"Click to focus, hold and release SPACEBAR to switch between two A and B models. Press 'L' to load the C model. Hold 'C' to display the C model."})}),"\n",(0,a.jsx)(s.p,{children:"For simple games and products you will set up all your assets in the Editor, they will be preloaded before you application starts, and your app will just work."}),"\n",(0,a.jsxs)(s.p,{children:["For more advanced products you may wish to access your assets in code, change references, modify properties and also stream data in so that your application can load more quickly. Only loading the assets as they are needed. To do this you'll use the ",(0,a.jsx)(s.a,{href:"https://api.playcanvas.com/engine/classes/AssetRegistry.html",children:(0,a.jsx)(s.code,{children:"AssetRegistry"})}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["In this tutorial, we'll build a small scene which lets you swap the model on a render component by pressing a key. We'll also dynamically load a third model that is not preloaded. You can see the completed ",(0,a.jsx)(s.a,{href:"https://playcanvas.com/project/406036",children:"project here"}),"."]}),"\n",(0,a.jsx)(s.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(s.p,{children:"The project is set up as follows:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Three model assets are uploaded: ",(0,a.jsx)(s.strong,{children:"A"})," is a model of the letter A, ",(0,a.jsx)(s.strong,{children:"B"})," is a model of the letter B and ",(0,a.jsx)(s.strong,{children:"C"})," is a model of the letter C."]}),"\n",(0,a.jsxs)(s.li,{children:["The ",(0,a.jsx)(s.strong,{children:"C"})," render asset is set up ",(0,a.jsx)(s.em,{children:"not"})," to be preloaded."]}),"\n",(0,a.jsxs)(s.li,{children:["A render Entity is added to the scene and the model ",(0,a.jsx)(s.strong,{children:"A"})," is assigned to the render component."]}),"\n",(0,a.jsxs)(s.li,{children:["A script component is added to the render Entity and a new script is created called ",(0,a.jsx)(s.code,{children:"update_asset.js"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["Download the ",(0,a.jsx)(s.a,{href:"pathname:///downloads/tutorials/A.dae",children:"A model"}),", ",(0,a.jsx)(s.a,{href:"pathname:///downloads/tutorials/B.dae",children:"B model"})," and ",(0,a.jsx)(s.a,{href:"pathname:///downloads/tutorials/C.dae",children:"C model"})," and upload them to your project. Ensure that the files are named A.dae, B.dae and C.dae as this will influence the asset names."]}),"\n",(0,a.jsx)(s.h2,{id:"the-assetregistry",children:"The AssetRegistry"}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.a,{href:"https://api.playcanvas.com/engine/classes/AssetRegistry.html",children:(0,a.jsx)(s.code,{children:"pc.AssetRegistry"})})," is available in all scripts as ",(0,a.jsx)(s.code,{children:"this.app.assets"}),". The registry is populated with the details of all the runtime assets added to your project whether they are loaded or not. Use the Asset Registry to find the assets you need in your application."]}),"\n",(0,a.jsxs)(s.p,{children:["In this case we've declared three script attributes ",(0,a.jsx)(s.code,{children:"a"}),", ",(0,a.jsx)(s.code,{children:"b"})," and ",(0,a.jsx)(s.code,{children:"c"})," which are assigned to assets in the Editor. Then they are automatically available in our script."]}),"\n",(0,a.jsx)(s.h2,{id:"using-preloaded-assets",children:"Using preloaded assets"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:"    if (app.keyboard.isPressed(pc.KEY_SPACE)) {\n        if (this.entity.render.asset !== this.b.id) {\n            // update the render component to the new Render Asset\n            console.log('Changed to B Render Asset');\n            this.entity.render.asset = this.b;\n        }\n    } else {\n        // ...\n            if (this.entity.render.asset !== this.a.id) {\n                // restore original Render Asset\n                console.log('Changed to A Render Asset');\n                this.entity.render.asset = this.a;\n            }\n        // ...\n    }\n"})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.strong,{children:"A"})," and ",(0,a.jsx)(s.strong,{children:"B"})," assets are marked as ",(0,a.jsx)(s.strong,{children:"preload"})," in this project. This means that during the loading screen, these assets are downloaded. They will be ready to use as soon as your application starts. When an asset is loaded, the loaded resource is available as ",(0,a.jsx)(s.code,{children:"asset.resource"})," and we can assign the asset to the ",(0,a.jsx)(s.a,{href:"https://api.playcanvas.com/engine/classes/RenderComponent.html#asset",children:"render component asset property"}),". If ",(0,a.jsx)(s.code,{children:"asset.loaded"})," is ",(0,a.jsx)(s.code,{children:"false"}),", then the asset isn't loaded."]}),"\n",(0,a.jsx)("img",{loading:"lazy",src:"/img/tutorials/using_assets/using-assets-a-preload.png",width:"360"}),"\n",(0,a.jsxs)(s.p,{children:["So, the ",(0,a.jsx)(s.code,{children:"A"})," and ",(0,a.jsx)(s.code,{children:"B"})," models are preloaded, which means we know they will be ready when we are running the application. This code checks if the space bar is pressed, and if so we change the render asset on the render component to be the resource property of the asset. In this case ",(0,a.jsx)(s.code,{children:"asset.resource"})," will be a ",(0,a.jsx)(s.code,{children:"pc.Render"})," object. For each different asset type (audio, texture, etc), the ",(0,a.jsx)(s.code,{children:"asset.resource"})," property will be the relevant type."]}),"\n",(0,a.jsx)(s.h2,{id:"loading-assets-at-runtime",children:"Loading assets at runtime"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:"if (app.keyboard.isPressed(pc.KEY_C)) {\n    if (this.c.loaded) {\n        if (this.entity.render.asset !== this.c.id) {\n            console.log('Changed to C Render Asset');\n            this.entity.render.asset = this.c;\n        }\n    }\n} else {\n    if (this.entity.render.asset !== this.a.id) {\n        // restore original Render Asset\n        console.log('Changed to A Render Asset');\n        this.entity.render.asset = this.a;\n    }\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.strong,{children:"C"})," render asset is not marked as ",(0,a.jsx)(s.em,{children:"preload"}),", so in the code above, you can see that we check if the resource is loaded before we use it. if ",(0,a.jsx)(s.code,{children:"asset.loaded"})," is false, then the resource isn't loaded and we can't change the render component. If the ",(0,a.jsx)(s.strong,{children:"C"})," render asset is loaded then ",(0,a.jsx)(s.code,{children:"this.c.resource"})," will be the ",(0,a.jsx)(s.code,{children:"pc.Render"})," property and ",(0,a.jsx)(s.code,{children:"asset.loaded"})," will be true, we'll be then able to assign it."]}),"\n",(0,a.jsx)("img",{loading:"lazy",src:"/img/tutorials/using_assets/using-assets-c-preload.png",width:"360"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:"if (this.app.keyboard.isPressed(pc.KEY_L)) {\n    this.app.assets.load(this.c);\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:["When you press the ",(0,a.jsx)(s.code,{children:"L"})," key we load the ",(0,a.jsx)(s.strong,{children:"C"})," model. To do this we pass the unloaded asset into ",(0,a.jsx)(s.code,{children:"this.app.assets.load()"}),". If the asset is already loaded, this method will do nothing."]}),"\n",(0,a.jsxs)(s.p,{children:["Once the asset is loaded ",(0,a.jsx)(s.code,{children:"asset.resource"})," will be a ",(0,a.jsx)(s.code,{children:"pc.Render"})," instance and we can assign the asset to the render component by pressing the ",(0,a.jsx)(s.code,{children:"C"})," key."]}),"\n",(0,a.jsx)(s.h2,{id:"the-complete-script",children:"The complete script"}),"\n","\n",(0,a.jsxs)(i.A,{defaultValue:"classic",groupId:"script-code",children:[(0,a.jsx)(o.A,{value:"esm",label:"ESM",children:(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:"import { Script, KEY_SPACE, KEY_C, KEY_L } from 'playcanvas';\n\nexport class UpdateAsset extends Script {\n    static scriptName = \"updateAsset\";\n\n    /**\n     * @attribute\n     * @title A\n     * @type {Asset}\n     * @resource render\n     */\n    a = null;\n\n    /**\n     * @attribute\n     * @title B\n     * @type {Asset}\n     * @resource render\n     */\n    b = null;\n\n    /**\n     * @attribute\n     * @title C\n     * @type {Asset}\n     * @resource render\n     */\n    c = null;\n\n    // initialize code called once per entity\n    initialize() {\n        this.app.keyboard.preventDefault = true;\n    }\n\n    // update code called every frame\n    update(dt) {\n        var app = this.app;\n\n        if (app.keyboard.isPressed(KEY_SPACE)) {\n            if (this.entity.render.asset !== this.b.id) {\n                // update the render component to the new Render Asset\n                console.log('Changed to B Render Asset');\n                this.entity.render.asset = this.b;\n            }\n        } else {\n            if (app.keyboard.isPressed(KEY_C)) {\n                if (this.c.loaded) {\n                    if (this.entity.render.asset !== this.c.id) {\n                        console.log('Changed to C Render Asset');\n                        this.entity.render.asset = this.c;\n                    }\n                }\n            } else {\n                if (this.entity.render.asset !== this.a.id) {\n                    // restore original Render Asset\n                    console.log('Changed to A Render Asset');\n                    this.entity.render.asset = this.a;\n                }\n            }\n        }\n\n        if (app.keyboard.isPressed(KEY_L)) {\n            app.assets.load(this.c);\n        }\n    }\n}\n"})})}),(0,a.jsx)(o.A,{value:"classic",label:"Classic",children:(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:"var UpdateAsset = pc.createScript('updateAsset');\n\nUpdateAsset.attributes.add('a', {\n    type: 'asset',\n    assetType: 'render'\n});\n\nUpdateAsset.attributes.add('b', {\n    type: 'asset',\n    assetType: 'render'\n});\n\nUpdateAsset.attributes.add('c', {\n    type: 'asset',\n    assetType: 'render'\n});\n\n// initialize code called once per entity\nUpdateAsset.prototype.initialize = function() {\n    this.app.keyboard.preventDefault = true;\n};\n\n// update code called every frame\nUpdateAsset.prototype.update = function(dt) {\n    var app = this.app;\n\n    if (app.keyboard.isPressed(pc.KEY_SPACE)) {\n        if (this.entity.render.asset !== this.b.id) {\n            // update the render component to the new Render Asset\n            console.log('Changed to B Render Asset');\n            this.entity.render.asset = this.b;\n        }\n    } else {\n        if (app.keyboard.isPressed(pc.KEY_C)) {\n            if (this.c.loaded) {\n                if (this.entity.render.asset !== this.c.id) {\n                    console.log('Changed to C Render Asset');\n                    this.entity.render.asset = this.c;\n                }\n            }\n        } else {\n            if (this.entity.render.asset !== this.a.id) {\n                // restore original Render Asset\n                console.log('Changed to A Render Asset');\n                this.entity.render.asset = this.a;\n            }\n        }\n    }\n\n    if (app.keyboard.isPressed(pc.KEY_L)) {\n        app.assets.load(this.c);\n    }\n};\n"})})})]}),"\n",(0,a.jsx)(s.h2,{id:"assetregistry-events",children:"AssetRegistry events"}),"\n",(0,a.jsxs)(s.p,{children:["One thing we don't demonstrate in this example is how to know when an asset is loaded. To do this we use ",(0,a.jsx)(s.code,{children:"pc.AssetRegistry"})," events like the ",(0,a.jsx)(s.code,{children:'"load"'})," event. Here's some sample code:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:'// find the asset by name in the registry\nvar asset = this.app.assets.find("A");\n// set up a one-off event listener for the load event\nthis.app.assets.once("load", function (asset) {\n    // asset.resource is now ready\n}, this);\n'})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:'"load"'})," event is quite broad. It is fired for every asset that is loaded, so if assets are loaded elsewhere, you won't know that this is your asset. Instead you can narrow your event down by using the ",(0,a.jsx)(s.code,{children:'"load:id"'})," event."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:'// find the asset in the registry\nvar asset = this.app.assets.find("A");\n// set up a one-off event listener for the load event\nthis.app.assets.once("load:" + asset.id, function (asset) {\n    // asset.resource is now ready\n}, this);\n'})}),"\n",(0,a.jsx)(s.p,{children:"The above event will only be fired for that specific asset. Much more useful."}),"\n",(0,a.jsx)(s.p,{children:"Finally, there is one specific coding pattern, that often occurs. So often, in fact, that we've provided a convenient method to do it for you."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:'var asset = this.app.assets.find("A");\nif (!asset.loaded) {\n    this.app.assets.once("load:" + asset.id, function (asset) {\n        // do something with asset.resource\n    });\n    this.app.assets.load(asset);\n} else {\n    // do something with asset.resource\n}\n'})}),"\n",(0,a.jsxs)(s.p,{children:["This code loads an asset when it is needed, but it's a bit long winded. So, instead, you can use the ",(0,a.jsx)(s.code,{children:"asset.ready()"})," method. This code performs the same function as above"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:'var asset = this.app.assets.find("A");\nasset.ready(function (asset) {\n    // do something with asset.resource\n});\nthis.app.assets.load(asset);\n'})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"asset.ready()"})," method will call it's callback as soon as the asset is loaded, if the asset is already loaded, it will call it straight away. ",(0,a.jsx)(s.code,{children:"app.assets.load()"})," does nothing if the asset is already loaded."]})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);