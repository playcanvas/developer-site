"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[36347],{9700:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>p,default:()=>i,frontMatter:()=>s,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"user-manual/pcui/pcui-graph/events","title":"Events","description":"After creating a graph, you can register a callback for various events. This is achieved using the graphs on function. The following events are supported:","source":"@site/docs/user-manual/pcui/pcui-graph/events.md","sourceDirName":"user-manual/pcui/pcui-graph","slug":"/user-manual/pcui/pcui-graph/events","permalink":"/user-manual/pcui/pcui-graph/events","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/pcui/pcui-graph/events.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Events","sidebar_position":3},"sidebar":"userManualSidebar","previous":{"title":"Context Menus","permalink":"/user-manual/pcui/pcui-graph/context-menus"},"next":{"title":"Schema","permalink":"/user-manual/pcui/pcui-graph/schema"}}');var r=n(74848),o=n(28453);const s={title:"Events",sidebar_position:3},p=void 0,d={},h=[];function c(e){const a={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:["After creating a graph, you can register a callback for various events. This is achieved using the graphs ",(0,r.jsx)(a.a,{href:"https://api.playcanvas.com/pcui-graph/classes/Graph.html#on",children:"on function"}),". The following events are supported:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-javascript",children:"import Graph from '@playcanvas/pcui-graph';\n\nconst schema = { ... };\nconst graph = new Graph(schema);\n\n/*\n * @event\n * @param {object} args.node - The node that was added\n */\ngraph.on(Graph.GRAPH_ACTIONS.ADD_NODE, ({ node }) => { ... });\n\n/*\n * @event\n * @param {object} args.node - The node that was deleted\n * @param {object} args.edgeData - The edges contained in the graph\n * @param {object} args.edges - The edges that were removed when deleting this node\n */\ngraph.on(Graph.GRAPH_ACTIONS.DELETE_NODE, ({ node, edgeData, edges }) => { ... });\n\n/*\n * @event\n * @param {object} args.node - The node that was selected\n * @param {object} args.prevItem - The previously selected item, either a node or an edge\n */\ngraph.on(Graph.GRAPH_ACTIONS.SELECT_NODE, ({ node, prevItem }) => { ... });\n\n/*\n * @event\n * @param {object} args.node - The node that was updated\n * @param {object} args.nodeId - The node id of the node that was updated\n */\ngraph.on(Graph.GRAPH_ACTIONS.UPDATE_NODE_POSITION, ({ node, nodeId }) => { ... });\n\n/*\n * @event\n * @param {object} args.node - The node that was updated\n * @param {object} args.attribute - The name of the attribute that was updated\n * @param {object} args.attributeKey - The key of the attribute that was updated\n */\ngraph.on(Graph.GRAPH_ACTIONS.UPDATE_NODE_ATTRIBUTE, ({ node, attribute, attributeKey }) => { ... });\n\n/*\n * @event\n * @param {object} args.edge - The edge that was updated\n * @param {object} args.edgeId - The id of the edge that was updated\n */\ngraph.on(Graph.GRAPH_ACTIONS.ADD_EDGE, ({ edge, edgeId }) => { ... });\n\n/*\n * @event\n * @param {object} args.edge - The edge that was updated\n * @param {object} args.edgeId - The id of the edge that was updated\n */\ngraph.on(Graph.GRAPH_ACTIONS.DELETE_EDGE, ({ edge, edgeId }) => { ... });\n\n/*\n * @event\n * @param {object} args.edge - The edge that was selected\n * @param {object} args.prevItem - The previously selected item, either a node or an edge\n */\ngraph.on(Graph.GRAPH_ACTIONS.SELECT_EDGE, ({ edge, prevItem }) => { ... });\n\n/*\n * @event\n * @param {object} args.prevItem - The previously selected item, either a node or an edge\n */\ngraph.on(Graph.GRAPH_ACTIONS.DESELECT_ITEM, ({ prevItem }) => { ... });\n\n/*\n * @event\n * @param {number} args.pos.x - The x position of the viewport in relation to the graph\n * @param {number} args.pos.y - The y position of the viewport in relation to the graph\n */\ngraph.on(Graph.GRAPH_ACTIONS.UPDATE_TRANSLATE, ({ pos }) => { ... });\n\n/*\n * @event\n * param {number} args.scale - The current scale of the graph\n */\ngraph.on(Graph.GRAPH_ACTIONS.UPDATE_SCALE, ({ scale }) => { ... });\n"})})]})}function i(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>p});var t=n(96540);const r={},o=t.createContext(r);function s(e){const a=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function p(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);