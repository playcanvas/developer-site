"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[25137],{15762:(e,n,t)=>{t.r(n),t.d(n,{CompleteScene:()=>b,LazyInteractive:()=>f,assets:()=>v,contentTitle:()=>j,default:()=>C,frontMatter:()=>y,metadata:()=>i,toc:()=>w});const i=JSON.parse('{"id":"user-manual/playcanvas-react/building-a-scene","title":"Building a Scene","description":"Let\'s build a simple 3D scene step by step using PlayCanvas React. We\'ll create a basic scene with a lit sphere and see it running live in your browser.","source":"@site/docs/user-manual/playcanvas-react/building-a-scene.md","sourceDirName":"user-manual/playcanvas-react","slug":"/user-manual/playcanvas-react/building-a-scene","permalink":"/user-manual/playcanvas-react/building-a-scene","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/playcanvas-react/building-a-scene.md","tags":[],"version":"current","frontMatter":{"title":"Building a Scene"},"sidebar":"userManualSidebar","previous":{"title":"PlayCanvas React","permalink":"/user-manual/playcanvas-react/"},"next":{"title":"PlayCanvas Editor","permalink":"/user-manual/editor/"}}');var a=t(74848),s=t(28453),r=t(83661),c=t(18676),l=t(58817),o=t(19748),d=t(91732),p=t(96540),h=t(11470),m=t(19365);const u='import { Application, Entity } from \'@playcanvas/react\'\nimport { Camera, Light, Render } from \'@playcanvas/react/components\'\nimport confetti from "canvas-confetti"\n\nexport default function Interactive() {\n  return (\n    <Application>\n      <Entity name="camera" position={[0, 0, 5]}>\n        <Camera />\n      </Entity>\n      <Entity name="light" rotation={[45, 45, 0]}>\n        <Light type="directional" />\n      </Entity>\n      <Entity name="sphere"\n        onClick={() => confetti()}\n        onPointerOver={() => document.body.style.cursor = \'pointer\'}\n        onPointerOut={() => document.body.style.cursor = \'default\'} >\n        <Render type="sphere" />\n      </Entity>\n    </Application>\n  )\n}\n';var x=t(73748),g=t(78478);const y={title:"Building a Scene"},j=void 0,v={},f=(0,p.lazy)((()=>t.e(79758).then(t.bind(t,79758)))),b=()=>(0,a.jsx)("div",{style:{height:"400px",width:"100%",position:"relative"},children:(0,a.jsxs)(r.l,{children:[(0,a.jsx)(c.w,{name:"camera",position:[0,0,5],children:(0,a.jsx)(l.i,{clearColor:"#1a1a1a"})}),(0,a.jsx)(c.w,{name:"light",rotation:[45,45,0],children:(0,a.jsx)(o.v,{type:"directional",intensity:1})}),(0,a.jsx)(c.w,{name:"sphere",children:(0,a.jsx)(d.d,{type:"sphere"})})]})}),w=[{value:"Starting Point",id:"starting-point",level:2},{value:"Adding a Camera",id:"adding-a-camera",level:2},{value:"Adding a Light",id:"adding-a-light",level:2},{value:"Adding an Object",id:"adding-an-object",level:2},{value:"Making it Interactive",id:"making-it-interactive",level:2},{value:"Key Differences from Web Components",id:"key-differences-from-web-components",level:2},{value:"Next Steps",id:"next-steps",level:2}];function A(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Let's build a simple 3D scene step by step using PlayCanvas React. We'll create a basic scene with a lit sphere and see it running live in your browser."}),"\n",(0,a.jsx)(n.h2,{id:"starting-point",children:"Starting Point"}),"\n",(0,a.jsxs)(n.p,{children:["First, let's create the basic structure of our application using the ",(0,a.jsx)(n.code,{children:"Application"})," component:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { Application } from '@playcanvas/react'\n\nexport default function App() {\n  return (\n    <Application>\n      {/* Your 3D scene will go here */}\n    </Application>\n  )\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"This creates an empty 3D scene. However, we can't see anything rendered yet. We need a camera and some content."}),"\n",(0,a.jsx)(n.h2,{id:"adding-a-camera",children:"Adding a Camera"}),"\n",(0,a.jsxs)(n.p,{children:["To view our scene, we need a camera. In PlayCanvas React, we use ",(0,a.jsx)(n.code,{children:"Entity"})," components as containers and attach component behaviors like ",(0,a.jsx)(n.code,{children:"Camera"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { Application, Entity } from '@playcanvas/react'\nimport { Camera } from '@playcanvas/react/components'\n\nexport default function App() {\n  return (\n    <Application>\n      <Entity name=\"camera\" position={[0, 0, 5]}>\n        <Camera />\n      </Entity>\n    </Application>\n  )\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"We've added a camera entity positioned 5 units down the positive Z axis. By default, a camera looks down the negative Z axis so our camera is now looking at the origin. The rendered scene shows a solid grey color (the clear color of the camera)."}),"\n",(0,a.jsx)(n.h2,{id:"adding-a-light",children:"Adding a Light"}),"\n",(0,a.jsx)(n.p,{children:"Let's add a directional light to illuminate our scene:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import { Application, Entity } from \'@playcanvas/react\'\nimport { Camera, Light } from \'@playcanvas/react/components\'\n\nexport default function App() {\n  return (\n    <Application>\n      <Entity name="camera" position={[0, 0, 5]}>\n        <Camera />\n      </Entity>\n      <Entity name="light" rotation={[45, 45, 0]}>\n        <Light type="directional" />\n      </Entity>\n    </Application>\n  )\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"The light is rotated to shine at an angle, which will create more interesting shading on our objects."}),"\n",(0,a.jsx)(n.h2,{id:"adding-an-object",children:"Adding an Object"}),"\n",(0,a.jsxs)(n.p,{children:["Now let's add a sphere to our scene using the ",(0,a.jsx)(n.code,{children:"Render"})," component:"]}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(m.A,{value:"code",label:"Code",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import { Application, Entity } from \'@playcanvas/react\'\nimport { Camera, Light, Render } from \'@playcanvas/react/components\'\n\nexport default function App() {\n  return (\n    <Application>\n      <Entity name="camera" position={[0, 0, 5]}>\n        <Camera />\n      </Entity>\n      <Entity name="light" rotation={[45, 45, 0]}>\n        <Light type="directional" />\n      </Entity>\n      <Entity name="sphere">\n        <Render type="sphere" />\n      </Entity>\n    </Application>\n  )\n}\n'})})}),(0,a.jsx)(m.A,{value:"demo",label:"Live Demo",children:(0,a.jsx)(b,{})})]}),"\n",(0,a.jsx)(n.p,{children:"You should now see a white sphere in the center of your screen!"}),"\n",(0,a.jsx)(n.h2,{id:"making-it-interactive",children:"Making it Interactive"}),"\n",(0,a.jsx)(n.p,{children:"One of the great advantages of using React is how easy it is to add interactivity. Let's make our sphere respond to clicks."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Click on the Demo Tab to view the results."})}),"\n",(0,a.jsxs)(h.A,{children:[(0,a.jsx)(m.A,{default:!0,value:"code",label:"Code",children:(0,a.jsx)(x.A,{language:"jsx",children:u})}),(0,a.jsx)(m.A,{value:"demo",label:"Demo",className:"example-demo",children:(0,a.jsx)(g.A,{children:()=>(0,a.jsx)(f,{})})})]}),"\n",(0,a.jsx)(n.h2,{id:"key-differences-from-web-components",children:"Key Differences from Web Components"}),"\n",(0,a.jsxs)(n.p,{children:["When building scenes with PlayCanvas React compared to ",(0,a.jsx)(n.a,{href:"/user-manual/web-components/",children:"Web Components"}),":"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Component Structure"}),": Instead of HTML tags like ",(0,a.jsx)(n.code,{children:"<pc-app>"}),", we use React components like ",(0,a.jsx)(n.code,{children:"<Application>"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Props vs Attributes"}),": We use React props with camelCase (e.g., ",(0,a.jsx)(n.code,{children:"clearColor"}),") instead of HTML attributes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Event Handling"}),": We can use React's event system directly (e.g., ",(0,a.jsx)(n.code,{children:"onClick"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"State Management"}),": We can leverage React hooks like ",(0,a.jsx)(n.code,{children:"useState"})," for dynamic behavior"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Type Safety"}),": Full TypeScript support with type safety."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"Now that you've built your first scene, try:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Adding more objects with different shapes (",(0,a.jsx)(n.code,{children:"box"}),", ",(0,a.jsx)(n.code,{children:"cylinder"}),", ",(0,a.jsx)(n.code,{children:"cone"}),", etc.)"]}),"\n",(0,a.jsxs)(n.li,{children:["Experimenting with different light types (",(0,a.jsx)(n.code,{children:"point"}),", ",(0,a.jsx)(n.code,{children:"spot"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:["Adding movement with the ",(0,a.jsx)(n.code,{children:"OrbitControls"})," script"]}),"\n",(0,a.jsxs)(n.li,{children:["Exploring physics by adding ",(0,a.jsx)(n.code,{children:"RigidBody"})," and ",(0,a.jsx)(n.code,{children:"Collision"})," components"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Now you have the basics, see the ",(0,a.jsx)(n.a,{href:"https://playcanvas-react.vercel.app/docs",children:"documentation"})," for more examples."]})]})}function C(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(A,{...e})}):A(e)}}}]);