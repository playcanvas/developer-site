"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[2419],{96707:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"user-manual/assets/import-pipeline/index","title":"Asset Import Pipeline","description":"Some assets are uploaded in source format and need to be converted into a \\"target\\" format before they can be used in a game at runtime. This process is called Importing. For example, a 3D model can be uploaded as an FBX file, but must be converted into a PlayCanvas compatible model file before it can be loaded in the game.","source":"@site/docs/user-manual/assets/import-pipeline/index.md","sourceDirName":"user-manual/assets/import-pipeline","slug":"/user-manual/assets/import-pipeline/","permalink":"/user-manual/assets/import-pipeline/","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/assets/import-pipeline/index.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Asset Import Pipeline","sidebar_position":3},"sidebar":"userManualSidebar","previous":{"title":"Uploading and Importing","permalink":"/user-manual/assets/importing"},"next":{"title":"Import Hierarchy","permalink":"/user-manual/assets/import-pipeline/import-hierarchy"}}');var s=r(74848),a=r(28453);const o={title:"Asset Import Pipeline",sidebar_position:3},n=void 0,l={},d=[{value:"Asset Tasks",id:"asset-tasks",level:2},{value:"Search related assets",id:"search-related-assets",level:3},{value:"Assets default to preload",id:"assets-default-to-preload",level:3},{value:"Texture Import Settings",id:"texture-import-settings",level:2},{value:"Texture POT (Power of Two)",id:"texture-pot-power-of-two",level:3},{value:"Create Atlases",id:"create-atlases",level:3},{value:"Model Import Settings",id:"model-import-settings",level:2},{value:"Preserve material mappings",id:"preserve-material-mappings",level:3},{value:"Overwrite Models",id:"overwrite-models",level:3},{value:"Overwrite Animations",id:"overwrite-animations",level:3},{value:"Overwrite Materials",id:"overwrite-materials",level:3},{value:"Overwrite Textures",id:"overwrite-textures",level:3},{value:"Convert to GLB",id:"convert-to-glb",level:3},{value:"Import Hierarchy",id:"import-hierarchy",level:3},{value:"Mesh Compression",id:"mesh-compression",level:3},{value:"Create FBX Folder",id:"create-fbx-folder",level:3},{value:"Animation Import Settings",id:"animation-import-settings",level:2}];function h(e){const t={a:"a",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:['Some assets are uploaded in source format and need to be converted into a "target" format before they can be used in a game at runtime. This process is called ',(0,s.jsx)(t.em,{children:"Importing"}),". For example, a 3D model can be uploaded as an FBX file, but must be converted into a PlayCanvas compatible model file before it can be loaded in the game."]}),"\n",(0,s.jsx)(t.p,{children:"Some assets don't need to be imported before they can be used. For example a PNG image can be used as a texture immediately."}),"\n",(0,s.jsx)(t.h2,{id:"asset-tasks",children:"Asset Tasks"}),"\n",(0,s.jsx)(t.p,{children:"When a source asset is uploaded, PlayCanvas starts an Asset Task to perform this import process on our server."}),"\n",(0,s.jsx)(t.p,{children:"There are a variety of options available to tune the behavior of the import pipeline to suit your needs."}),"\n",(0,s.jsx)("img",{loading:"lazy",src:"/img/user-manual/assets/import-pipeline/asset-tasks.png",width:"480"}),"\n",(0,s.jsx)(t.h3,{id:"search-related-assets",children:"Search related assets"}),"\n",(0,s.jsx)(t.p,{children:"When you update an source asset by uploading a new version of the file. There are two possible behaviors for how we update the target assets that are created by the import pipeline."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["If ",(0,s.jsx)(t.strong,{children:"Search related assets"})," is enabled, the pipeline will update target assets no matter what folder they are located in."]}),"\n",(0,s.jsxs)(t.li,{children:["If ",(0,s.jsx)(t.strong,{children:"Search related assets"})," is not enabled, the pipeline will only look for the target assets in the same folder as the source asset."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"So, if you leave this enabled, you are able to organize your source and target assets into folders and be sure that when you update a source assets it will update all related assets."}),"\n",(0,s.jsx)(t.h3,{id:"assets-default-to-preload",children:"Assets default to preload"}),"\n",(0,s.jsxs)(t.p,{children:["Newly created assets will automatically be set to ",(0,s.jsx)(t.a,{href:"/user-manual/assets/preloading-and-streaming/",children:"preload"})," or not depending on whether this option is enabled or not. The exception to this are JavaScript script files which will always be set to preloaded when created."]}),"\n",(0,s.jsx)(t.h2,{id:"texture-import-settings",children:"Texture Import Settings"}),"\n",(0,s.jsx)(t.p,{children:"These options only affect the importing of images and textures."}),"\n",(0,s.jsx)(t.h3,{id:"texture-pot-power-of-two",children:"Texture POT (Power of Two)"}),"\n",(0,s.jsx)(t.p,{children:"When this option is enabled textures that are not a power of two will be converted to the nearest power of two resolution when they are imported."}),"\n",(0,s.jsx)(t.h3,{id:"create-atlases",children:"Create Atlases"}),"\n",(0,s.jsx)(t.p,{children:"Images that are uploaded will be imported as a texture atlas instead of a normal texture asset. This is a useful time saver when uploading many spritesheets or UI assets."}),"\n",(0,s.jsx)(t.h2,{id:"model-import-settings",children:"Model Import Settings"}),"\n",(0,s.jsx)(t.p,{children:"These options only affect the importing of model or scene files (e.g. FBX, Collada, obj, etc)"}),"\n",(0,s.jsx)(t.h3,{id:"preserve-material-mappings",children:"Preserve material mappings"}),"\n",(0,s.jsx)(t.p,{children:"When a model file is updated or reimported, the Editor will try to preserve the material mappings that were set on it."}),"\n",(0,s.jsx)(t.h3,{id:"overwrite-models",children:"Overwrite Models"}),"\n",(0,s.jsx)(t.p,{children:"When a model file is updated or reimported this option determines whether or not the target model file is overwritten. The default behavior is to overwrite with the new model."}),"\n",(0,s.jsx)(t.h3,{id:"overwrite-animations",children:"Overwrite Animations"}),"\n",(0,s.jsx)(t.p,{children:"When a model file is updated or reimported this option determines whether or not a animations created from the model are overwritten. The default behavior is to overwrite with the new animations."}),"\n",(0,s.jsx)(t.h3,{id:"overwrite-materials",children:"Overwrite Materials"}),"\n",(0,s.jsx)(t.p,{children:"When a model file is updated or reimported this option determines whether or not materials created from the model are overwritten. The default behavior is to leave existing materials."}),"\n",(0,s.jsx)(t.h3,{id:"overwrite-textures",children:"Overwrite Textures"}),"\n",(0,s.jsx)(t.p,{children:"When a model file is updated or reimported this option determines whether or not textures created from the model are overwritten. The default behavior is to overwrite with the new textures."}),"\n",(0,s.jsx)(t.h3,{id:"convert-to-glb",children:"Convert to GLB"}),"\n",(0,s.jsx)(t.p,{children:"Enabled by default on new projects, imported models and animations will create GLB model and animation assets instead of the older, deprecated JSON format."}),"\n",(0,s.jsx)(t.h3,{id:"import-hierarchy",children:"Import Hierarchy"}),"\n",(0,s.jsxs)(t.p,{children:["Only available if using ",(0,s.jsx)(t.a,{href:"#convert-to-glb",children:"Convert to GLB"})," option. When a model file is imported, a template asset is created that contains the full hierarchy of the model as entities allowing to you to manipulate them directly in the Editor. See more information about this feature ",(0,s.jsx)(t.a,{href:"/user-manual/assets/import-pipeline/import-hierarchy/",children:"here"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"mesh-compression",children:"Mesh Compression"}),"\n",(0,s.jsxs)(t.p,{children:["Only available if using ",(0,s.jsx)(t.a,{href:"#convert-to-glb",children:"Convert to GLB"})," option. Setting this to a compression format will automatically compress mesh data when importing or re-importing model files. This can drastically reduce the size of GLB files at the cost of some runtime decompression cost."]}),"\n",(0,s.jsx)(t.p,{children:"If using Draco compression, remember to import the Draco WASM module into the project otherwise the models will not load."}),"\n",(0,s.jsx)("img",{loading:"lazy",src:"/img/user-manual/assets/import-pipeline/draco-import-button.png",width:"480"}),"\n",(0,s.jsx)(t.h3,{id:"create-fbx-folder",children:"Create FBX Folder"}),"\n",(0,s.jsx)(t.p,{children:"When importing a model file (e.g a GLB or FBX), the Editor will create a folder for the assets created by the import such as render, template and material assets."}),"\n",(0,s.jsx)(t.p,{children:"If there is already a Model (Source) file in the current folder or a folder with the same name as the file being imported, it will overwrite the existing assets instead of creating a new folder."}),"\n",(0,s.jsx)(t.h2,{id:"animation-import-settings",children:"Animation Import Settings"}),"\n",(0,s.jsxs)(t.p,{children:["Please refer to the ",(0,s.jsx)(t.a,{href:"/user-manual/assets/types/animation/",children:"Animation section"})," for more details."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>n});var i=r(96540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);