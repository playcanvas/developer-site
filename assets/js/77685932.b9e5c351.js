"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[67834],{11470:(e,t,r)=>{r.d(t,{A:()=>C});var n=r(96540),a=r(34164),s=r(17559),o=r(23104),i=r(56347),c=r(205),l=r(57485),u=r(31682),d=r(70679);function h(e){return n.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function f(e){const{values:t,children:r}=e;return(0,n.useMemo)(()=>{const e=t??function(e){return h(e).map(({props:{value:e,label:t,attributes:r,default:n}})=>({value:e,label:t,attributes:r,default:n}))}(r);return function(e){const t=(0,u.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,r])}function p({value:e,tabValues:t}){return t.some(t=>t.value===e)}function m({queryString:e=!1,groupId:t}){const r=(0,i.W6)(),a=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l.aZ)(a),(0,n.useCallback)(e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})},[a,r])]}function v(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,s=f(e),[o,i]=(0,n.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=t.find(e=>e.default)??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s})),[l,u]=m({queryString:r,groupId:a}),[h,v]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,a]=(0,d.Dv)(t);return[r,(0,n.useCallback)(e=>{t&&a.set(e)},[t,a])]}({groupId:a}),g=(()=>{const e=l??h;return p({value:e,tabValues:s})?e:null})();(0,c.A)(()=>{g&&i(g)},[g]);return{selectedValue:o,selectValue:(0,n.useCallback)(e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),v(e)},[u,v,s]),tabValues:s}}var g=r(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=r(74848);function x({className:e,block:t,selectedValue:r,selectValue:n,tabValues:s}){const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),l=e=>{const t=e.currentTarget,a=i.indexOf(t),o=s[a].value;o!==r&&(c(t),n(o))},u=e=>{let t=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const r=i.indexOf(e.currentTarget)+1;t=i[r]??i[0];break}case"ArrowLeft":{const r=i.indexOf(e.currentTarget)-1;t=i[r]??i[i.length-1];break}}t?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},e),children:s.map(({value:e,label:t,attributes:n})=>(0,y.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{i.push(e)},onKeyDown:u,onClick:l,...n,className:(0,a.A)("tabs__item",b.tabItem,n?.className,{"tabs__item--active":r===e}),children:t??e},e))})}function w({lazy:e,children:t,selectedValue:r}){const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===r);return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:s.map((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r}))})}function j(e){const t=v(e);return(0,y.jsxs)("div",{className:(0,a.A)(s.G.tabs.container,"tabs-container",b.tabList),children:[(0,y.jsx)(x,{...t,...e}),(0,y.jsx)(w,{...t,...e})]})}function C(e){const t=(0,g.A)();return(0,y.jsx)(j,{...e,children:h(e.children)},String(t))}},14496:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"tutorials/custom-posteffect","title":"Custom Post Effects","description":"In this tutorial, you\'ll learn how to create a custom watercolor post effect in PlayCanvas that applies a softening filter and a paper grain texture to your scene. By the end of this guide, you\'ll have a visually appealing watercolor effect that you can apply to any 3D scene.","source":"@site/docs/tutorials/custom-posteffect.md","sourceDirName":"tutorials","slug":"/tutorials/custom-posteffect","permalink":"/tutorials/custom-posteffect","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/custom-posteffect.md","tags":[{"inline":true,"label":"posteffects","permalink":"/tags/posteffects"}],"version":"current","frontMatter":{"title":"Custom Post Effects","tags":["posteffects"],"thumb":"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/406045/ABC61F-image-75.jpg"},"sidebar":"tutorialsSidebar","previous":{"title":"Creating Rigid Bodies in Code","permalink":"/tutorials/creating-rigid-bodies-in-code"},"next":{"title":"Custom Shaders","permalink":"/tutorials/custom-shaders"}}');var a=r(74848),s=r(28453),o=r(11470),i=r(19365);const c={title:"Custom Post Effects",tags:["posteffects"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/406045/ABC61F-image-75.jpg"},l=void 0,u={},d=[{value:"Step 1: Setting Up Your Shaders",id:"step-1-setting-up-your-shaders",level:2},{value:"Vertex Shader (watercolor.vert)",id:"vertex-shader-watercolorvert",level:3},{value:"Fragment Shader (watercolor.frag)",id:"fragment-shader-watercolorfrag",level:3},{value:"Step 2: Creating the Watercolor Effect Script",id:"step-2-creating-the-watercolor-effect-script",level:2},{value:"Step 3: Applying the Effect to a Camera",id:"step-3-applying-the-effect-to-a-camera",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"In this tutorial, you'll learn how to create a custom watercolor post effect in PlayCanvas that applies a softening filter and a paper grain texture to your scene. By the end of this guide, you'll have a visually appealing watercolor effect that you can apply to any 3D scene."}),"\n",(0,a.jsx)("div",{className:"iframe-container",children:(0,a.jsx)("iframe",{src:"https://playcanv.as/p/3je0YP0q/",title:"Custom Post Effects",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,a.jsx)(t.h2,{id:"step-1-setting-up-your-shaders",children:"Step 1: Setting Up Your Shaders"}),"\n",(0,a.jsx)(t.p,{children:"First, we need to create the shaders that will define our watercolor effect. You'll create two shader assets: a vertex shader and a fragment shader."}),"\n",(0,a.jsx)(t.h3,{id:"vertex-shader-watercolorvert",children:"Vertex Shader (watercolor.vert)"}),"\n",(0,a.jsxs)(t.p,{children:["The vertex shader will pass the UV coordinates from the vertices to the fragment shader. Create a new shader asset in PlayCanvas and name it ",(0,a.jsx)(t.code,{children:"watercolor.vert"}),". Then, copy and paste the following code:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-glsl",metastring:'title="watercolor.vert"',children:"attribute vec2 aPosition;\n\nvarying vec2 vUv0;\n\nvoid main(void)\n{\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    vUv0 = (aPosition.xy + 1.0) * 0.5;\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"fragment-shader-watercolorfrag",children:"Fragment Shader (watercolor.frag)"}),"\n",(0,a.jsxs)(t.p,{children:["The fragment shader will apply the watercolor effect using the color buffer texture and UV coordinates. Create another shader asset named ",(0,a.jsx)(t.code,{children:"watercolor.frag"})," and insert the following code:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-glsl",metastring:'title="watercolor.frag"',children:"precision mediump float;\n\n// The texture containing our rendered scene\nuniform sampler2D uColorBuffer;\n\n// The UV coordinates passed from the vertex shader\nvarying vec2 vUv0;\n\n// Function to create a simple paper grain texture\nfloat paperTexture(vec2 uv) {\n    // Create a pseudo-random pattern based on UV coordinates\n    float grain = fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n    // Modulate the grain intensity\n    grain = smoothstep(0.3, 0.7, grain);\n    return grain;\n}\n\nvoid main(void) {\n    // Sample the color from the scene texture at this fragment's UV coordinates\n    vec4 sceneColor = texture2D(uColorBuffer, vUv0);\n\n    // Apply a softening filter to mimic watercolor fluidity\n    // Blend with neighboring pixels (basic blur)\n    vec4 blurColor = vec4(0.0);\n    float offset = 0.003; // Offset for neighboring pixels; adjust for blur amount\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            blurColor += texture2D(uColorBuffer, vUv0 + vec2(x, y) * offset);\n        }\n    }\n    blurColor /= 9.0;\n\n    // Mix original color with blurred version\n    vec4 mixedColor = mix(sceneColor, blurColor, 0.5);\n\n    // Overlay the paper texture\n    float grain = paperTexture(vUv0 * 10.0); // Tiling of the grain texture\n    mixedColor.rgb += mixedColor.rgb * grain * 0.1; // Modulate to adjust intensity\n\n    // Output the final color\n    gl_FragColor = mixedColor;\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"step-2-creating-the-watercolor-effect-script",children:"Step 2: Creating the Watercolor Effect Script"}),"\n",(0,a.jsxs)(t.p,{children:["Now, you'll create a script to apply the shaders to your scene. Create a new script in PlayCanvas and name it ",(0,a.jsx)(t.code,{children:"watercolor.js"}),". Paste in the code provided:"]}),"\n","\n",(0,a.jsxs)(o.A,{defaultValue:"classic",groupId:"script-code",children:[(0,a.jsx)(i.A,{value:"esm",label:"ESM",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"import { Script, PostEffect, Shader, SEMANTIC_POSITION, drawFullscreenQuad } from 'playcanvas';\n\n//--------------- POST EFFECT DEFINITION------------------------//\nclass WatercolorEffect extends PostEffect {\n    constructor(graphicsDevice, vs, fs) {\n        super(graphicsDevice);\n\n        this.shader = new Shader(graphicsDevice, {\n            attributes: {\n                aPosition: SEMANTIC_POSITION\n            },\n            vshader: vs,\n            fshader: fs\n        });\n    }\n\n    // Every post effect must implement the render method which \n    // sets any parameters that the shader might require and \n    // also renders the effect on the screen\n    render(inputTarget, outputTarget, rect) {\n        // Set the input render target to the shader. This is the image rendered from our camera\n        this.device.scope.resolve(\"uColorBuffer\").setValue(inputTarget.colorBuffer);\n        \n        // Draw a full screen quad on the output target. In this case the output target is the screen.\n        // Drawing a full screen quad will run the shader that we defined above\n        drawFullscreenQuad(this.device, outputTarget, this.vertexBuffer, this.shader, rect);\n    }\n}\n\n\n//--------------- SCRIPT DEFINITION------------------------//\nexport class WaterColor extends Script {\n    static scriptName = \"waterColor\";\n\n    /**\n     * @attribute\n     * @title Vertex Shader\n     * @type {Asset}\n     * @resource 'shader'\n     */\n    vs;\n\n    /**\n     * @attribute\n     * @title Fragment Shader\n     * @type {Asset}\n     * @resource 'shader'\n     */ \n    fs;\n\n\n    // initialize code called once per entity\n    initialize() {\n        const effect = new WatercolorEffect(this.app.graphicsDevice, this.vs.resource, this.fs.resource);\n        \n        // add the effect to the camera's postEffects queue\n        const queue = this.entity.camera.postEffects;\n        queue.addEffect(effect);\n        \n        // when the script is enabled add our effect to the camera's postEffects queue\n        this.on('enable', function () {\n            queue.addEffect(effect, false); \n        });\n        \n        // when the script is disabled remove our effect from the camera's postEffects queue\n        this.on('disable', function () {\n            queue.removeEffect(effect); \n        });\n    }\n}\n"})})}),(0,a.jsx)(i.A,{value:"classic",label:"Classic",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"//--------------- POST EFFECT DEFINITION------------------------//\nclass WatercolorEffect extends pc.PostEffect {\n    constructor(graphicsDevice, vs, fs) {\n        super(graphicsDevice);\n\n        this.shader = new pc.Shader(graphicsDevice, {\n            attributes: {\n                aPosition: pc.SEMANTIC_POSITION\n            },\n            vshader: vs,\n            fshader: fs\n        });\n    }\n\n    // Every post effect must implement the render method which \n    // sets any parameters that the shader might require and \n    // also renders the effect on the screen\n    render(inputTarget, outputTarget, rect) {\n        // Set the input render target to the shader. This is the image rendered from our camera\n        this.device.scope.resolve(\"uColorBuffer\").setValue(inputTarget.colorBuffer);\n        \n        // Draw a full screen quad on the output target. In this case the output target is the screen.\n        // Drawing a full screen quad will run the shader that we defined above\n        pc.drawFullscreenQuad(this.device, outputTarget, this.vertexBuffer, this.shader, rect);\n    }\n}\n\n\n//--------------- SCRIPT DEFINITION------------------------//\nvar Watercolor = pc.createScript('watercolor');\n\nWatercolor.attributes.add('vs', {\n    type: 'asset',\n    assetType: 'shader',\n    title: 'Vertex Shader'\n});\n\nWatercolor.attributes.add('fs', {\n    type: 'asset',\n    assetType: 'shader',\n    title: 'Fragment Shader'\n});\n\n// initialize code called once per entity\nWatercolor.prototype.initialize = function() {\n    const effect = new WatercolorEffect(this.app.graphicsDevice, this.vs.resource, this.fs.resource);\n    \n    // add the effect to the camera's postEffects queue\n    const queue = this.entity.camera.postEffects;\n    queue.addEffect(effect);\n    \n    // when the script is enabled add our effect to the camera's postEffects queue\n    this.on('enable', function () {\n        queue.addEffect(effect, false); \n    });\n    \n    // when the script is disabled remove our effect from the camera's postEffects queue\n    this.on('disable', function () {\n        queue.removeEffect(effect); \n    });\n};\n"})})})]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Remember to parse the script so that the Editor knows about the script's attributes!"})}),"\n",(0,a.jsx)(t.h2,{id:"step-3-applying-the-effect-to-a-camera",children:"Step 3: Applying the Effect to a Camera"}),"\n",(0,a.jsx)(t.p,{children:"To see your watercolor effect in action, you need to apply it to a camera in your scene:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Create a new entity with a ",(0,a.jsx)(t.a,{href:"/user-manual/scenes/components/camera",children:"camera component"})," if you haven't already."]}),"\n",(0,a.jsxs)(t.li,{children:["Add a ",(0,a.jsx)(t.a,{href:"/user-manual/scenes/components/script",children:"script component"})," to the camera entity and assign the watercolor script to it."]}),"\n",(0,a.jsxs)(t.li,{children:["Assign the ",(0,a.jsx)(t.code,{children:"watercolor.vert"})," and ",(0,a.jsx)(t.code,{children:"watercolor.frag"})," shader assets to the corresponding attributes in the watercolor script component."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Now, when you play your scene, you should see the watercolor effect applied, giving your scene a soft, artistic look."}),"\n",(0,a.jsxs)(t.p,{children:["See the Custom Post Effects project ",(0,a.jsx)(t.a,{href:"https://playcanvas.com/project/406045",children:"here"}),"."]})]})}function f(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},19365:(e,t,r)=>{r.d(t,{A:()=>o});r(96540);var n=r(34164);const a={tabItem:"tabItem_Ymn6"};var s=r(74848);function o({children:e,hidden:t,className:r}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,r),hidden:t,children:e})}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var n=r(96540);const a={},s=n.createContext(a);function o(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);