"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[20366],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(96540);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},45759:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"user-manual/pcui/data-binding/two-way-binding","title":"Two Way Binding","description":"Observers can also be bound bi-directionally, in which case an element can both send and receive updates through its observer. The following example shows a two way binding between two text inputs, where either input can update the value of the other. It\'s been written in React to showcase binding with React components.","source":"@site/docs/user-manual/pcui/data-binding/two-way-binding.md","sourceDirName":"user-manual/pcui/data-binding","slug":"/user-manual/pcui/data-binding/two-way-binding","permalink":"/user-manual/pcui/data-binding/two-way-binding","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/pcui/data-binding/two-way-binding.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Two Way Binding","sidebar_position":2},"sidebar":"userManualSidebar","previous":{"title":"Using Observers","permalink":"/user-manual/pcui/data-binding/using-observers"},"next":{"title":"Examples","permalink":"/user-manual/pcui/examples/"}}');var a=t(74848),s=t(28453);const o={title:"Two Way Binding",sidebar_position:2},r=void 0,c={},d=[{value:"How To",id:"how-to",level:3}];function l(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Observers can also be bound bi-directionally, in which case an element can both send and receive updates through its observer. The following example shows a two way binding between two text inputs, where either input can update the value of the other. It's been written in React to showcase binding with React components."}),"\n",(0,a.jsx)("div",{className:"iframe-container",children:(0,a.jsx)("iframe",{src:"https://playcanvas.github.io/pcui/storybook/iframe?id=examples-bindingtwoway--main&viewMode=story"})}),"\n",(0,a.jsx)(n.h3,{id:"how-to",children:"How To"}),"\n",(0,a.jsx)(n.p,{children:"First import the components, binding classes and PCUI styles."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { Observer } from '@playcanvas/observer';\nimport { TextInput, BindingTwoWay } from '@playcanvas/pcui';\nimport '@playcanvas/pcui/styles';\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then create a new observer for a an object which contains a text string."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const observer = new Observer({\n    text: 'Hello World'\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Create two text inputs, which can both send and receive updates through the linked observer. This style of binding is defined through the use of the ",(0,a.jsx)(n.code,{children:"BindingTwoWay"})," object which is passed as a property."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const link = { observer, path: 'text' };\nconst TextInput1 = () => <TextInput binding={new BindingTwoWay()} link={link} />\nconst TextInput2 = () => <TextInput binding={new BindingTwoWay()} link={link} />\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);