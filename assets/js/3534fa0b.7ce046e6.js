"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[90623],{11470:(e,t,s)=>{s.d(t,{A:()=>S});var n=s(96540),a=s(34164),r=s(17559),i=s(23104),l=s(56347),o=s(205),c=s(57485),u=s(31682),h=s(70679);function d(e){return n.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:t,children:s}=e;return(0,n.useMemo)(()=>{const e=t??function(e){return d(e).map(({props:{value:e,label:t,attributes:s,default:n}})=>({value:e,label:t,attributes:s,default:n}))}(s);return function(e){const t=(0,u.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,s])}function m({value:e,tabValues:t}){return t.some(t=>t.value===e)}function f({queryString:e=!1,groupId:t}){const s=(0,l.W6)(),a=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(a),(0,n.useCallback)(e=>{if(!a)return;const t=new URLSearchParams(s.location.search);t.set(a,e),s.replace({...s.location,search:t.toString()})},[a,s])]}function b(e){const{defaultValue:t,queryString:s=!1,groupId:a}=e,r=p(e),[i,l]=(0,n.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=t.find(e=>e.default)??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:r})),[c,u]=f({queryString:s,groupId:a}),[d,b]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[s,a]=(0,h.Dv)(t);return[s,(0,n.useCallback)(e=>{t&&a.set(e)},[t,a])]}({groupId:a}),g=(()=>{const e=c??d;return m({value:e,tabValues:r})?e:null})();(0,o.A)(()=>{g&&l(g)},[g]);return{selectedValue:i,selectValue:(0,n.useCallback)(e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),b(e)},[u,b,r]),tabValues:r}}var g=s(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=s(74848);function j({className:e,block:t,selectedValue:s,selectValue:n,tabValues:r}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),c=e=>{const t=e.currentTarget,a=l.indexOf(t),i=r[a].value;i!==s&&(o(t),n(i))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const s=l.indexOf(e.currentTarget)+1;t=l[s]??l[0];break}case"ArrowLeft":{const s=l.indexOf(e.currentTarget)-1;t=l[s]??l[l.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},e),children:r.map(({value:e,label:t,attributes:n})=>(0,v.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{l.push(e)},onKeyDown:u,onClick:c,...n,className:(0,a.A)("tabs__item",x.tabItem,n?.className,{"tabs__item--active":s===e}),children:t??e},e))})}function w({lazy:e,children:t,selectedValue:s}){const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===s);return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:r.map((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==s}))})}function y(e){const t=b(e);return(0,v.jsxs)("div",{className:(0,a.A)(r.G.tabs.container,"tabs-container",x.tabList),children:[(0,v.jsx)(j,{...t,...e}),(0,v.jsx)(w,{...t,...e})]})}function S(e){const t=(0,g.A)();return(0,v.jsx)(y,{...e,children:d(e.children)},String(t))}},15926:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/screen-476f6627ed7b4d931345e08a47f13204.png"},19365:(e,t,s)=>{s.d(t,{A:()=>i});s(96540);var n=s(34164);const a={tabItem:"tabItem_Ymn6"};var r=s(74848);function i({children:e,hidden:t,className:s}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,s),hidden:t,children:e})}},27937:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/boost-attributes-f05f79f639f1b15000334c8c64571bd5.png"},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>l});var n=s(96540);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}},33727:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/boost-hierarchy-67399a49a132617c5dc9fa6be2417fb1.png"},36574:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"tutorials/ui-elements-stats-counter","title":"User Interface - Stats Counter","description":"How to use buttons, progress bars and interact with elements. See the full scene.","source":"@site/docs/tutorials/ui-elements-stats-counter.md","sourceDirName":"tutorials","slug":"/tutorials/ui-elements-stats-counter","permalink":"/tutorials/ui-elements-stats-counter","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/tutorials/ui-elements-stats-counter.md","tags":[{"inline":true,"label":"ui","permalink":"/tags/ui"}],"version":"current","frontMatter":{"title":"User Interface - Stats Counter","tags":["ui"],"thumb":"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/501978/12B6CE-image-75.jpg"},"sidebar":"tutorialsSidebar","previous":{"title":"User Interface - Progress Bar","permalink":"/tutorials/ui-elements-progress"},"next":{"title":"User Interface - Text Input","permalink":"/tutorials/ui-text-input"}}');var a=s(74848),r=s(28453),i=s(11470),l=s(19365);const o={title:"User Interface - Stats Counter",tags:["ui"],thumb:"https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/501978/12B6CE-image-75.jpg"},c=void 0,u={},h=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Screen setup",id:"screen-setup",level:2},{value:"Stats setup",id:"stats-setup",level:2},{value:"Scripts",id:"scripts",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{className:"iframe-container",children:(0,a.jsx)("iframe",{src:"https://playcanv.as/p/XVLr9TWc/",title:"User Interface - Stats Counter",allow:"camera; microphone; xr-spatial-tracking; fullscreen",allowfullscreen:!0})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsxs)(t.em,{children:["How to use buttons, progress bars and interact with elements. See the ",(0,a.jsx)(t.a,{href:"https://playcanvas.com/editor/scene/547905",children:"full scene"}),"."]})}),"\n",(0,a.jsxs)(t.p,{children:["In this tutorial we are going to use the built-in ",(0,a.jsx)(t.a,{href:"/user-manual/user-interface/elements/",children:"Elements"})," to create a few simple widgets that allow you to increase a stat by clicking on plus / minus buttons."]}),"\n",(0,a.jsx)(t.p,{children:"For each stat we need a minus button, a plus button, a progress bar and some text to show the current stat value."}),"\n",(0,a.jsx)(t.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,a.jsx)(t.p,{children:"This is what our UI looks like in the Hierarchy:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Hierarchy",src:s(40873).A+"",width:"256",height:"604"})}),"\n",(0,a.jsx)(t.h2,{id:"screen-setup",children:"Screen setup"}),"\n",(0,a.jsxs)(t.p,{children:["First we start by adding a new 2D ",(0,a.jsx)(t.a,{href:"/user-manual/user-interface/screens/",children:"Screen"}),". This is what our Screen looks like:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Screen",src:s(15926).A+"",width:"317",height:"180"})}),"\n",(0,a.jsx)(t.p,{children:"Since it's a 2D screen we have ticked Screen Space. Our Reference Resolution is the resolution that we are targeting - in this case it's 1080 x 1920. We choose Blend for Scale Mode so that our Screen adapts to resolution changes and we set Scale Blend to 1 so that the Screen will adapt only to height changes."}),"\n",(0,a.jsx)(t.h2,{id:"stats-setup",children:"Stats setup"}),"\n",(0,a.jsx)(t.p,{children:"For each stat we will create a different Group Element. This allows us to treat sub-elements of the Group to be anchored to the Group edges and allows us to treat each stat as a separate widget."}),"\n",(0,a.jsxs)(t.p,{children:["We will only examine the Boost stat - the others are exactly the same. This is that the ",(0,a.jsx)(t.code,{children:"stats-boost"})," Entity looks like in the viewport:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Boost",src:s(45663).A+"",width:"500",height:"150"})}),"\n",(0,a.jsx)(t.p,{children:"And these are its attributes:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Boost Attributes",src:s(27937).A+"",width:"321",height:"644"})}),"\n",(0,a.jsxs)(t.p,{children:["As you can see it has a Group Element component with the appropriate size to contain all our elements and it's anchored to the bottom of the screen. It also has a Script Component with the script ",(0,a.jsx)(t.code,{children:"uiStats"})," assigned to it. This script will allow us to handle interactions with the Elements of the group."]}),"\n",(0,a.jsx)(t.p,{children:"This is what our group looks like in the Hierarchy:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Boost Hierarchy",src:s(33727).A+"",width:"253",height:"219"})}),"\n",(0,a.jsx)(t.p,{children:"Our group has the following child Elements:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"text-title"}),": A Text Element for the title of the group - anchored to the top of the group."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"btn-minus"}),": An Image Element that has a child Text Element. This is our minus button and it's anchored to the bottom left of the group."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"btn-plus"}),": An Image Element that has a child Text Element. This is our plus button and it's anchored to the bottom right of the group."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"progress-bar"}),": Our progress bar anchored to the bottom of the Group. This is an Image Element for the background of the progress bar and it has 2 child Elements:","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"image-progress"}),": The resizable Image Element that actually displays progress. Anchored to the left of the ",(0,a.jsx)(t.code,{children:"progress-bar"})," Element."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"text"}),": The Text Element that displays our stats. Anchored to the center of the ",(0,a.jsx)(t.code,{children:"progress-bar"})," Element."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"scripts",children:"Scripts"}),"\n",(0,a.jsxs)(t.p,{children:["We have a script on each button to allow us to change their texture based on hover states. This is similar to the script found in ",(0,a.jsx)(t.a,{href:"/tutorials/ui-elements-buttons/",children:"this tutorial"}),". We also have a script to handle our progress bar. There is more info on progress bars in ",(0,a.jsx)(t.a,{href:"/tutorials/ui-elements-progress/",children:"this tutorial"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["The main script that handles the interactions for each stat is ",(0,a.jsx)(t.code,{children:"uiStats"}),":"]}),"\n","\n",(0,a.jsxs)(i.A,{defaultValue:"classic",groupId:"script-code",children:[(0,a.jsx)(l.A,{value:"esm",label:"ESM",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"import { Script, math } from 'playcanvas';\n\nexport class UiStats extends Script {\n    static scriptName = \"uiStats\";\n\n    initialize() {\n        // find our widgets\n        this.btnPlus = this.entity.findByName('btn-plus');\n        this.btnMinus = this.entity.findByName('btn-minus');\n        this.progressBar = this.entity.findByName('progress-bar');\n        this.progressText = this.progressBar.findByName('text');\n\n        // initialize value to 0\n        this.setValue(0);\n\n        // increase value with plus button\n        this.btnPlus.element.on('click', (evt) => {\n            this.setValue(this.value + 1);\n        });\n\n        // decrease value with minus button\n        this.btnMinus.element.on('click', (evt) => {\n            this.setValue(this.value - 1);\n        });\n    }\n\n    // Sets the stat value\n    setValue(value) {\n        // clamp between min and max\n        this.value = math.clamp(value, 0, 10);\n        // set progress\n        this.progressBar.script.progressBar.setProgress(this.value / 10);\n        // update progress text\n        this.progressText.element.text = this.value + ' / ' + 10;\n    }\n}\n"})})}),(0,a.jsx)(l.A,{value:"classic",label:"Classic",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"var UiStats = pc.createScript('uiStats');\n\nUiStats.prototype.initialize = function() {\n    // find our widgets\n    this.btnPlus = this.entity.findByName('btn-plus');\n    this.btnMinus = this.entity.findByName('btn-minus');\n    this.progressBar = this.entity.findByName('progress-bar');\n    this.progressText = this.progressBar.findByName('text');\n\n    // initialize value to 0\n    this.setValue(0);\n\n    // increase value with plus button\n    this.btnPlus.element.on('click', function (evt) {\n        this.setValue(this.value + 1);\n    }, this);\n\n    // decrease value with minus button\n    this.btnMinus.element.on('click', function (evt) {\n        this.setValue(this.value - 1);\n    }, this);\n};\n\n// Sets the stat value\nUiStats.prototype.setValue = function (value) {\n    // clamp between min and max\n    this.value = pc.math.clamp(value, 0, 10);\n    // set progress\n    this.progressBar.script.progressBar.setProgress(this.value / 10);\n    // update progress text\n    this.progressText.element.text = this.value + ' / ' + 10;\n};\n"})})})]}),"\n",(0,a.jsx)(t.p,{children:"In this script we find our child elements and when the plus or minus buttons are clicked we increase / decrease the stat and update the progress bar and its text."})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},40873:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/hierarchy-a4ae61dee4fdf1639868cc26729ac0a6.png"},45663:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/boost-editor-eaf1da0759d89e0d42b1d4564be8e88e.png"}}]);