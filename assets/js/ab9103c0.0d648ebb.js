"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[15926],{11470:(e,t,n)=>{n.d(t,{A:()=>T});var a=n(96540),r=n(34164),s=n(17559),o=n(23104),i=n(56347),c=n(205),l=n(57485),u=n(31682),h=n(70679);function p(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)(()=>{const e=t??function(e){return p(e).map(({props:{value:e,label:t,attributes:n,default:a}})=>({value:e,label:t,attributes:n,default:a}))}(n);return function(e){const t=(0,u.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function y({value:e,tabValues:t}){return t.some(t=>t.value===e)}function m({queryString:e=!1,groupId:t}){const n=(0,i.W6)(),r=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l.aZ)(r),(0,a.useCallback)(e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})},[r,n])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=d(e),[o,i]=(0,a.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!y({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s})),[l,u]=m({queryString:n,groupId:r}),[p,f]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,r]=(0,h.Dv)(t);return[n,(0,a.useCallback)(e=>{t&&r.set(e)},[t,r])]}({groupId:r}),b=(()=>{const e=l??p;return y({value:e,tabValues:s})?e:null})();(0,c.A)(()=>{b&&i(b)},[b]);return{selectedValue:o,selectValue:(0,a.useCallback)(e=>{if(!y({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)},[u,f,s]),tabValues:s}}var b=n(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(74848);function w({className:e,block:t,selectedValue:n,selectValue:a,tabValues:s}){const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),l=e=>{const t=e.currentTarget,r=i.indexOf(t),o=s[r].value;o!==n&&(c(t),a(o))},u=e=>{let t=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},e),children:s.map(({value:e,label:t,attributes:a})=>(0,g.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{i.push(e)},onKeyDown:u,onClick:l,...a,className:(0,r.A)("tabs__item",v.tabItem,a?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function x({lazy:e,children:t,selectedValue:n}){const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===n);return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:s.map((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function j(e){const t=f(e);return(0,g.jsxs)("div",{className:(0,r.A)(s.G.tabs.container,"tabs-container",v.tabList),children:[(0,g.jsx)(w,{...t,...e}),(0,g.jsx)(x,{...t,...e})]})}function T(e){const t=(0,b.A)();return(0,g.jsx)(j,{...e,children:p(e.children)},String(t))}},19365:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);var a=n(34164);const r={tabItem:"tabItem_Ymn6"};var s=n(74848);function o({children:e,hidden:t,className:n}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,n),hidden:t,children:e})}},27e3:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"user-manual/physics/ray-casting","title":"Ray Casting","description":"The PlayCanvas physics engine allows you to perform ray casts. A ray cast is a query that determines if a straight line between two arbitrary 3D points intersects with a rigid body.","source":"@site/docs/user-manual/physics/ray-casting.md","sourceDirName":"user-manual/physics","slug":"/user-manual/physics/ray-casting","permalink":"/user-manual/physics/ray-casting","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/physics/ray-casting.md","tags":[],"version":"current","frontMatter":{"title":"Ray Casting"},"sidebar":"userManualSidebar","previous":{"title":"Compound Shapes","permalink":"/user-manual/physics/compound-shapes"},"next":{"title":"Calling the ammo.js API","permalink":"/user-manual/physics/calling-ammo"}}');var r=n(74848),s=n(28453),o=n(11470),i=n(19365);const c={title:"Ray Casting"},l=void 0,u={},h=[];function p(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The PlayCanvas physics engine allows you to perform ray casts. A ray cast is a query that determines if a straight line between two arbitrary 3D points intersects with a rigid body."}),"\n",(0,r.jsx)(t.p,{children:"One application of ray casting is picking, where the user can touch/click the screen and select an entity. Here is a script which performs a ray cast from the camera position into the scene through the screen touch/click position and returns the closest selected rigid body-enabled entity:"}),"\n","\n",(0,r.jsxs)(o.A,{defaultValue:"classic",groupId:"script-code",children:[(0,r.jsx)(i.A,{value:"esm",label:"ESM",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { Script, Vec3 } from 'playcanvas';\n\nexport class Raycast extends Script {\n    static scriptName = \"raycast\";\n\n    initialize() {\n        if (!this.entity.camera) {\n            console.error('This script must be applied to an entity with a camera component.');\n            return;\n        }\n\n        // Add a mousedown event handler\n        this.app.mouse.on('mousedown', this.mouseDown, this);\n\n        // Add touch event only if touch is available\n        if (this.app.touch) {\n            this.app.touch.on('touchstart', this.touchStart, this);\n        }\n    }\n\n    mouseDown(e) {\n        this.doRaycast(e.x, e.y);\n    }\n\n    touchStart(e) {\n        // Only perform the raycast if there is one finger on the screen\n        if (e.touches.length === 1) {\n            this.doRaycast(e.touches[0].x, e.touches[0].y);\n        }\n        e.event.preventDefault();\n    }\n\n    doRaycast(screenX, screenY) {\n        // The pc.Vec3 to raycast from (the position of the camera)\n        const from = this.entity.getPosition();\n\n        // The pc.Vec3 to raycast to (the click position projected onto the camera's far clip plane)\n        const to = this.entity.camera.screenToWorld(screenX, screenY, this.entity.camera.farClip);\n\n        // Raycast between the two points and return the closest hit result\n        const result = this.app.systems.rigidbody.raycastFirst(from, to);\n\n        // If there was a hit, store the entity\n        if (result) {\n            const hitEntity = result.entity;\n            console.log('You selected ' + hitEntity.name);\n        }\n    }\n}\n\n"})})}),(0,r.jsx)(i.A,{value:"classic",label:"Classic",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"var Raycast = pc.createScript('raycast');\n\n// initialize code called once per entity\nRaycast.prototype.initialize = function() {\n    if (!this.entity.camera) {\n        console.error('This script must be applied to an entity with a camera component.');\n        return;\n    }\n\n    // Add a mousedown event handler\n    this.app.mouse.on(pc.EVENT_MOUSEDOWN, this.mouseDown, this);\n\n    // Add touch event only if touch is available\n    if (this.app.touch) {\n        this.app.touch.on(pc.EVENT_TOUCHSTART, this.touchStart, this);\n    }\n};\n\nRaycast.prototype.mouseDown = function (e) {\n    this.doRaycast(e.x, e.y);\n};\n\nRaycast.prototype.touchStart = function (e) {\n    // Only perform the raycast if there is one finger on the screen\n    if (e.touches.length === 1) {\n        this.doRaycast(e.touches[0].x, e.touches[0].y);\n    }\n    e.event.preventDefault();\n};\n\nRaycast.prototype.doRaycast = function (screenX, screenY) {\n    // The pc.Vec3 to raycast from (the position of the camera)\n    const from = this.entity.getPosition();\n\n    // The pc.Vec3 to raycast to (the click position projected onto the camera's far clip plane)\n    const to = this.entity.camera.screenToWorld(screenX, screenY, this.entity.camera.farClip);\n\n    // Raycast between the two points and return the closest hit result\n    const result = this.app.systems.rigidbody.raycastFirst(from, to);\n\n    // If there was a hit, store the entity\n    if (result) {\n        const hitEntity = result.entity;\n        console.log('You selected ' + hitEntity.name);\n    }\n};\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["You can find a project that uses ray casting for entity selection ",(0,r.jsx)(t.a,{href:"https://playcanvas.com/project/410547/overview/entity-picking-using-physics",children:"here"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Ray casting has other applications too. An entity can probe the environment by firing ray casts. For example, to determine if an entity is on the ground, it can fire a ray cast directly downwards some distance and check if it intersects with the environment."})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(96540);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);