"use strict";(self.webpackChunkdeveloper_playcanvas_com=self.webpackChunkdeveloper_playcanvas_com||[]).push([[58561],{23048:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/disable-red-boxes-3fb9269402877fa9e261309ecf89d4ae.gif"},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var o=n(96540);const i={},s=o.createContext(i);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:t},e.children)}},42857:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/generate-random-boxes-9c9def80c0c4b4d2dde09215203f6055.gif"},45544:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"user-manual/editor/editor-api","title":"Editor API","description":"The Editor API is a beta feature. Please use caution when using on live projects.","source":"@site/docs/user-manual/editor/editor-api.md","sourceDirName":"user-manual/editor","slug":"/user-manual/editor/editor-api","permalink":"/user-manual/editor/editor-api","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/editor/editor-api.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Editor API","sidebar_position":10},"sidebar":"userManualSidebar","previous":{"title":"Engine Compatibility","permalink":"/user-manual/editor/engine-compatibility"},"next":{"title":"FAQ","permalink":"/user-manual/editor/faq"}}');var i=n(74848),s=n(28453);const a={title:"Editor API",sidebar_position:10},r=void 0,c={},l=[{value:"Automation Example",id:"automation-example",level:2},{value:"Extending Editor Functionality",id:"extending-editor-functionality",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsx)(t.p,{children:"The Editor API is a beta feature. Please use caution when using on live projects."})}),"\n",(0,i.jsx)(t.p,{children:"The Editor has a user accessible API that is currently in beta which can be used to help automate and extend the base functionality."}),"\n",(0,i.jsx)(t.p,{children:"The API is not yet considered stable and may change in the future as we continue development. However, it is unlikely that API will change a lot from its current state."}),"\n",(0,i.jsxs)(t.p,{children:["The Editor API is open sourced on ",(0,i.jsx)(t.a,{href:"https://github.com/playcanvas/editor-api",children:"GitHub"}),". The API documentation can be found ",(0,i.jsx)(t.a,{href:"https://api.playcanvas.com/editor/",children:"here"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"automation-example",children:"Automation Example"}),"\n",(0,i.jsx)(t.p,{children:"The API can be accessed via the browser's devtools console allowing for automation of repetitive tasks. In the example below, we are using the Editor to find all the Entities that have the tag 'red' and disabling them by running code in the browser console."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(23048).A+"",width:"1921",height:"1080"})}),"\n",(0,i.jsx)(t.p,{children:"Editor API code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"(function(){\n    const entities = editor.api.globals.entities.root.listByTag('red');\n    for (const entity of entities) {\n        entity.set('enabled', false);\n    }\n})();\n"})}),"\n",(0,i.jsx)(t.h2,{id:"extending-editor-functionality",children:"Extending Editor Functionality"}),"\n",(0,i.jsxs)(t.p,{children:["It is possible to add extra functionality to the Editor and create custom interfaces such as adding buttons. This can be done via a number of ways such as browser extensions or ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Userscript",children:"user scripts"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"User scripts is the more accessible out of the two which allows you to run custom code on top of the Editor."}),"\n",(0,i.jsxs)(t.p,{children:["Below we have an example where a button has been added to the ",(0,i.jsx)(t.a,{href:"/user-manual/editor/interface/viewport",children:"Viewport"})," to generate and randomly place boxes into the scene."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(42857).A+"",width:"1281",height:"720"})}),"\n",(0,i.jsxs)(t.p,{children:["The PlayCanvas team are currently using the ",(0,i.jsx)(t.a,{href:"https://violentmonkey.github.io/",children:"Violentmonkey"})," open source browser extension to manage user scripts."]}),"\n",(0,i.jsxs)(t.p,{children:["Once the browser extension has been installed, adding your own or another developer's user script is very straightforward. Steps can be found in ",(0,i.jsx)(t.a,{href:"https://violentmonkey.github.io/guide/creating-a-userscript/",children:"Violentmonkey's documentation"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"The code for the above user script is:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"// ==UserScript==\n// @name        Example Script\n// @namespace   Violentmonkey Scripts\n// @match       https://playcanvas.com/editor/scene/*\n// @grant       none\n// @version     1.0\n// @author      -\n// @description 20/10/2021, 11:40:21\n// ==/UserScript==\n\n(function() {\n    async function generateBoxes(count, position, radius) {\n        // create box entity\n        const box = editor.api.globals.entities.create({ parent: editor.api.globals.entities.root });\n        // find box material asset\n        const boxMaterial = editor.api.globals.assets.findOne(asset => asset.get('name') === 'boxMaterial');\n        // add render component\n        box.addComponent('render', {\n            type: 'box',\n            materialAssets: [boxMaterial.get('id')]\n        });\n\n        // add a number of boxes around a point in the scene\n        let offset = new pc.Vec3();\n        let rotation = new pc.Quat();\n        const result = [];\n\n        for (let i = 0; i < count; i++) {\n            const boxCopy = await box.duplicate();\n            boxCopy.set('name', 'Box ' + (i + 1));\n            offset.set(1, 0, 0);\n            rotation.setFromEulerAngles(0, pc.math.random(-360, 360), 0);\n            offset = rotation.transformVector(offset);\n            offset.scale(pc.math.random(-radius, radius));\n            boxCopy.set('position', [position.x + offset.x, position.y + offset.y, position.z + offset.z]);\n\n            result.push(boxCopy);\n        }\n\n        // delete original box\n        box.delete();\n\n        return result;\n    }\n\n    function createButton() {\n        const btn = new pcui.Button({ text: 'Generate Boxes' });\n        btn.style.position = 'absolute';\n        btn.style.bottom = '10px';\n        btn.style.right = '10px';\n        editor.call('layout.viewport').append(btn);\n\n        let boxes;\n\n        btn.on('click', () => {\n            // delete existing boxes\n            if (boxes) {\n                editor.api.globals.entities.delete(boxes);\n                boxes = null;\n            }\n\n            generateBoxes(10, new pc.Vec3(), 10).then(result => {\n                boxes = result;\n            });\n        });\n    }\n\n    // Wait until the Editor is available before adding the button\n    editor.once('load', () => createButton());\n})();\n"})}),"\n",(0,i.jsx)(t.p,{children:"Let's break down the important areas of the script:"}),"\n",(0,i.jsxs)(t.p,{children:["At the top is the informational header about the script if you do share the script with other users. The important line is the ",(0,i.jsx)(t.code,{children:"@match"})," attribute which controls which URLs the script is loaded on. In this case, it is set to load on any PlayCanvas scene. More information on how to change this can be found in ",(0,i.jsx)(t.a,{href:"https://violentmonkey.github.io/api/matching/",children:"Violentmonkey's documentation"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"// ==UserScript==\n// @name        Example Script\n// @namespace   Violentmonkey Scripts\n// @match       https://playcanvas.com/editor/scene/*\n// @grant       none\n// @version     1.0\n// @author      -\n// @description 20/10/2021, 11:40:21\n// ==/UserScript==\n"})}),"\n",(0,i.jsx)(t.p,{children:"This is private Editor API to wait for an event when the Editor has fully loaded. Using the event ensures that the Editor API is accessible before the code to extend Editor features is ran."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"    // Wait until the Editor is available before adding the button\n    editor.once('load', () => createButton());\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The button created is from the ",(0,i.jsx)(t.a,{href:"https://github.com/playcanvas/pcui",children:"PCUI"})," framework library that the Editor is also using. Again, there is some private API use to get the Viewport DOM to attach the button to."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"    function createButton() {\n        const btn = new pcui.Button({ text: 'Generate Boxes' });\n        btn.style.position = 'absolute';\n        btn.style.bottom = '10px';\n        btn.style.right = '10px';\n        editor.call('layout.viewport').append(btn);\n\n        let boxes;\n\n        btn.on('click', () => {\n            // delete existing boxes\n            if (boxes) {\n                editor.api.globals.entities.delete(boxes);\n                boxes = null;\n            }\n\n            generateBoxes(10, new pc.Vec3(), 10).then(result => {\n                boxes = result;\n            });\n        });\n    }\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);