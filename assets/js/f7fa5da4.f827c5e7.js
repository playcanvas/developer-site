"use strict";(globalThis.webpackChunkdeveloper_playcanvas_com=globalThis.webpackChunkdeveloper_playcanvas_com||[]).push([[33281],{7184:(e,t,a)=>{a.d(t,{C:()=>A,G:()=>S});var n=a(11470),r=a(19365),s=a(59849),o=a(96540),i=a(95293),l=a(9764),c=a(18676),p=a(58817),h=a(19748),m=a(83395),u=a(43025),d=a(10977),f=a(7306),y=a(68869),g=a(78692),b=a(8939),w=a(40050),v=a(93953),x=a(27351),C=a(74848);const j="// \u2191 imports hidden",S=({code:e,label:t,filename:a,language:i="jsx",showDemo:c=!1,showViewSourceButton:p=!0,showControls:h=!0,children:m})=>{const[u,d]=(0,o.useState)(0);if(!m||!e)return console.error("CodeExample: code and children are required"),null;return(0,C.jsxs)(n.A,{defaultValue:u>0?"Code":c?"Demo":"Code",children:[(0,C.jsx)(r.A,{value:"Demo",children:(0,C.jsxs)("div",{className:"code-example-demo",children:[m,p&&(0,C.jsxs)("div",{className:"code-example-demo-footer",children:[t," - ",(0,C.jsx)("a",{href:"#",onClick:e=>{e.preventDefault(),d(e=>e+1)},children:"View Code"})]}),(0,C.jsx)("div",{className:"code-example-controls",children:(0,C.jsx)(l.XA,{fill:!0,hidden:!1===h})})]})}),(0,C.jsx)(r.A,{value:"Code",children:(0,C.jsx)(s.A,{language:i,title:a,children:e.includes(j)?j+e.split(j)[1]:e})})]},u)},E=e=>{const{width:t=8,depth:a=8,intensity:n=.75}=e,r=(0,o.useMemo)(()=>new v.e(t,1,a),[t,a]);return(0,C.jsxs)(c.w,{children:[(0,C.jsx)(h.v,{type:"directional",castShadows:!0,normalOffsetBias:0,shadowBias:0,shadowDistance:16,shadowResolution:1024,shadowType:x.au1,shadowUpdateMode:x.M5l,vsmBlurSize:8,shadowIntensity:n,intensity:0}),(0,C.jsx)(m.e,{script:b.X,intensity:n,scale:r})]})},A=({children:e,useLight:t=!0,useControls:a=!1,useGrid:n=!1,useShadow:r=!1,camera:s=[0,0,10],sceneOffset:l=[0,-.501,0],exposure:h=1})=>{const{colorMode:b}=(0,i.G)(),v=(0,d.n)(),{asset:x}=(0,f.yj)("/assets/helipad.png"),j="dark"===b?"#2a2a2a":"#e4e0e0",[S,A]=(0,o.useState)(!1),[N,D]=(0,o.useState)(!1),O=(0,o.useCallback)(()=>A(!0),[]),T=(0,o.useCallback)(()=>A(!1),[]),I=(0,o.useCallback)(()=>D(!0),[]),R=(0,o.useCallback)(()=>D(!1),[]);return(0,o.useEffect)(()=>{const e=v.graphicsDevice.canvas;e.style.cursor=S?"grabbing":N?"grab":"default"},[S,N,v]),(0,o.useEffect)(()=>{const e=()=>A(!1);return v.graphicsDevice.canvas.addEventListener("pointerup",e),()=>v.graphicsDevice?.canvas.removeEventListener("pointerup",e)},[v]),(0,C.jsxs)(c.w,{children:[(0,C.jsxs)(c.w,{name:"camera",position:s,children:[(0,C.jsx)(p.i,{clearColor:j,renderSceneColorMap:!0}),a&&(0,C.jsx)(m.e,{script:y.a,enableFly:!1,pitchRange:new w.Z(-90,-5)})]}),t&&(0,C.jsx)(u.O,{envAtlas:x,showSkybox:!1,exposure:h}),n&&(0,C.jsx)(c.w,{name:"grid",scale:[1e3,1,1e3],position:[0,-.5,0],children:(0,C.jsx)(m.e,{script:g.x})}),r&&(0,C.jsx)(c.w,{position:l,children:(0,C.jsx)(E,{})}),(0,C.jsx)(c.w,{onPointerOver:I,onPointerOut:R,onPointerDown:O,onPointerUp:T,children:e})]})}},24421:(e,t,a)=>{a.d(t,{A:()=>h});var n=a(18676),r=a(19748),s=a(83395),o=a(93953),i=a(27351),l=a(8939),c=a(96540),p=a(74848);const h=e=>{const{width:t=2,depth:a=2,intensity:h=.75}=e,m=(0,c.useMemo)(()=>new o.e(t,1,a),[t,a]);return(0,p.jsxs)(n.w,{position:[0,.001,0],children:[(0,p.jsx)(r.v,{type:"directional",castShadows:!0,normalOffsetBias:0,shadowBias:0,shadowDistance:16,shadowResolution:1024,shadowType:i.au1,shadowUpdateMode:i.M5l,vsmBlurSize:8,shadowIntensity:h,intensity:0}),(0,p.jsx)(s.e,{script:l.X,intensity:h,scale:m})]})}},49801:(e,t,a)=>{a.d(t,{A:()=>i});var n=a(18676),r=a(83395),s=a(78692),o=a(74848);const i=({...e})=>(0,o.jsx)(n.w,{scale:[1e3,1,1e3],children:(0,o.jsx)(r.e,{script:s.x,...e})})},51190:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>y,contentTitle:()=>f,default:()=>w,frontMatter:()=>d,metadata:()=>n,toc:()=>g});const n=JSON.parse('{"id":"user-manual/playcanvas-react/api/camera","title":"<Camera/>","description":"Documentation for the Camera component","source":"@site/docs/user-manual/playcanvas-react/api/camera.mdx","sourceDirName":"user-manual/playcanvas-react/api","slug":"/user-manual/playcanvas-react/api/camera","permalink":"/user-manual/playcanvas-react/api/camera","draft":false,"unlisted":false,"editUrl":"https://github.com/playcanvas/developer.playcanvas.com/tree/dev/docs/user-manual/playcanvas-react/api/camera.mdx","tags":[],"version":"current","frontMatter":{"description":"Documentation for the Camera component"},"sidebar":"userManualSidebar","previous":{"title":"<Anim/>","permalink":"/user-manual/playcanvas-react/api/anim"},"next":{"title":"<Collision/>","permalink":"/user-manual/playcanvas-react/api/collision"}}');var r=a(74848),s=a(28453),o=a(7184),i=a(78264),l=a(96540),c=a(18676),p=a(58817),h=a(16230);const m=()=>{const[e,t]=(0,l.useState)(!1);return(0,r.jsxs)(r.Fragment,{children:[!e&&(0,r.jsx)(c.w,{name:"perspective-camera",position:[2,1,2],rotation:[-20,45,0],children:(0,r.jsx)(p.i,{clearColor:"#1a1a1a",fov:60,projection:"perspective"})}),e&&(0,r.jsx)(c.w,{name:"orthographic-camera",position:[0,0,5],children:(0,r.jsx)(p.i,{clearColor:"#9a9a9a",projection:"orthographic",orthoHeight:3})}),(0,r.jsx)(c.w,{children:(0,r.jsx)(h.d,{type:"box"})}),(0,r.jsxs)("div",{className:"overlay",children:[(0,r.jsx)("button",{"data-selected":!e,onClick:()=>t(!1),children:"Perspective Camera"}),(0,r.jsx)("button",{"data-selected":e,onClick:()=>t(!0),children:"Orthographic Camera"})]})]})},u='import { useState } from \'react\';\nimport { Entity } from \'@playcanvas/react\';\nimport { Camera, Render } from \'@playcanvas/react/components\';\n\n// \u2191 imports hidden\nexport const CameraExample = () => {\n  const [isOrthographic, setIsOrthographic] = useState(false);\n\n  return (<>\n    {/* Perspective Camera */}\n    {!isOrthographic && (\n    <Entity name="perspective-camera" position={[2, 1, 2]} rotation={[-20, 45, 0]}>\n        <Camera \n        clearColor="#1a1a1a" \n        fov={60} projection="perspective"\n        />\n    </Entity>\n    )}\n\n    {/* Orthographic Camera */}\n    {isOrthographic && (\n    <Entity name="orthographic-camera" position={[0, 0, 5]}>\n        <Camera \n        clearColor="#9a9a9a" \n        projection="orthographic"\n        orthoHeight={3}\n        />\n    </Entity>\n    )}\n\n    {/* Scene objects to view */}\n    <Entity >\n    <Render type="box" />\n    </Entity>\n\n    {/* UI Overlay with buttons */}\n    <div className="overlay">\n    <button data-selected={!isOrthographic} onClick={() => setIsOrthographic(false)}   >   \n        Perspective Camera\n    </button>\n    <button data-selected={isOrthographic} onClick={() => setIsOrthographic(true)} >\n        Orthographic Camera\n    </button>\n    </div>\n  </>);\n};\n\n',d={description:"Documentation for the Camera component"},f="<Camera/>",y={},g=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2}];function b(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components},{RenderApiDocs:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RenderApiDocs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"camera",children:(0,r.jsx)(t.code,{children:"<Camera/>"})})}),"\n","\n",(0,r.jsxs)(t.p,{children:["Without a camera in your scene, nothing will be rendered. The ",(0,r.jsx)(t.code,{children:"<Camera/>"})," component enables an ",(0,r.jsx)(t.a,{href:"../entity",children:(0,r.jsx)(t.code,{children:"<Entity/>"})})," to render a scene from its perspective. Set the entity's position and rotation to control the camera's viewpoint."]}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(t.p,{children:["Attach a ",(0,r.jsx)(t.code,{children:"<Camera/>"})," to an ",(0,r.jsx)(t.a,{href:"../entity",children:(0,r.jsx)(t.code,{children:"<Entity/>"})})," and it will render the scene from the entity's position and rotation."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'<Entity>\n  <Camera clearColor="red" />\n</Entity>\n'})}),"\n",(0,r.jsx)(t.p,{children:"In this example, we're switching between 2 different cameras in the scene, each with its own properties."}),"\n",(0,r.jsx)(o.G,{label:"Switch between camera types",code:u,showDemo:!0,children:(0,r.jsx)(i.l,{children:(0,r.jsx)(o.C,{useLight:!0,useShadow:!0,useGrid:!0,useCamera:!1,children:(0,r.jsx)(m,{})})})}),"\n",(0,r.jsxs)(t.p,{children:["Learn more about the ",(0,r.jsx)(t.a,{href:"https://api.playcanvas.com/engine/classes/CameraComponent.html",children:"Camera Component"})," in the PlayCanvas documentation."]}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(a,{data:'[{"name":"default","description":"","entries":[{"name":"gammaCorrection","description":"Sets the gamma correction to apply when rendering the scene. Can be:\\n\\n- GAMMA_NONE\\n- GAMMA_SRGB\\n\\nDefaults to GAMMA_SRGB.\\nGets the gamma correction used when rendering the scene.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"toneMapping","description":"Sets the tonemapping transform to apply to the rendered color buffer. Can be:\\n\\n- TONEMAP_LINEAR\\n- TONEMAP_FILMIC\\n- TONEMAP_HEJL\\n- TONEMAP_ACES\\n- TONEMAP_ACES2\\n- TONEMAP_NEUTRAL\\n\\nDefaults to TONEMAP_LINEAR.\\nGets the tonemapping transform applied to the rendered color buffer.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"fog","description":"Sets the fog parameters. If this is not null, the camera will use these fog parameters\\ninstead of those specified on the Scene#fog .\\nGets a FogParams that defines fog parameters, or null if those are not set.","optional":true,"type":{"displayName":"FogParams | null","types":[{"name":"FogParams","url":"https://api.playcanvas.com/engine/classes/FogParams.html"}]}},{"name":"aperture","description":"Sets the camera aperture in f-stops. Default is 16. Higher value means less exposure. Used\\nif Scene#physicalUnits  is true.\\nGets the camera aperture in f-stops.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"aspectRatio","description":"Sets the aspect ratio (width divided by height) of the camera. If aspectRatioMode is\\nASPECT_AUTO, then this value will be automatically calculated every frame, and you\\ncan only read it. If it\'s ASPECT_MANUAL, you can set the value.\\nGets the aspect ratio (width divided by height) of the camera.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"aspectRatioMode","description":"Sets the aspect ratio mode of the camera. Can be:\\n\\n- ASPECT_AUTO: aspect ratio will be calculated from the current render\\ntarget\'s width divided by height.\\n- ASPECT_MANUAL: use the aspectRatio value.\\n\\nDefaults to ASPECT_AUTO.\\nGets the aspect ratio mode of the camera.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"clearColor","description":"Sets the camera component\'s clear color. Defaults to `[0.75, 0.75, 0.75, 1]`.\\nGets the camera component\'s clear color.","optional":true,"type":{"displayName":"string","types":[{"name":"string","url":null}]}},{"name":"clearColorBuffer","description":"Sets whether the camera will automatically clear the color buffer before rendering. Defaults to true.\\nGets whether the camera will automatically clear the color buffer before rendering.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"clearDepthBuffer","description":"Sets whether the camera will automatically clear the depth buffer before rendering. Defaults to true.\\nGets whether the camera will automatically clear the depth buffer before rendering.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"clearStencilBuffer","description":"Sets whether the camera will automatically clear the stencil buffer before rendering. Defaults to true.\\nGets whether the camera will automatically clear the stencil buffer before rendering.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"cullFaces","description":"Sets whether the camera will cull triangle faces. If true, the camera will take\\nMaterial#cull  into account. Otherwise both front and back faces will be rendered.\\nDefaults to true.\\nGets whether the camera will cull triangle faces.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"disablePostEffectsLayer","description":"Sets the layer id of the layer on which the post-processing of the camera stops being applied\\nto. Defaults to LAYERID_UI, which causes post-processing to not be applied to UI\\nlayer and any following layers for the camera. Set to `undefined` for post-processing to be\\napplied to all layers of the camera.\\nGets the layer id of the layer on which the post-processing of the camera stops being applied\\nto.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"farClip","description":"Sets the distance from the camera after which no rendering will take place. Defaults to 1000.\\nGets the distance from the camera after which no rendering will take place.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"flipFaces","description":"Sets whether the camera will flip the face direction of triangles. If set to true, the\\ncamera will invert front and back faces. Can be useful for reflection rendering. Defaults to\\nfalse.\\nGets whether the camera will flip the face direction of triangles.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"fov","description":"Sets the field of view of the camera in degrees. Usually this is the Y-axis field of view\\n(see horizontalFov). Used for PROJECTION_PERSPECTIVE cameras only. Defaults to\\n45.\\nGets the field of view of the camera in degrees.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"frustumCulling","description":"Sets whether frustum culling is enabled. This controls the culling of MeshInstances\\nagainst the camera frustum, i.e. if objects outside of the camera\'s frustum should be\\nomitted from rendering. If false, all mesh instances in the scene are rendered by the\\ncamera, regardless of visibility. Defaults to false.\\nGets whether frustum culling is enabled.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"horizontalFov","description":"Sets whether the camera\'s field of view (fov) is horizontal or vertical. Defaults to\\nfalse (meaning it is vertical by default).\\nGets whether the camera\'s field of view (fov) is horizontal or vertical.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"layers","description":"Sets the array of layer IDs (Layer#id ) to which this camera should belong. Don\'t\\npush, pop, splice or modify this array. If you want to change it, set a new one instead.\\nDefaults to [LAYERID_WORLD, LAYERID_DEPTH, LAYERID_SKYBOX,\\nLAYERID_UI, LAYERID_IMMEDIATE].\\nGets the array of layer IDs (Layer#id ) to which this camera belongs.","optional":true,"type":{"displayName":"number[]","types":[{"name":"Array","url":null}]}},{"name":"jitter","description":"Sets the jitter intensity applied in the projection matrix. Used for jittered sampling by TAA.\\nA value of 1 represents a jitter in the range of `[-1, 1]` of a pixel. Smaller values result\\nin a crisper yet more aliased outcome, whereas increased values produce a smoother but blurred\\nresult. Defaults to 0, representing no jitter.\\nGets the jitter intensity applied in the projection matrix.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"nearClip","description":"Sets the distance from the camera before which no rendering will take place. Defaults to 0.1.\\nGets the distance from the camera before which no rendering will take place.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"orthoHeight","description":"Sets the half-height of the orthographic view window (in the Y-axis). Used for\\nPROJECTION_ORTHOGRAPHIC cameras only. Defaults to 10.\\nGets the half-height of the orthographic view window (in the Y-axis).","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"priority","description":"Sets the priority to control the render order of this camera. Cameras with a smaller\\npriority value are rendered first. Defaults to 0.\\nGets the priority to control the render order of this camera.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"projection","description":"Sets the type of projection used to render the camera. Can be:\\n\\n- PROJECTION_PERSPECTIVE: A perspective projection. The camera frustum\\nresembles a truncated pyramid.\\n- PROJECTION_ORTHOGRAPHIC: An orthographic projection. The camera\\nfrustum is a cuboid.\\n\\nDefaults to PROJECTION_PERSPECTIVE.\\nGets the type of projection used to render the camera.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"rect","description":"Sets the rendering rectangle for the camera. This controls where on the screen the camera\\nwill render in normalized screen coordinates. Defaults to `[0, 0, 1, 1]`.\\nGets the rendering rectangle for the camera.","optional":true,"type":{"displayName":"[number, number, number, number]","types":[{"name":"[number, number, number, number]","url":null}]}},{"name":"renderSceneColorMap","description":"","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"renderSceneDepthMap","description":"","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}},{"name":"renderTarget","description":"Sets the render target to which rendering of the camera is performed. If not set, it will\\nrender simply to the screen.\\nGets the render target to which rendering of the camera is performed.","optional":true,"type":{"displayName":"RenderTarget","types":[{"name":"RenderTarget","url":"https://api.playcanvas.com/engine/classes/RenderTarget.html"}]}},{"name":"scissorRect","description":"Sets the scissor rectangle for the camera. This clips all pixels which are not in the\\nrectangle. The order of the values is `[x, y, width, height]`. Defaults to `[0, 0, 1, 1]`.\\nGets the scissor rectangle for the camera.","optional":true,"type":{"displayName":"[number, number, number, number]","types":[{"name":"[number, number, number, number]","url":null}]}},{"name":"sensitivity","description":"Sets the camera sensitivity in ISO. Defaults to 1000. Higher value means more exposure. Used\\nif Scene#physicalUnits  is true.\\nGets the camera sensitivity in ISO.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"shutter","description":"Sets the camera shutter speed in seconds. Defaults to 1/1000s. Longer shutter means more\\nexposure. Used if Scene#physicalUnits  is true.\\nGets the camera shutter speed in seconds.","optional":true,"type":{"displayName":"number","types":[{"name":"number","url":null}]}},{"name":"system","description":"The ComponentSystem used to create this Component.","optional":true,"type":{"displayName":"ComponentSystem","types":[{"name":"ComponentSystem","url":"https://api.playcanvas.com/engine/classes/ComponentSystem.html"}]}},{"name":"entity","description":"The Entity that this Component is attached to.","optional":true,"type":{"displayName":"Entity","types":[{"name":"Entity","url":"https://api.playcanvas.com/engine/classes/Entity.html"}]}},{"name":"enabled","description":"Sets the enabled state of the component.\\nGets the enabled state of the component.","optional":true,"type":{"displayName":"boolean","types":[{"name":"false","url":null},{"name":"true","url":null}]}}]}]'})]})}function w(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}},53558:(e,t,a)=>{a.d(t,{A:()=>b});var n=a(96540),r=a(68869),s=a(8939),o=a(78692),i=a(14007),l=a(25303),c=a(34363),p=a(53512),h=a(49801),m=a(24421),u=a(85593),d=a(83395),f=a(83171),y=a(74848);const g=e=>(0,y.jsx)(d.e,{script:f.d,...e}),b={React:n,...n,...i,...l,...c,...p,Grid:h.A,ShadowCatcher:m.A,GridScript:o.x,ShadowCatcherScript:s.X,StaticPostEffects:u.A,AutoRotate:g,CameraControls:r.a}},85593:(e,t,a)=>{a.d(t,{A:()=>o});var n=a(83395),r=a(15817),s=a(74848);const o=e=>{const t={lighting:{exposure:1.21,skyBoxIntensity:1.02},rendering:{renderFormat:18,renderTargetScale:1,sharpness:0,samples:4,toneMapping:4,fog:"none",fogColor:{r:0,g:0,b:0,a:1},fogRange:[0,100],fogDensity:.01,renderFormatFallback0:12,renderFormatFallback1:14,sceneColorMap:!1,sceneDepthMap:!1,fogStart:0,fogEnd:100},bloom:{enabled:!0,intensity:.1,lastMipLevel:1},grading:{enabled:!0,brightness:.83,contrast:1.1,saturation:1.2,tint:{r:1,g:.9333333333333333,b:.8666666666666667,a:1}},vignette:{enabled:!0,intensity:1,inner:.25,outer:1.52,curvature:.78},fringing:{enabled:!0,intensity:10},...e};return(0,s.jsx)(n.e,{script:r.P,...t})}}}]);